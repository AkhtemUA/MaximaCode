/* rtest_laplace.mac -- test cases for Laplace transform
 * Copyright 2012 by Robert Dodier.
 * I release this work under terms of the GNU General Public License.
 */

(kill (all), 0);
0;

laplace (0, u, v);
0;

laplace (1, u, v);
1/v;

laplace (7, u, v);
7/v;

laplace (a, u, v);
a/v;

laplace (foo(x), u, v);
foo(x)/v;

laplace (exp (- u), u, v);
1/(1 + v);

laplace (exp (- 7*u), u, v);
1/(7 + v);

laplace (exp (- a*u), u, v);
1/(a + v);

laplace (exp (- foo(x)*u), u, v);
1/(foo(x) + v);

laplace (sin (u), u, v);
1/(1 + v^2);

laplace (sin (a*u), u, v);
a/(a^2 + v^2);

laplace (sin (foo(x)*u), u, v);
foo(x)/(foo(x)^2 + v^2);

laplace (cos (u), u, v);
v/(1 + v^2);

laplace (cos (a*u), u, v);
v/(a^2 + v^2);

laplace (cos (foo(x)*u), u, v);
v/(foo(x)^2 + v^2);

laplace (sinh (u), u, v);
1/(v^2 - 1);

laplace (sinh (7*u), u, v);
7/(v^2 - 49);

laplace (sinh (a*u), u, v);
a/(v^2 - a^2);

(laplace (sinh (foo(x)*u), u, v), if equal (%%, foo(x)/(v^2 - foo(x)^2)) then true else %%);
true;

laplace (cosh (u), u, v);
v/(v^2 - 1);

laplace (cosh (7*u), u, v);
v/(v^2 - 49);

laplace (cosh (a*u), u, v);
v/(v^2 - a^2);

(laplace (cosh (foo(x)*u), u, v), if equal (%%, v/(v^2 - foo(x)^2)) then true else %%);
true;

(laplace (log (u), u, v), if equal (%%, (-1/v)*(log (v) + %gamma)) then true else %%);
true;

laplace ('diff (foo (u), u), u, v);
v * 'laplace (foo (u), u, v) - foo (0);

laplace ('integrate (foo (w), w, 0, u), u, v);
(1/v)*'laplace (foo (u), u, v);

laplace ('sum (foo (u, i), i, 0, n), u, v);
'sum ('laplace (foo (u, i), u, v), i, 0, n);

laplace (erf (u), u, v);
exp (v^2/4) * (1 - erf (v/2)) / v;

laplace ('ilt (foo (v), v, u), u, v);
foo (v);

laplace (delta (u), u, v);
1;

/* try cases which specint handles */

/* Algorithm 1: Laplace transform of c*t^v*exp(-s*t+e*f) */

/* Algorithm 1.1: Laplace transform of c*t^v*exp(-a*t^2)
 * t^(v-1)*exp(-t^2/8/a)
 *   -> gamma(v)*2^v*a^(v/2)*exp(a*p^2)*D[-v](2*p*sqrt(a))
 */

/* Algorithm 1.2: Laplace transform of c*t^v*exp(-a*sqrt(t))
 * (2*t)^(v-1)*exp(-2*sqrt(a)*sqrt(t))
 *    -> gamma(2*v)*p^(-v)*exp(a/p/2)*D[-2*v](sqrt(2*a/p))
 */

/* Algorithm 1.3: Laplace transform of t^v*exp(1/t)
 * t^(v-1)*exp(-a/t/4)
 *    -> 2*(a/p/4)^(v/2)*bessel_k(v, sqrt(a)*sqrt(p))
 */

/* Algorithm 1.4: Laplace transform of exp(exp(-t))
 * exp(-a*exp(-t))
 *   -> a^(-p)*gamma(p,a)
 */

/* Algorithm 1.5: Laplace transform of exp(exp(t))
 * exp(-a*exp(t))
 *   -> a^(-p)*gamma_incomplete(-p,a)
 */

/* Algorithm 2: Laplace transform of u(t)*%e^(-p*t).
 * Laplace transform of asin(w)
 * Laplace transform of atan(w)
 * Laplace transform of two Bessel J functions
 * Laplace transform of two hankel_1 functions
 * Laplace transform of two hankel_2 functions
 * Laplace transform of hankel_1 * hankel_2
 * Laplace transform of two Bessel Y functions
 * Laplace transform of two Bessel K functions
 * Laplace transform of Bessel K and Bessel Y functions
 * Laplace transform of Bessel I and Bessel J functions
 * Laplace transform of Bessel I and Hankel 1 functions
 * Laplace transform of Bessel I and Hankel 2 functions
 * Laplace transform of Bessel Y and Bessel J functions
 * Laplace transform of Bessel K and Bessel J functions
 * Laplace transform of Hankel 1 and Bessel J functions
 * Laplace transform of Hankel 2 and Bessel J functions
 * Laplace transform of Bessel Y and Hankel 1 functions
 * Laplace transform of Bessel Y and Hankel 2 functions
 * Laplace transform of Bessel K and Hankel 1 functions
 * Laplace transform of Bessel K and Hankel 2 functions
 * Laplace transform of Bessel I and Bessel Y functions
 * Laplace transform of Bessel I and Bessel K functions
 * Laplace transform of Struve H function
 * Laplace transform of Struve L function
 * Laplace transform of little Lommel s function
 * Laplace transform of Lommel S function
 * Laplace transform of Bessel Y function
 * Laplace transform of Bessel K function
 * Laplace transform of Parabolic Cylinder function
 * Laplace transform of Incomplete Gamma function
 * Laplace transform of Batemann function
 * Laplace transform of Bessel J function
 * Laplace transform of Gamma greek function
 * Laplace transform of Hankel 1 function
 * Laplace transform of Hankel 2 function
 * Laplace transform of Whittaker M function
 * Laplace transform of Whittaker M function
 * Laplace transform of the Generalized Laguerre function, %l[v1,v2](w)
 * Laplace transform for the Generalized Laguerre function
 * Laplace transform for the Laguerre function
 * Laplace transform of Gegenbauer function
 * Laplace transform of Chebyshev function of the first kind
 * Laplace transform of Chebyshev function of the second kind
 * Laplace transform for the Hermite function, hermite(index1,arg1)
 * Laplace transform of %p[v1,v2](w), Associated Legendre P function
 * Laplace transform of Associated Legendre P function
 * Laplace transform of %p[v1,v2,v3](w), Jacobi function
 * Laplace transform of Jacobi P function
 * Laplace transform of Associated Legendre function of the second kind
 * Laplace transform of Associated Legendre function of the second kind
 * Laplace transform of %p[v1](w), Legendre P function
 * Laplace transform of Legendre P function
 * Laplace transform of Whittaker W function
 * Laplace transform of Whittaker W function
 * Laplace transform of square of Bessel J function
 * Laplace transform of square of Hankel 1 function
 * Laplace transform of square of Hankel 2 function
 * Laplace transform of square of Bessel Y function
 * Laplace transform of square of Bessel K function
 * Laplace transform of two Bessel I functions
 * Laplace transform of Bessel I. We use I[v](w)=%i^n*J[n](%i*w).
 * Laplace transform of square of Bessel I function
 * Laplace transform of Erf function
 * Laplace transform of the logarithmic function.
 * Laplace transform of Erfc function
 * Laplace transform of expintegral_ei.
 * Laplace transform of expintegral_e1
 * Laplace transform of expintegral_e
 * Laplace transform of expintegral_si
 * Laplace transform of expintegral_shi
 * Laplace transform of expintegral_ci
 * Laplace transform of expintegral_chi
 * Laplace transform of Complete elliptic integral of the first kind
 * Laplace transform of Complete elliptic integral of the first kind
 * Laplace transform of Complete elliptic integral of the second kind
 * Laplace transform of Complete elliptic integral of the second kind
 * Laplace transform of %f[v1,v2](w1,w2,w3), Hypergeometric function
 * Laplace transform of Hypergeometric function
 * Laplace transform of c * t^v * (a+t)^w
 * Laplace transform of c * t^v
 */

/* Algorithm 2.1: Laplace transform of c*t^v*%e(-p*t)
 *
 * Table of Integral Transforms
 *
 * p. 137, formula 1:
 *
 * t^u*exp(-p*t)
 *   -> gamma(u+1)*p^(-u-1)
 */

/* Algorithm 2.2: Laplace transform of c*t^v*(1+t)^w
 */

/* Algorithm 2.3: Laplace transform of the Logarithmic function
 *
 *    c*t^(v-1)*log(a*t)
 *       -> c*gamma(v)*s^(-v)*(psi[0](v)-log(s/a))
 *
 * This is the formula for an expression with log(t) scaled like 1/a*F(s/a).
 *
 * For the following cases we have to add further algorithm:
 *    log(1+a*x), log(x+a), log(x)^2.
 */

/* Algorithm 2.4: Laplace transfom of the Whittaker function
 *
 * Test for Whittaker W function.  Simplify this if possible, or
 * convert to Whittaker M function.
 *
 * We have r * %w[i1,i2](a)
 *
 * Formula 16, p. 217
 *
 * t^(v-1)*%w[k,u](a*t)
 *   -> gamma(u+v+1/2)*gamma(v-u+1/2)*a^(u+1/2)/
 *          (gamma(v-k+1)*(p+a/2)^(u+v+1/2)
 *        *2f1(u+v+1/2,u-k+1/2;v-k+1;(p-a/2)/(p+a/2))
 */

/* Algorithm 2.5: Laplace transfom of bessel_k(0,a*t)
 *
 * The general algorithm handles the Bessel K function for an order |v|<1.
 * but does not include the special case v=0. Return the Laplace transform:
 *
 *   bessel_k(0,a*t) --> acosh(s/a)/sqrt(s^2-a^2)
 */

/* Algorithm 3: Laplace transform of a hypergeometric function
 * Table of Laplace transforms, p 220, formula 19:
 *
 * If m + k <= n + 1, and Re(s) > 0, the Laplace transform of
 *
 *    t^(s-1)*%f[m,n]([a1,...,am],[p1,...,pn],(c*t)^k)
 * is
 *
 *    gamma(s)/p^s*%f[m+k,n]([a1,...,am,s/k,(s+1)/k,...,(s+k-1)/k],[p1,...,pm],(k*c/p)^k)
 *
 * with Re(p) > 0 if m + k <= n, Re(p+k*c*exp(2*%pi*%i*r/k)) > 0 for r
 * = 0, 1,...,k-1, if m + k = n + 1.
 */

/* Algorithm 4: SPECIAL HANDLING OF Bessel Y for an integer order
 *
 * This is called for one Bessel Y function, when the order is an integer.
 */

/* Algorithm 4.1: Laplace transform of t^n*bessel_y(v,a*t)
 *                v is an integer and n>=v
 *
 * Table of Integral Transforms
 *
 * Volume 2, p 105, formula 2 is a formula for the Y-transform of
 *
 *    f(x) = x^(u-3/2)*exp(-a*x)
 *
 * where the Y-transform is defined by
 *
 *    integrate(f(x)*bessel_y(v,x*y)*sqrt(x*y), x, 0, inf)
 *
 * which is
 *
 *    -2/%pi*gamma(u+v)*sqrt(y)*(y^2+a^2)^(-u/2)
 *          *assoc_legendre_q(u-1,-v,a/sqrt(y^2+a^2))
 *
 * with a > 0, Re u > |Re v|.
 *
 * In particular, with a slight change of notation, we have
 *
 *    integrate(x^(u-1)*exp(-p*x)*bessel_y(v,a*x)*sqrt(a), x, 0, inf)
 *
 * which is the Laplace transform of x^(u-1/2)*bessel_y(v,x).
 *
 * Thus, the Laplace transform is
 *
 *    -2/%pi*gamma(u+v)*sqrt(a)*(a^2+p^2)^(-u/2)
 *          *assoc_legendre_q(u-1,-v,p/sqrt(a^2+p^2))
 */

/* Algorithm 4.2: Laplace transform of t^n*bessel_y(v, a*sqrt(t))
 *
 * Table of Integral Transforms
 *
 * p. 188, formula 50:
 *
 * t^(u-1/2)*bessel_y(2*v,2*sqrt(a)*sqrt(t))
 *    -> a^(-1/2)*p^(-u)*exp(-a/2/p)
 *       * [tan((u-v)*%pi)*gamma(u+v+1/2)/gamma(2*v+1)*M[u,v](a/p)
 *          -sec((u-v)*%pi)*W[u,v](a/p)]
 */

