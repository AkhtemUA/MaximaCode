@c English version: 2011-03-14
@c Esta es traduccion del original en frances;
@c Queda pendiente cotejar con la version inglesa.
@menu
* Funciones y variables para simetr@'{@dotless{i}}as::  
@end menu

@ifnottex
Paquete escrito para Macsyma-Symbolics por Annick Valibouze (@url{http://www-calfor.lip6.fr/~avb/}).
Los algoritmos est@'an descritos en los siguientes art@'{@dotless{i}}culos:
@end ifnottex
@iftex
Paquete escrito para Macsyma-Symbolics por Annick Valibouze@footnote{@url{www-calfor.lip6.fr/~avb}}.
Los algoritmos est@'an descritos en los siguientes art@'{@dotless{i}}culos:
@end iftex

@ifnottex
@enumerate
@item
Fonctions sym@'etriques et changements de bases. Annick Valibouze.
EUROCAL'87 (Leipzig, 1987), 323--332, Lecture Notes in Comput. Sci 378.
Springer, Berlin, 1989.@*
@url{http://www.stix.polytechnique.fr/publications/1984-1994.html}

@item R@'esolvantes et fonctions sym@'etriques. Annick Valibouze.
Proceedings of the ACM-SIGSAM 1989 International Symposium on Symbolic
and Algebraic Computation, ISSAC'89 (Portland, Oregon).
ACM Press, 390-399, 1989.@*
@url{http://www-calfor.lip6.fr/~avb/DonneesTelechargeables/MesArticles/issac89ACMValibouze.pdf}

@item Symbolic computation with symmetric polynomials, an extension to Macsyma.
Annick Valibouze. Computers and Mathematics (MIT, USA, June 13-17, 1989),
Springer-Verlag, New York Berlin, 308-320, 1989.@*
@url{http://www.stix.polytechnique.fr/publications/1984-1994.html}

@item Th@'eorie de Galois Constructive. Annick Valibouze. M@'emoire d'habilitation
@`a diriger les recherches (HDR), Universit@'e P. et M. Curie (Paris VI), 1994
@end enumerate
@end ifnottex


@iftex
@enumerate
@item
Fonctions sym@'etriques et changements de bases
@footnote{@url{www.stix.polytechnique.fr/publications/1984-1994.html}}. Annick Valibouze.
EUROCAL'87 (Leipzig, 1987), 323--332, Lecture Notes in Comput. Sci 378.
Springer, Berlin, 1989.

@item R@'esolvantes et fonctions sym@'etriques
@footnote{@url{www-calfor.lip6.fr/~avb/DonneesTelechargeables/MesArticles/issac89ACMValibouze.pdf}}.
Annick Valibouze.
Proceedings of the ACM-SIGSAM 1989 International Symposium on Symbolic
and Algebraic Computation, ISSAC'89 (Portland, Oregon).
ACM Press, 390-399, 1989.

@item Symbolic computation with symmetric polynomials, an extension to Macsyma
@footnote{@url{www.stix.polytechnique.fr/publications/1984-1994.html}}.
Annick Valibouze. Computers and Mathematics (MIT, USA, June 13-17, 1989),
Springer-Verlag, New York Berlin, 308-320, 1989.

@item Th@'eorie de Galois Constructive. Annick Valibouze. M@'emoire d'habilitation
@`a diriger les recherches (HDR), Universit@'e P. et M. Curie (Paris VI), 1994
@end enumerate
@end iftex




@node Funciones y variables para simetr@'{@dotless{i}}as,  , Simetr@'{@dotless{i}}as, Simetr@'{@dotless{i}}as
@section Funciones y variables para simetr@'{@dotless{i}}as

@deffn {Funci@'on} comp2pui (@mvar{n}, @mvar{l})
Realiza el paso de las funciones sim@'etricas completas
de la lista @mvar{l} a las funciones sim@'etricas elementales
de 0 a @mvar{n}. En caso de que la lista @mvar{l}
contenga menos de @code{@mvar{n}+1} elementos,
se completar@'a con valores formales. 
El primer elemento de la lista @mvar{l} almacena
el cardinal del alfabeto, en caso de que exista;
en caso contrario se le da el valor @mvar{n}.

@c GENERATED FROM THE FOLLOWING
@c comp2pui (3, [4, g]);
@example
@group
(%i1) comp2pui (3, [4, g]);
                        2                    2
(%o1)    [4, g, 2 h2 - g , 3 h3 - g h2 + g (g  - 2 h2)]
@end group
@end example


@end deffn

@deffn {Funci@'on} cont2part (@mvar{pc}, @mvar{lvar})
Convierte el polinomio particionado asociado a la
forma contra@'{@dotless{i}}da @mvar{pc}, cuyas variables
se encuentran en @mvar{lvar}.

@c GENERATED FROM THE FOLLOWING
@c pc: 2*a^3*b*x^4*y + x^5;
@c cont2part (pc, [x, y]);
@example
(%i1) pc: 2*a^3*b*x^4*y + x^5;
                           3    4      5
(%o1)                   2 a  b x  y + x
(%i2) cont2part (pc, [x, y]);
                                   3
(%o2)              [[1, 5, 0], [2 a  b, 4, 1]]
@end example

Otras funciones para efectuar cambios de representaci@'on son:
@code{contract}, @code{explose}, @code{part2cont}, @code{partpol}, @code{tcontract} y @code{tpartpol}.

@end deffn

@deffn {Funci@'on} contract (@mvar{psym}, @mvar{lvar})
Convierte una forma contra@'{@dotless{i}}da (como un
monomio por @'orbita sobre la acci@'on del grupo sim@'etrico)
del polinomio @mvar{psym} cuyas variables se encuentran en la
lista @mvar{lvar}. La funci@'on @code{explose} realiza la operaci@'on 
inversa. A mayopes, la funci@'on @code{tcontract} comprueba la 
simetr@'{@dotless{i}}a del polinomio.

@c GENERATED FROM THE FOLLOWING
@c psym: explose (2*a^3*b*x^4*y, [x, y, z]);
@c contract (psym, [x, y, z]);
@example
(%i1) psym: explose (2*a^3*b*x^4*y, [x, y, z]);
         3      4      3      4      3    4        3    4
(%o1) 2 a  b y z  + 2 a  b x z  + 2 a  b y  z + 2 a  b x  z

                                           3      4      3    4
                                      + 2 a  b x y  + 2 a  b x  y
(%i2) contract (psym, [x, y, z]);
                              3    4
(%o2)                      2 a  b x  y
@end example

Otras funciones para efectuar cambios de representaci@'on son:

@code{cont2part}, @code{explose}, @code{part2cont}, @code{partpol}, @code{tcontract}, @code{tpartpol}.


@end deffn

@deffn {Funci@'on} direct ([@mvar{p_1}, ..., @mvar{p_n}], @mvar{y}, @mvar{f}, [@mvar{lvar_1}, ..., @mvar{lvar_n}])
Calcula la imagen directa 
(v@'ease M. Giusti, D. Lazard et A. Valibouze, ISSAC 1988, Roma)
asociada a la funci@'on @mvar{f}, en las listas de variables
@mvar{lvar_1}, ..., @mvar{lvar_n}, y en los polinomios 
@mvar{p_1}, ..., @mvar{p_n} de una variable @mvar{y}. Si la expresi@'on de
@mvar{f} no depende de variable alguna, no s@'olo es in@'util
aportar esa variable, sino que tambi@'en disminuyen considerablemente los
c@'alculos cuando la variable no se declara.

@c GENERATED FROM THE FOLLOWING
@c direct ([z^2  - e1* z + e2, z^2  - f1* z + f2],
@c               z, b*v + a*u, [[u, v], [a, b]]);
@c ratsimp (%);
@c ratsimp (direct ([z^3-e1*z^2+e2*z-e3,z^2  - f1* z + f2],
@c               z, b*v + a*u, [[u, v], [a, b]]));
@example
(%i1) direct ([z^2  - e1* z + e2, z^2  - f1* z + f2],
              z, b*v + a*u, [[u, v], [a, b]]);
       2
(%o1) y  - e1 f1 y

                                 2            2             2   2
                  - 4 e2 f2 - (e1  - 2 e2) (f1  - 2 f2) + e1  f1
                + -----------------------------------------------
                                         2
(%i2) ratsimp (%);
              2                2                   2
(%o2)        y  - e1 f1 y + (e1  - 4 e2) f2 + e2 f1
(%i3) ratsimp (direct ([z^3-e1*z^2+e2*z-e3,z^2  - f1* z + f2],
              z, b*v + a*u, [[u, v], [a, b]]));
       6            5         2                        2    2   4
(%o3) y  - 2 e1 f1 y  + ((2 e1  - 6 e2) f2 + (2 e2 + e1 ) f1 ) y

                          3                               3   3
 + ((9 e3 + 5 e1 e2 - 2 e1 ) f1 f2 + (- 2 e3 - 2 e1 e2) f1 ) y

         2       2        4    2
 + ((9 e2  - 6 e1  e2 + e1 ) f2

                    2       2       2                   2    4
 + (- 9 e1 e3 - 6 e2  + 3 e1  e2) f1  f2 + (2 e1 e3 + e2 ) f1 )

  2          2                      2     3          2
 y  + (((9 e1  - 27 e2) e3 + 3 e1 e2  - e1  e2) f1 f2

                 2            2    3                5
 + ((15 e2 - 2 e1 ) e3 - e1 e2 ) f1  f2 - 2 e2 e3 f1 ) y

           2                   3           3     2   2    3
 + (- 27 e3  + (18 e1 e2 - 4 e1 ) e3 - 4 e2  + e1  e2 ) f2

         2      3                   3    2   2
 + (27 e3  + (e1  - 9 e1 e2) e3 + e2 ) f1  f2

                   2    4        2   6
 + (e1 e2 e3 - 9 e3 ) f1  f2 + e3  f1
@end example

B@'usqueda del polinomio cuyas ra@'{@dotless{i}}ces son la suma
@math{a+u} o @math{a} es la ra@'{@dotless{i}}z de 
@math{z^2  - e1* z + e2} y @math{u} es la ra@'{@dotless{i}}z de
@math{z^2  - f1* z + f2}

@c GENERATED FROM THE FOLLOWING
@c ratsimp (direct ([z^2  - e1* z + e2, z^2  - f1* z + f2],
@c                           z, a + u, [[u], [a]]));
@example
(%i1) ratsimp (direct ([z^2  - e1* z + e2, z^2  - f1* z + f2],
                          z, a + u, [[u], [a]]));
       4                    3             2
(%o1) y  + (- 2 f1 - 2 e1) y  + (2 f2 + f1  + 3 e1 f1 + 2 e2

     2   2                              2               2
 + e1 ) y  + ((- 2 f1 - 2 e1) f2 - e1 f1  + (- 2 e2 - e1 ) f1

                  2                     2            2
 - 2 e1 e2) y + f2  + (e1 f1 - 2 e2 + e1 ) f2 + e2 f1  + e1 e2 f1

     2
 + e2
@end example

La funci@'on @code{direct} acepta dos indicadores:
@code{elementaires} (elementales) y @code{puissances} (potenciales,
que es el valor por defecto) que permiten hacer la
descomposici@'on de los polinomios sim@'etricos que aparezcan en los 
c@'alculos en funciones sim@'etricas elementales o en funciones
potenciales, respectivamente.

Funciones de @code{sym} utilizadas en esta funci@'on:

@code{multi_orbit}(por tanto @code{orbit}),@code{pui_direct}, @code{multi_elem}
(por tanto @code{elem}), @code{multi_pui} (por tanto @code{pui}), @code{pui2ele}, @code{ele2pui}
(si al indicador @code{direct} se le asign@'o @code{puissances}).

@end deffn

@deffn {Funci@'on} ele2comp (@mvar{m}, @mvar{l})
Pasa las funciones sim@'etricas elementales a funciones
completas, de forma similar a @code{comp2ele} y @code{comp2pui}.

Otras funciones para cambio de bases son:

@code{comp2ele}, @code{comp2pui}, @code{ele2pui}, @code{elem}, @code{mon2schur}, @code{multi_elem},
@code{multi_pui}, @code{pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc} y @code{schur2comp}.

@end deffn

@deffn {Funci@'on} ele2polynome (@mvar{l}, @mvar{z})
Devuelve el polinomio en @mvar{z} en el que las
funciones sim@'etricas elementales de las ra@'{@dotless{i}}ces
son las de la lista @mvar{l}.
@code{@mvar{l} = [@mvar{n}, @mvar{e_1}, ..., @mvar{e_n}]}, donde @mvar{n}
es el grado del polinomio y @mvar{e_i} la @mvar{i}-@'esima funci@'on
sim@'etrica elemental.

@c GENERATED FROM THE FOLLOWING
@c ele2polynome ([2, e1, e2], z);
@c polynome2ele (x^7 - 14*x^5 + 56*x^3  - 56*x + 22, x);
@c ele2polynome ([7, 0, -14, 0, 56, 0, -56, -22], x);
@example
(%i1) ele2polynome ([2, e1, e2], z);
                          2
(%o1)                    z  - e1 z + e2
(%i2) polynome2ele (x^7 - 14*x^5 + 56*x^3  - 56*x + 22, x);
(%o2)          [7, 0, - 14, 0, 56, 0, - 56, - 22]
(%i3) ele2polynome ([7, 0, -14, 0, 56, 0, -56, -22], x);
                  7       5       3
(%o3)            x  - 14 x  + 56 x  - 56 x + 22
@end example

La funci@'on rec@'{@dotless{i}}proca es @code{polynome2ele (@mvar{P}, @mvar{z})}

V@'eanse tambi@'en @code{polynome2ele} y @code{pui2polynome}.

@end deffn

@deffn {Funci@'on} ele2pui (@mvar{m}, @mvar{l})
Pasa las funciones sim@'etricas elementales a funciones
completas, de forma similar a @code{comp2ele} y @code{comp2comp}.

Otras funciones para cambio de bases son:

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{elem}, @code{mon2schur}, @code{multi_elem},
@code{multi_pui}, @code{pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc} y @code{schur2comp}.

@end deffn

@deffn {Funci@'on} elem (@mvar{ele}, @mvar{sym}, @mvar{lvar})
Descompone el polinomio sim@'etrico @mvar{sym} con las variables
continuas de la lista @mvar{lvar} en las funciones sim@'etricas 
elementales contenidas en la lista @mvar{ele}. 
El primer elemento de la lista @mvar{ele} almacena
el cardinal del alfabeto, en caso de que exista;
en caso contrario se le da como valor el grado del polinomio @mvar{sym}.
Si faltan valores en la lista @mvar{ele}, @'esta se completar@'a con
valores formales del tipo "ei".
El polinomio @mvar{sym} puede especificarse de tres formas diferentes:
contra@'{@dotless{i}}do (en cuyo caso @code{elem} debe valer 1, que
es el valor por defecto), particionado (@code{elem} valdr@'a 3) o
extendido (por ejemplo, el polinomio completo) (en este caso, @code{elem}
valdr@'a 2). La utilizaci@'on de la funci@'on @code{pui} se hace
siguiendo este mismo modelo.

Con un alfabeto de cardinal 3 con @mvar{e1}, la primera funci@'on
sim@'etrica elemental valiendo 7, el polinomio sim@'etrico de
tres variables cuya forma contra@'{@dotless{i}}da (aqu@'{@dotless{i}}
dependiendo solamente de dos de sus variables) es @math{^4-2*x*y},
se descompone en funciones sim@'etricas elementales:

@c GENERATED FROM THE FOLLOWING
@c elem ([3, 7], x^4 - 2*x*y, [x, y]);
@c ratsimp (%);
@example
@group
(%i1) elem ([3, 7], x^4 - 2*x*y, [x, y]);
(%o1) 7 (e3 - 7 e2 + 7 (49 - e2)) + 21 e3

                                         + (- 2 (49 - e2) - 2) e2
@end group
@group
(%i2) ratsimp (%);
                              2
(%o2)             28 e3 + 2 e2  - 198 e2 + 2401
@end group
@end example



Otras funciones para cambio de bases son:
@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui},
@code{mon2schur}, @code{multi_elem}, @code{multi_pui},
@code{pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc} y @code{schur2comp}.


@end deffn

@deffn {Funci@'on} explose (@mvar{pc}, @mvar{lvar})
Devuelve el polinomio sim@'etrico asociado a la forma
contra@'{@dotless{i}}da @mvar{pc}. La lista @mvar{lvar}
contiene las variables.

@c GENERATED FROM THE FOLLOWING
@c explose (a*x + 1, [x, y, z]);
@example
(%i1) explose (a*x + 1, [x, y, z]);
(%o1)                  a z + a y + a x + 1
@end example

Otras funciones para efectuar cambios de representaci@'on son:
@code{contract}, @code{cont2part}, @code{part2cont}, @code{partpol}, @code{tcontract} y @code{tpartpol}.

@end deffn

@deffn {Funci@'on} kostka (@mvar{part_1}, @mvar{part_2})
Funci@'on escrita por P. Espert, calcula el n@'umero de Kostka
asociado a las particiones @mvar{part_1} y @mvar{part_2}.

@c GENERATED FROM THE FOLLOWING
@c kostka ([3, 3, 3], [2, 2, 2, 1, 1, 1]);
@example
(%i1) kostka ([3, 3, 3], [2, 2, 2, 1, 1, 1]);
(%o1)                           6
@end example

@end deffn

@deffn {Funci@'on} lgtreillis (@mvar{n}, @mvar{m})
Devuelve la lista de particiones de peso @mvar{n} y longitud @mvar{m}.

@c GENERATED FROM THE FOLLOWING
@c lgtreillis (4, 2);
@example
(%i1) lgtreillis (4, 2);
(%o1)                   [[3, 1], [2, 2]]
@end example

V@'eanse tambi@'en @code{ltreillis}, @code{treillis} y @code{treinat}.

@end deffn

@deffn {Funci@'on} ltreillis (@mvar{n}, @mvar{m})
Devuelve la lista de particiones de peso @mvar{n} y longitud 
menor o igual que @mvar{m}.

@c GENERATED FROM THE FOLLOWING
@c ltreillis (4, 2);
@example
(%i1) ltreillis (4, 2);
(%o1)               [[4, 0], [3, 1], [2, 2]]
@end example

V@'eanse tambi@'ent @code{lgtreillis}, @code{treillis} y @code{treinat}.

@end deffn

@c NOT REALLY HAPPY ABOUT MATH NOTATION HERE
@deffn {Funci@'on} mon2schur (@mvar{l})
La lista @mvar{l} representa la funci@'on de Schur S_@mvar{l}:
Se tiene @mvar{l} = [@mvar{i_1}, @mvar{i_2}, ..., @mvar{i_q}]
con @mvar{i_1} <= @mvar{i_2} <= ... <= @mvar{i_q}.
La funci@'on de Schur es S_[@mvar{i_1}, @mvar{i_2}, ..., @mvar{i_q}],
el menor de la matriz infinita (h_@{i-j@}) @mvar{i} >= 1, @mvar{j} >= 1
compuesto de las @mvar{q} primeras filas y columnas 
@mvar{i_1} + 1, @mvar{i_2} + 2, ..., @mvar{i_q} + @mvar{q}.

Se ha escrito esta funci@'on de Schur en funci@'on de las
formas monomiales utilizando las funciones @code{treinat} y @code{kostka}.
La forma devuelta es un polinomio sim@'etrico en una de sus representaciones
contra@'{@dotless{i}}das con las variables @mvar{x_1}, @mvar{x_2}, ...
 
@c GENERATED FROM THE FOLLOWING
@c mon2schur ([1, 1, 1]);
@c mon2schur ([3]);
@c mon2schur ([1, 2]);
@example
@group
(%i1) mon2schur ([1, 1, 1]);
(%o1)                       x1 x2 x3
@end group
@group
(%i2) mon2schur ([3]);
                                  2        3
(%o2)                x1 x2 x3 + x1  x2 + x1
@end group
@group
(%i3) mon2schur ([1, 2]);
                                      2
(%o3)                  2 x1 x2 x3 + x1  x2
@end group
@end example


Para 3 variables se tendr@'a:

@c UM, FROM WHAT ARGUMENTS WAS THE FOLLOWING GENERATED ??
@example
@group
   2 x1 x2 x3 + x1^2 x2 + x2^2 x1 + x1^2 x3 + x3^2 x1
    + x2^2 x3 + x3^2 x2
@end group
@end example

Otras funciones para cambio de bases son:

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem}, @code{multi_elem},
@code{multi_pui}, @code{pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc} y @code{schur2comp}.

@end deffn

@deffn {Funci@'on} multi_elem (@mvar{l_elem}, @mvar{multi_pc}, @mvar{l_var})
Descompone un polinomio multisim@'etrico sobre una forma
multicontra@'{@dotless{i}}da @mvar{multi_pc} en los grupos de
variables contenidas en la lista de listas  @mvar{l_var} sobre los
grupos de funciones sim@'etricas elementales contenidas en @mvar{l_elem}.

@c GENERATED FROM THE FOLLOWING
@c multi_elem ([[2, e1, e2], [2, f1, f2]], a*x + a^2 + x^3, [[x, y], [a, b]]);
@c ratsimp (%);
@example
@group
(%i1) multi_elem ([[2, e1, e2], [2, f1, f2]], a*x + a^2 + x^3,
      [[x, y], [a, b]]);
                                                  3
(%o1)         - 2 f2 + f1 (f1 + e1) - 3 e1 e2 + e1
@end group
@group
(%i2) ratsimp (%);
                         2                       3
(%o2)         - 2 f2 + f1  + e1 f1 - 3 e1 e2 + e1
@end group
@end example


Otras funciones para cambio de bases son:

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem},
@code{mon2schur}, @code{multi_pui}, @code{pui}, @code{pui2comp}, @code{pui2ele},
@code{puireduc} y @code{schur2comp}.

@end deffn

@deffn {Funci@'on} multi_orbit (@mvar{P}, [@mvar{lvar_1}, @mvar{lvar_2}, ..., @mvar{lvar_p}])
@mvar{P} es un polinomio en el conjunto de variables contenidas 
en las listas @mvar{lvar_1}, @mvar{lvar_2}, ..., @mvar{lvar_p}.
Esta funci@'on restablece la @'orbita del polinomio @mvar{P} sobre la
acci@'on del producto de los grupos sim@'etricos de los conjuntos de
variables representadas por esas @mvar{p} listas.

@c GENERATED FROM THE FOLLOWING
@c multi_orbit (a*x + b*y, [[x, y], [a, b]]);
@c multi_orbit (x + y + 2*a, [[x, y], [a, b, c]]);
@example
@group
(%i1) multi_orbit (a*x + b*y, [[x, y], [a, b]]);
(%o1)                [b y + a x, a y + b x]
@end group
@group
(%i2) multi_orbit (x + y + 2*a, [[x, y], [a, b, c]]);
(%o2)        [y + x + 2 c, y + x + 2 b, y + x + 2 a]
@end group
@end example


V@'ease tambi@'en @code{orbit} para la acci@'on de un solo grupo sim@'erico.

@end deffn

@c WHAT ARE THE ARGUMENTS FOR THIS FUNCTION ??
@deffn {Funci@'on} multi_pui
Es a la funci@'on @code{pui} lo que la funci@'on @code{multi_elem} es
a la funci@'on @code{elem}.

@c GENERATED FROM THE FOLLOWING
@c multi_pui ([[2, p1, p2], [2, t1, t2]], a*x + a^2 + x^3, [[x, y], [a, b]]);
@example
@group
(%i1) multi_pui ([[2, p1, p2], [2, t1, t2]], a*x + a^2 + x^3,
      [[x, y], [a, b]]);
                                            3
                                3 p1 p2   p1
(%o1)              t2 + p1 t1 + ------- - ---
                                   2       2
@end group
@end example


@end deffn

@deffn {Funci@'on} multinomial (@mvar{r}, @mvar{part})
El argumento @mvar{r} es el peso de la partici@'on @mvar{part}.
Esta funci@'on calcula el coeficiente multinomial asociado: si
las partes de las particiones @mvar{part} son 
@mvar{i_1}, @mvar{i_2}, ..., @mvar{i_k}, el resultado de @code{multinomial}
es @code{@mvar{r}!/(@mvar{i_1}! @mvar{i_2}! ... @mvar{i_k}!)}.

@end deffn

@deffn {Funci@'on} multsym (@mvar{ppart_1}, @mvar{ppart_2}, @mvar{n})
Calcula el producto de dos polinomios sim@'etricos de @mvar{n} variables
operando solamente con el m@'odulo de la acci@'on del grupo
sim@'etrico de orden @mvar{n}. Los polinomios est@'an en su 
representaci@'on particionada.

Sean los dos polinomios sim@'etricos en @code{x} e @code{y}:
@code{3*(x + y) + 2*x*y} y @code{5*(x^2 + y^2)}
cuyas formas particionadas son @code{[[3, 1], [2, 1, 1]]} y @code{[[5, 2]]},
respectivamente; el producto de ambos ser@'a:

@c GENERATED FROM THE FOLLOWING
@c multsym ([[3, 1], [2, 1, 1]], [[5, 2]], 2);
@example
@group
(%i1) multsym ([[3, 1], [2, 1, 1]], [[5, 2]], 2);
(%o1)         [[10, 3, 1], [15, 3, 0], [15, 2, 1]]
@end group
@end example


o sea, @code{10*(x^3*y + y^3*x) + 15*(x^2*y + y^2*x) + 15*(x^3 + y^3)}.

Funciones de cambio de representaci@'on de un polinomio sim@'etrico:

@code{contract}, @code{cont2part}, @code{explose}, @code{part2cont},
@code{partpol}, @code{tcontract} y @code{tpartpol}.

@end deffn

@deffn {Funci@'on} orbit (@mvar{P}, @mvar{lvar})
Calcula la @'orbita de un polinomio @mvar{P} en las variables de 
la lista @mvar{lvar} bajo la acci@'on del grupo sim@'etrico del
conjunto de variables contenidas en la lista @mvar{lvar}.
 
@c GENERATED FROM THE FOLLOWING
@c orbit (a*x + b*y, [x, y]);
@c orbit (2*x + x^2, [x, y]);
@example
@group
(%i1) orbit (a*x + b*y, [x, y]);
(%o1)                [a y + b x, b y + a x]
@end group
@group
(%i2) orbit (2*x + x^2, [x, y]);
                        2         2
(%o2)                 [y  + 2 y, x  + 2 x]
@end group
@end example

V@'ease tambi@'en @code{multi_orbit} para la acci@'on de un producto
de grupos sim@'etricos sobre un polinomio.

@end deffn

@deffn {Funci@'on} part2cont (@mvar{ppart}, @mvar{lvar})
Transforma un polinomio sim@'etrico de su forma particionada a
su forma contra@'{@dotless{i}}da. La forma contra@'{@dotless{i}}da
se devuelve con las variables contenidas en @mvar{lvar}.

@c GENERATED FROM THE FOLLOWING
@c part2cont ([[2*a^3*b, 4, 1]], [x, y]);
@example
@group
(%i1) part2cont ([[2*a^3*b, 4, 1]], [x, y]);
                              3    4
(%o1)                      2 a  b x  y
@end group
@end example


Otras funciones para efectuar cambios de representaci@'on son:

@code{contract}, @code{cont2part}, @code{explose}, @code{partpol}, @code{tcontract} y @code{tpartpol}.

@end deffn

@deffn {Funci@'on} partpol (@mvar{psym}, @mvar{lvar})
Restablece la representaci@'on particionada del polinomio
sim@'etrico @mvar{psym} de variables en @mvar{lvar}.

@c GENERATED FROM THE FOLLOWING
@c partpol (-a*(x + y) + 3*x*y, [x, y]);
@example
@group
(%i1) partpol (-a*(x + y) + 3*x*y, [x, y]);
(%o1)               [[3, 1, 1], [- a, 1, 0]]
@end group
@end example


Otras funciones para efectuar cambios de representaci@'on son:

@code{contract}, @code{cont2part}, @code{explose}, @code{part2cont}, @code{tcontract} y @code{tpartpol}.

@end deffn

@deffn {Funci@'on} permut (@mvar{l})
Devuelve la lista de permutaciones de la lista @mvar{l}.
@end deffn

@deffn {Funci@'on} polynome2ele (@mvar{P}, @mvar{x})
Devuelve la lista @code{@mvar{l} = [@mvar{n}, @mvar{e_1}, ..., @mvar{e_n}]},
en la que @mvar{n} es el grado del polinomio @mvar{P} de variable @mvar{x}
y @mvar{e_i} es la @mvar{i}-@'esima funci@'on sim@'etrica elemental de las
ra@'{@dotless{i}}ces de @mvar{P}.

@c GENERATED FROM THE FOLLOWING
@c polynome2ele (x^7 - 14*x^5 + 56*x^3 - 56*x + 22, x);
@c ele2polynome ([7, 0, -14, 0, 56, 0, -56, -22], x);
@example
@group
(%i1) polynome2ele (x^7 - 14*x^5 + 56*x^3 - 56*x + 22, x);
(%o1)          [7, 0, - 14, 0, 56, 0, - 56, - 22]
@end group
@group
(%i2) ele2polynome ([7, 0, -14, 0, 56, 0, -56, -22], x);
                  7       5       3
(%o2)            x  - 14 x  + 56 x  - 56 x + 22
@end group
@end example


La funci@'on rec@'{@dotless{i}}proca es @code{ele2polynome (@mvar{l}, @mvar{x})}.

@end deffn

@deffn {Funci@'on} prodrac (@mvar{l}, @mvar{k})
Siendo @mvar{l} una lista que contiene las funciones sim@'etricas
elementales sobre un conjunto @mvar{A}, la funci@'on @code{prodrac}
calcula el polinomio cuyas ra@'{@dotless{i}}ces son los productos 
@mvar{k} a @mvar{k} de los elementos de @mvar{A}.
@end deffn

@c HMM, pui IS A VARIABLE AS WELL
@deffn {Funci@'on} pui (@mvar{l}, @mvar{sym}, @mvar{lvar})
Descompone el polinomio sim@'etrico @mvar{sym}, cuyas variables
son las contenidas en @mvar{lvar}, en las funciones potenciales
contenidas en la lista @mvar{l}.
El primer elemento de la lista @mvar{l} almacena
el cardinal del alfabeto, en caso de que exista;
en caso contrario se le da el grado del polinomio @mvar{sym}.
Si faltan los valores de la lista @mvar{l}, en su lugar ser@'an
colocados valores formales del tipo "pi". 
El polinomio @mvar{sym} puede especificarse de tres formas diferentes:
contra@'{@dotless{i}}do (en cuyo caso @code{pui} debe valer 1, que
es el valor por defecto), particionado (@code{pui} valdr@'a 3) o
extendido (por ejemplo, el polinomio completo) (en este caso, @code{pui}
valdr@'a 2). La utilizaci@'on de la funci@'on @code{elem} se hace
siguiendo este mismo modelo.

@c GENERATED FROM THE FOLLOWING
@c pui;
@c pui ([3, a, b], u*x*y*z, [x, y, z]);
@c ratsimp (%);
@example
@group
(%i1) pui;
(%o1)                           1
@end group
@group
(%i2) pui ([3, a, b], u*x*y*z, [x, y, z]);
                       2
                   a (a  - b) u   (a b - p3) u
(%o2)              ------------ - ------------
                        6              3
@end group
@group
(%i3) ratsimp (%);
                                       3
                      (2 p3 - 3 a b + a ) u
(%o3)                 ---------------------
                                6
@end group
@end example


Otras funciones para cambio de bases son:
@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem}, @code{mon2schur},
@code{multi_elem}, @code{multi_pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc} y
@code{schur2comp}.

@end deffn

@deffn {Funci@'on} pui2comp (@mvar{n}, @mvar{lpui})
Devuelve la lista de las @mvar{n} primeras funciones completas
(con el cardinal en primer lugar) en funci@'on de las funciones
potenciales dadas en la lista @mvar{lpui}. Si la lista @mvar{lpui}
estuviese vac@'{@dotless{i}}a, el cardinal ser@'{@dotless{i}}a @mvar{N};
si no estuviese vac@'{@dotless{i}}a, se tomar@'{@dotless{i}}a como
cardinal su primer elemento, de forma similar a como se procede en
@code{comp2ele} y en @code{comp2pui}.

@c GENERATED FROM THE FOLLOWING
@c pui2comp (2, []);
@c pui2comp (3, [2, a1]);
@c ratsimp (%);
@example
@group
(%i1) pui2comp (2, []);
                                       2
                                p2 + p1
(%o1)                   [2, p1, --------]
                                   2
@end group
@group
(%i2) pui2comp (3, [2, a1]);
                                            2
                                 a1 (p2 + a1 )
                         2  p3 + ------------- + a1 p2
                  p2 + a1              2
(%o2)     [2, a1, --------, --------------------------]
                     2                  3
@end group
@group
(%i3) ratsimp (%);
                            2                     3
                     p2 + a1   2 p3 + 3 a1 p2 + a1
(%o3)        [2, a1, --------, --------------------]
                        2               6
@end group
@end example


Otras funciones para cambio de bases son:
@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem},
@code{mon2schur}, @code{multi_elem}, @code{multi_pui}, @code{pui}, @code{pui2ele},
@code{puireduc} y @code{schur2comp}.

@end deffn

@deffn {Funci@'on} pui2ele (@mvar{n}, @mvar{lpui})
Transforma las funciones potenciales a funciones sim@'etricas
elementales. Si la variable global @code{pui2ele} vale @code{girard},
se recupera la lista de funciones sim@'etricas elementales de 1 @mvar{n},
y si es igual a @code{close}, se recupera la @mvar{n}-@'esima 
funci@'on sim@'etrica elemental.

Otras funciones para cambio de bases son:
@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem},
@code{mon2schur}, @code{multi_elem}, @code{multi_pui}, @code{pui}, @code{pui2comp},
@code{puireduc} y @code{schur2comp}.

@end deffn

@deffn {Funci@'on} pui2polynome (@mvar{x}, @mvar{lpui})
Calcula el polinomio en @mvar{x} cuyas ra@'{@dotless{i}}ces tienen
como funciones potenciales las dadas en la lista @mvar{lpui}.

@c GENERATED FROM THE FOLLOWING
@c polynome2ele (x^3 - 4*x^2 + 5*x - 1, x);
@c ele2pui (3, %);
@c pui2polynome (x, %);
@example
@group
(%i1) pui;
(%o1)                           1
@end group
@group
(%i2) kill(labels);
(%o0)                         done
@end group
@group
(%i1) polynome2ele (x^3 - 4*x^2 + 5*x - 1, x);
(%o1)                     [3, 4, 5, 1]
@end group
@group
(%i2) ele2pui (3, %);
(%o2)                     [3, 4, 6, 7]
@end group
@group
(%i3) pui2polynome (x, %);
                        3      2
(%o3)                  x  - 4 x  + 5 x - 1
@end group
@end example

V@'eanse tambi@'en @code{polynome2ele} y @code{ele2polynome}.

@end deffn

@deffn {Funci@'on} pui_direct (@mvar{orbite}, [@mvar{lvar_1}, ..., @mvar{lvar_n}], [@mvar{d_1}, @mvar{d_2}, ..., @mvar{d_n}])
Sea @mvar{f} un polinomio en @mvar{n} bloques de variables @mvar{lvar_1}, ..., @mvar{lvar_n}.
Sea @mvar{c_i} el n@'umero de variables en @mvar{lvar_i} y @mvar{SC} el
producto de los @mvar{n} grupos sim@'etricos de grados @mvar{c_1}, ..., @mvar{c_n},
que act@'uan sobre @mvar{f}.
La lista @mvar{orbite} es la @'orbita, representada por @code{@mvar{SC}(@mvar{f})},
de la funci@'on @mvar{f} sobre la acci@'on de @mvar{SC}, la cual puede ser
obtenida por medio de la funci@'on @code{multi_orbit}.
Los valores @code{d_i} son enteros tales que 
@mvar{c_1} <= @mvar{d_1}, @mvar{c_2} <= @mvar{d_2}, ..., @mvar{c_n} <= @mvar{d_n}.
Por @'ultimo, sea @mvar{SD} el producto de los grupos sim@'etricos
@mvar{S_d1} x @mvar{S_d2} x ... x @mvar{S_dn}.

La funci@'on @code{pui_direct} devuelve las @mvar{n} primeras
funciones potenciales de @code{@mvar{SD}(@mvar{f})} deducidas de 
las funciones potenciales de @code{@mvar{SC}(@mvar{f})}, siendo 
@mvar{n} el cardinal de @code{@mvar{SD}(@mvar{f})}.

El resultado se devuelve en la forma multicontra@'{@dotless{i}}da
respecto de @mvar{SD}.

@c GENERATED FROM THE FOLLOWING
@c l: [[x, y], [a, b]];
@c pui_direct (multi_orbit (a*x + b*y, l), l, [2, 2]);
@c pui_direct (multi_orbit (a*x + b*y, l), l, [3, 2]);
@c pui_direct ([y + x + 2*c, y + x + 2*b, y + x + 2*a], [[x, y], [a, b, c]], [2, 3]);
@example
@group
(%i1) l: [[x, y], [a, b]];
(%o1)                   [[x, y], [a, b]]
@end group
@group
(%i2) pui_direct (multi_orbit (a*x + b*y, l), l, [2, 2]);
                                       2  2
(%o2)               [a x, 4 a b x y + a  x ]
@end group
@group
(%i3) pui_direct (multi_orbit (a*x + b*y, l), l, [3, 2]);
                             2  2     2    2        3  3
(%o3) [2 a x, 4 a b x y + 2 a  x , 3 a  b x  y + 2 a  x , 

    2  2  2  2      3    3        4  4
12 a  b  x  y  + 4 a  b x  y + 2 a  x , 

    3  2  3  2      4    4        5  5
10 a  b  x  y  + 5 a  b x  y + 2 a  x , 

    3  3  3  3       4  2  4  2      5    5        6  6
40 a  b  x  y  + 15 a  b  x  y  + 6 a  b x  y + 2 a  x ]
@end group
@group
(%i4) pui_direct ([y + x + 2*c, y + x + 2*b, y + x + 2*a],
      [[x, y], [a, b, c]], [2, 3]);
                             2              2
(%o4) [3 x + 2 a, 6 x y + 3 x  + 4 a x + 4 a , 

                 2                   3        2       2        3
              9 x  y + 12 a x y + 3 x  + 6 a x  + 12 a  x + 8 a ]
@end group
@end example

@c THIS NEXT FUNCTION CALL TAKES A VERY LONG TIME (SEVERAL MINUTES)
@c SO LEAVE IT OUT TIL PROCESSORS GET A LITTLE FASTER ...
@c pui_direct ([y + x + 2*c, y + x + 2*b, y + x + 2*a], [[x, y], [a, b, c]], [3, 4]);

@end deffn

@deffn {Funci@'on} puireduc (@mvar{n}, @mvar{lpui})
Siendo @mvar{lpui} una lista en la que el primer elemento es
un entero @mvar{m}, @code{puireduc} devuelve las @mvar{n} primeras 
funciones potenciales en funci@'on de las @mvar{m} primeras.

@c GENERATED FROM THE FOLLOWING
@c puireduc (3, [2]);
@example
@group
(%i1) puireduc (3, [2]);
                                         2
                                   p1 (p1  - p2)
(%o1)          [2, p1, p2, p1 p2 - -------------]
                                         2
@end group
@group
(%i2) ratsimp (%);
                                           3
                               3 p1 p2 - p1
(%o2)              [2, p1, p2, -------------]
                                     2
@end group
@end example


@end deffn

@deffn {Funci@'on} resolvante (@mvar{P}, @mvar{x}, @mvar{f}, [@mvar{x_1}, ..., @mvar{x_d}])
Calcula la resolvente del polinomio @mvar{P} de variable @mvar{x} y
grado @mvar{n} >= @mvar{d} por la funci@'on @mvar{f} de variables
@mvar{x_1}, ..., @mvar{x_d}. 
Para mejorar los c@'alculos, es importante no incluir en la lista
@code{[@mvar{x_1}, ..., @mvar{x_d}]} las variables que no intervienen
en la funci@'on de transformaci@'on @mvar{f}.

Con el fin de hacer m@'as eficaces los c@'alculos, se puede asignar a
@code{resolvante} un indicador que permita seleccionar el algoritmo
m@'as apropiado:

@c AQUI QUEDAN ALGUNAS LINEAS POR TRADUCIR (MARIO)

@itemize @bullet
@item
  @code{unitaire},
@item
  @code{lineaire},
@item
  @code{alternee},
@item
  @code{somme},
@item
  @code{produit},
@item
  @code{cayley},
@item
  @code{generale}.
@end itemize

@c GENERATED FROM THE FOLLOWING
@c resolvante: unitaire$
@c resolvante (x^7 - 14*x^5 + 56*x^3 - 56*x + 22, x, x^3 - 1, [x]);
@c resolvante: lineaire$
@c resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3]);
@c resolvante: general$
@c resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3]);
@c resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3, x4]);
@c direct ([x^4 - 1], x, x1 + 2*x2 + 3*x3, [[x1, x2, x3]]);
@c resolvante :lineaire$
@c resolvante (x^4 - 1, x, x1 + x2 + x3, [x1, x2, x3]);
@c resolvante: symetrique$
@c resolvante (x^4 - 1, x, x1 + x2 + x3, [x1, x2, x3]);
@c resolvante (x^4 + x + 1, x, x1 - x2, [x1, x2]);
@c resolvante: alternee$
@c resolvante (x^4 + x + 1, x, x1 - x2, [x1, x2]);
@c resolvante: produit$
@c resolvante (x^7 - 7*x + 3, x, x1*x2*x3, [x1, x2, x3]);
@c resolvante: symetrique$
@c resolvante (x^7 - 7*x + 3, x, x1*x2*x3, [x1, x2, x3]);
@c resolvante: cayley$
@c resolvante (x^5 - 4*x^2 + x + 1, x, a, []);
@example
(%i1) resolvante: unitaire$
@group
(%i2) resolvante (x^7 - 14*x^5 + 56*x^3 - 56*x + 22, x, x^3 - 1,
      [x]);

" resolvante unitaire " [7, 0, 28, 0, 168, 0, 1120, - 154, 7840,
                         - 2772, 56448, - 33880, 

413952, - 352352, 3076668, - 3363360, 23114112, - 30494464, 

175230832, - 267412992, 1338886528, - 2292126760] 
  3       6      3       9      6      3
[x  - 1, x  - 2 x  + 1, x  - 3 x  + 3 x  - 1, 

 12      9      6      3       15      12       9       6      3
x   - 4 x  + 6 x  - 4 x  + 1, x   - 5 x   + 10 x  - 10 x  + 5 x

       18      15       12       9       6      3
 - 1, x   - 6 x   + 15 x   - 20 x  + 15 x  - 6 x  + 1, 

 21      18       15       12       9       6      3
x   - 7 x   + 21 x   - 35 x   + 35 x  - 21 x  + 7 x  - 1] 
[- 7, 1127, - 6139, 431767, - 5472047, 201692519, - 3603982011] 
       7      6        5         4          3           2
(%o2) y  + 7 y  - 539 y  - 1841 y  + 51443 y  + 315133 y

                                              + 376999 y + 125253
@end group
(%i3) resolvante: lineaire$
@group
(%i4) resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3]);

" resolvante lineaire " 
       24       20         16            12             8
(%o4) y   + 80 y   + 7520 y   + 1107200 y   + 49475840 y

                                                    4
                                       + 344489984 y  + 655360000
@end group
(%i5) resolvante: general$
@group
(%i6) resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3]);

" resolvante generale " 
       24       20         16            12             8
(%o6) y   + 80 y   + 7520 y   + 1107200 y   + 49475840 y

                                                    4
                                       + 344489984 y  + 655360000
@end group
@group
(%i7) resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3, x4]);

" resolvante generale " 
       24       20         16            12             8
(%o7) y   + 80 y   + 7520 y   + 1107200 y   + 49475840 y

                                                    4
                                       + 344489984 y  + 655360000
@end group
@group
(%i8) direct ([x^4 - 1], x, x1 + 2*x2 + 3*x3, [[x1, x2, x3]]);
       24       20         16            12             8
(%o8) y   + 80 y   + 7520 y   + 1107200 y   + 49475840 y

                                                    4
                                       + 344489984 y  + 655360000
@end group
(%i9) resolvante :lineaire$
@group
(%i10) resolvante (x^4 - 1, x, x1 + x2 + x3, [x1, x2, x3]);

" resolvante lineaire " 
                              4
(%o10)                       y  - 1
@end group
(%i11) resolvante: symetrique$
@group
(%i12) resolvante (x^4 - 1, x, x1 + x2 + x3, [x1, x2, x3]);

" resolvante symetrique " 
                              4
(%o12)                       y  - 1
@end group
@group
(%i13) resolvante (x^4 + x + 1, x, x1 - x2, [x1, x2]);

" resolvante symetrique " 
                           6      2
(%o13)                    y  - 4 y  - 1
@end group
(%i14) resolvante: alternee$
@group
(%i15) resolvante (x^4 + x + 1, x, x1 - x2, [x1, x2]);

" resolvante alternee " 
            12      8       6        4        2
(%o15)     y   + 8 y  + 26 y  - 112 y  + 216 y  + 229
@end group
(%i16) resolvante: produit$
@group
(%i17) resolvante (x^7 - 7*x + 3, x, x1*x2*x3, [x1, x2, x3]);

" resolvante produit "
        35      33         29        28         27        26
(%o17) y   - 7 y   - 1029 y   + 135 y   + 7203 y   - 756 y

         24           23          22            21           20
 + 1323 y   + 352947 y   - 46305 y   - 2463339 y   + 324135 y

          19           18             17              15
 - 30618 y   - 453789 y   - 40246444 y   + 282225202 y

             14              12             11            10
 - 44274492 y   + 155098503 y   + 12252303 y   + 2893401 y

              9            8            7             6
 - 171532242 y  + 6751269 y  + 2657205 y  - 94517766 y

            5             3
 - 3720087 y  + 26040609 y  + 14348907
@end group
(%i18) resolvante: symetrique$
@group
(%i19) resolvante (x^7 - 7*x + 3, x, x1*x2*x3, [x1, x2, x3]);

" resolvante symetrique " 
        35      33         29        28         27        26
(%o19) y   - 7 y   - 1029 y   + 135 y   + 7203 y   - 756 y

         24           23          22            21           20
 + 1323 y   + 352947 y   - 46305 y   - 2463339 y   + 324135 y

          19           18             17              15
 - 30618 y   - 453789 y   - 40246444 y   + 282225202 y

             14              12             11            10
 - 44274492 y   + 155098503 y   + 12252303 y   + 2893401 y

              9            8            7             6
 - 171532242 y  + 6751269 y  + 2657205 y  - 94517766 y

            5             3
 - 3720087 y  + 26040609 y  + 14348907
@end group
(%i20) resolvante: cayley$
@group
(%i21) resolvante (x^5 - 4*x^2 + x + 1, x, a, []);

" resolvante de Cayley "
        6       5         4          3            2
(%o21) x  - 40 x  + 4080 x  - 92928 x  + 3772160 x  + 37880832 x

                                                       + 93392896
@end group
@end example

Para la resolvente de Cayley, los dos @'ultimos argumentos son neutros
y el polinomio dado en el argumento debe ser necesariamente de grado 5.

V@'eanse tambi@'en:
@flushleft
@code{resolvante_bipartite}, @code{resolvante_produit_sym},
@code{resolvante_unitaire}, @code{resolvante_alternee1}, @code{resolvante_klein}, 
@code{resolvante_klein3}, @code{resolvante_vierer}, @code{resolvante_diedrale}.
@end flushleft 

@end deffn

@deffn {Funci@'on} resolvante_alternee1 (@mvar{P}, @mvar{x})
Calcula la transformaci@'on de @code{@mvar{P}(@mvar{x})} de
grado @mvar{n} por la funci@'on $\prod_@{1\leq i<j\leq n-1@} (x_i-x_j)$.


V@'eanse tambi@'en:
@flushleft
@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante} , @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}, @code{resolvante_bipartite}.
@end flushleft

@end deffn

@deffn {Funci@'on} resolvante_bipartite (@mvar{P}, @mvar{x})
Calcula la transformaci@'on de 
@code{@mvar{P}(@mvar{x})} de grado @mvar{n} (@mvar{n} par) por la funci@'on 
$x_1x_2\ldots x_@{n/2@}+x_@{n/2+1@}\ldotsx_n$

@c GENERATED FROM THE FOLLOWING
@c resolvante_bipartite (x^6 + 108, x);
@example
@group
(%i1) resolvante_bipartite (x^6 + 108, x);
              10        8           6             4
(%o1)        y   - 972 y  + 314928 y  - 34012224 y
@end group
@end example


V@'eanse tambi@'en:
@flushleft
@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}, @code{resolvante_alternee1}.
@end flushleft

@end deffn

@deffn {Funci@'on} resolvante_diedrale (@mvar{P}, @mvar{x})
Calcula la transformaci@'on de
@code{@mvar{P}(@mvar{x})} por la funci@'on @code{@mvar{x_1} @mvar{x_2} + @mvar{x_3} @mvar{x_4}}.

@c GENERATED FROM THE FOLLOWING
@c resolvante_diedrale (x^5 - 3*x^4 + 1, x);
@example
@group
(%i1) resolvante_diedrale (x^5 - 3*x^4 + 1, x);
       15       12       11       10        9         8         7
(%o1) x   - 21 x   - 81 x   - 21 x   + 207 x  + 1134 x  + 2331 x

        6         5          4          3          2
 - 945 x  - 4970 x  - 18333 x  - 29079 x  - 20745 x  - 25326 x

 - 697
@end group
@end example


V@'eanse tambi@'en:
@flushleft
@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante}.
@end flushleft

@end deffn

@deffn {Funci@'on} resolvante_klein (@mvar{P}, @mvar{x})
Calcula la transformaci@'on de
@code{@mvar{P}(@mvar{x})} por la funci@'on @code{@mvar{x_1} @mvar{x_2} @mvar{x_4} + @mvar{x_4}}.

V@'eanse tambi@'en:
@flushleft
@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}.
@end flushleft

@end deffn

@deffn {Funci@'on} resolvante_klein3 (@mvar{P}, @mvar{x})
Calcula la transformaci@'on de
@code{@mvar{P}(@mvar{x})} por la funci@'on @code{@mvar{x_1} @mvar{x_2} @mvar{x_4} + @mvar{x_4}}.

V@'eanse tambi@'en:
@flushleft
@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante},
@code{resolvante_vierer}, @code{resolvante_diedrale}.
@end flushleft

@end deffn

@deffn {Funci@'on} resolvante_produit_sym (@mvar{P}, @mvar{x})
Calcula la lista de todas las resolventes producto
del polinomio @code{@mvar{P}(@mvar{x})}.

@c GENERATED FROM THE FOLLOWING
@c resolvante_produit_sym (x^5 + 3*x^4 + 2*x - 1, x);
@c resolvante: produit$
@c resolvante (x^5 + 3*x^4 + 2*x - 1, x, a*b*c, [a, b, c]);
@example
@group
(%i1) resolvante_produit_sym (x^5 + 3*x^4 + 2*x - 1, x);
        5      4             10      8       7       6       5
(%o1) [y  + 3 y  + 2 y - 1, y   - 2 y  - 21 y  - 31 y  - 14 y

    4       3      2       10      8       7    6       5       4
 - y  + 14 y  + 3 y  + 1, y   + 3 y  + 14 y  - y  - 14 y  - 31 y

       3      2       5      4
 - 21 y  - 2 y  + 1, y  - 2 y  - 3 y - 1, y - 1]
@end group
(%i2) resolvante: produit$
@group
(%i3) resolvante (x^5 + 3*x^4 + 2*x - 1, x, a*b*c, [a, b, c]);

" resolvante produit "
       10      8       7    6        5       4       3     2
(%o3) y   + 3 y  + 14 y  - y  - 14 y  - 31 y  - 21 y  - 2 y  + 1
@end group
@end example

@c INPUT %i3 TICKLES A MINOR BUG IN resolvante: 
@c " resolvante produit " IS PRINTED FROM SOMEWHERE IN THE BOWELS OF resolvante
@c AND IT GOOFS UP THE DISPLAY OF THE EXPONENTS OF %o3 -- I THREW IN A LINE BREAK TO ADJUST

V@'eanse tambi@'en:
@flushleft
@code{resolvante}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante_klein},
@code{resolvante_klein3}, @code{resolvante_vierer},
@code{resolvante_diedrale}.
@end flushleft

@end deffn

@deffn {Funci@'on} resolvante_unitaire (@mvar{P}, @mvar{Q}, @mvar{x})
Calcula la resolvente del polinomio @code{@mvar{P}(@mvar{x})} 
por el polinomio @code{@mvar{Q}(@mvar{x})}.

V@'eanse tambi@'en:
@flushleft
@code{resolvante_produit_sym}, @code{resolvante},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}.
@end flushleft

@end deffn

@deffn {Funci@'on} resolvante_vierer (@mvar{P}, @mvar{x})
Calcula la transformaci@'on de
@code{@mvar{P}(@mvar{x})} por la funci@'on @code{@mvar{x_1} @mvar{x_2} - @mvar{x_3} @mvar{x_4}}.

V@'eanse tambi@'en:
@flushleft
@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante}, @code{resolvante_diedrale}.
@end flushleft

@end deffn

@deffn {Funci@'on} schur2comp (@mvar{P}, @mvar{l_var})
@mvar{P} es un polinomio de variables contenidas en
la lista @mvar{l_var}. Cada una de las variables de @mvar{l_var}
representa una funci@'on sim@'etrica completa. 
La @mvar{i}-@'esima funci@'on sim@'etrica completa de @mvar{l_var}
se representa como la concatenaci@'on de la letra @code{h} con el
entero @mvar{i}: @code{h@mvar{i}}.
La funci@'on @code{schur2comp} devuelve la expresi@'on de @mvar{P}
en funci@'on de las funciones de Schur.

@c GENERATED FROM THE FOLLOWING
@c schur2comp (h1*h2 - h3, [h1, h2, h3]);
@c schur2comp (a*h3, [h3]);
@example
@group
(%i1) schur2comp (h1*h2 - h3, [h1, h2, h3]);
(%o1)                         s
                               1, 2
@end group
@group
(%i2) schur2comp (a*h3, [h3]);
(%o2)                         s  a
                               3
@end group
@end example

@end deffn

@deffn {Funci@'on} somrac (@mvar{l}, @mvar{k})
Si la lista @mvar{l} contiene las funciones sim@'etricas elementales de
un polinomio @mvar{P}, la funci@'on @code{somrac} calcula el polinomio cuyas
ra@'{@dotless{i}}ces son las sumas @mvar{k} a @mvar{k} de las ra@'{@dotless{i}}ces
de @mvar{P}. 

V@'ease tambi@'en @code{prodrac}.

@end deffn

@deffn {Funci@'on} tcontract (@mvar{pol}, @mvar{lvar})
Comprueba si el polinomio @mvar{pol} es sim@'etrico en las
variable contenidas en la lista @mvar{lvar}. En caso afirmativo,
devuelve una forma contra@'{@dotless{i}}da tal como lo hace la
funci@'on @code{contract}.

Otras funciones para efectuar cambios de representaci@'on son:
@code{contract}, @code{cont2part}, @code{explose}, @code{part2cont}, @code{partpol} y @code{tpartpol}.

@end deffn

@deffn {Funci@'on} tpartpol (@mvar{pol}, @mvar{lvar})
Comprueba si el polinomio @mvar{pol} es sim@'etrico en las
variable contenidas en la lista @mvar{lvar}. En caso afirmativo,
devuelve una forma particionada tal como lo hace la
funci@'on @code{partpol}.

Otras funciones para efectuar cambios de representaci@'on son:
@code{contract}, @code{cont2part}, @code{explose}, @code{part2cont}, @code{partpol} y @code{tcontract}.

@end deffn

@deffn {Funci@'on} treillis (@mvar{n})
Devuelve todas las particiones de pesos @mvar{n}.

@c GENERATED FROM THE FOLLOWING
@c treillis (4);
@example
@group
(%i1) treillis (4);
(%o1)    [[4], [3, 1], [2, 2], [2, 1, 1], [1, 1, 1, 1]]
@end group
@end example


V@'eanse tambi@'en @code{lgtreillis}, @code{ltreillis} y @code{treinat}.

@end deffn

@deffn {Funci@'on} treinat (@mvar{part})
Devuelve la lista de las particiones inferiores de la partici@'on
@mvar{part} en su orden natural.

@c GENERATED FROM THE FOLLOWING
@c treinat ([5]);
@c treinat ([1, 1, 1, 1, 1]);
@c treinat ([3, 2]);
@example
@group
(%i1) treinat ([5]);
(%o1)                         [[5]]
@end group
@group
(%i2) treinat ([1, 1, 1, 1, 1]);
(%o2) [[5], [4, 1], [3, 2], [3, 1, 1], [2, 2, 1], [2, 1, 1, 1], 

                                                 [1, 1, 1, 1, 1]]
@end group
@group
(%i3) treinat ([3, 2]);
(%o3)                 [[5], [4, 1], [3, 2]]
@end group
@end example


V@'eanse tambi@'en @code{lgtreillis}, @code{ltreillis} y @code{treillis}.

@end deffn
