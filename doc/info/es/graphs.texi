@c English version: 2011-06-11
@menu
* Introducci@'on a graphs::
* Funciones y variables para graphs::
@end menu

@node Introducci@'on a graphs, Funciones y variables para graphs, graphs, graphs
@section Introducci@'on a graphs

El paquete @code{graphs} permite trabajar con estructuras de grafos y digrafos en
Maxima. Tanto los grafos como los digrafos son de estructura simples (no 
tienen ni aristas m√∫ltiples ni bucles), pero los digrafos pueden tener
una arista dirigida desde @mvar{u} hasta @mvar{v} y otra desde @mvar{v}
hasta @mvar{u}.

Los grafos se representan internamente como listas de adyacencia y se
implementan como estructuras de lisp. Los v@'ertices se identifican 
por sus n@'umeros de identificaci@'n (siempre enteros). Las aristas/arcos
se representan por listas de longitud 2. Se pueden asignar etiquetas a los
v@'ertices de los grafos/digrafos y pesos a sus aristas/arcos.

La funci@'on @code{draw_graph} dibuja grafos siguiendo un criterio r@'{@dotless{i}}gido
de posicionamiento de los v@'ertices. Tambi@'en puede hacer uso del programa graphviz
disponible en @url{http://www.graphviz.org}. La funci@'on @code{draw_graph} utiliza el paquete 
@code{draw} de Maxima.

Para hacer uso de este paquete, ejec@'utese primero @code{load(graphs)}.


@node Funciones y variables para graphs, , Introducci@'on a graphs, graphs
@section Funciones y variables para graphs

@subsection Construyendo grafos

@deffn {Funci@'on} create_graph (@mvar{v_list}, @mvar{e_list})
@deffnx {Funci@'on} create_graph (@mvar{n}, @mvar{e_list})
@deffnx {Funci@'on} create_graph (@mvar{v_list}, @mvar{e_list}, @mvar{directed})

Crea un nuevo grafo sobre el conjunto de v@'ertices @mvar{v_list} con aristas
@mvar{e_list}.

@mvar{v_list} es una lista de v@'ertices (@code{[v1, v2,..., vn]}) o una lista de
v@'ertices junto con sus respectivas etiquetas (@code{[[v1,l1], [v2,l2],..., [vn,ln]]}).

@mvar{n} es el n@'umero de v@'ertices, los cuales se identificar@'an desde
0 hasta n-1.

@mvar{e_list} es una lista de aristas (@code{[e1, e2,..., em]}) o una lista de
aristas con sus respectivas ponderaciones (@code{[[e1, w1], ..., [em, wm]]}).

Si @mvar{directed} is not @code{false}, se devolver@'a un grafo orientado.

Ejemplos:

Crea un ciclo de 3 v@'ertices.

@c ===beg===
@c load (graphs)$
@c g : create_graph([1,2,3], [[1,2], [2,3], [1,3]])$
@c print_graph(g)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : create_graph([1,2,3], [[1,2], [2,3], [1,3]])$
(%i3) print_graph(g)$
Graph on 3 vertices with 3 edges.
Adjacencies:
  3 :  1  2
  2 :  3  1
  1 :  3  2
@end example

Crea un ciclo de 3 v@'ertices y aristas ponderadas:

@c ===beg===
@c load (graphs)$
@c g : create_graph([1,2,3], [[[1,2], 1.0], [[2,3], 2.0],
@c                           [[1,3], 3.0]])$
@c print_graph(g)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : create_graph([1,2,3], [[[1,2], 1.0], [[2,3], 2.0],
                                [[1,3], 3.0]])$
(%i3) print_graph(g)$
Graph on 3 vertices with 3 edges.
Adjacencies:
  3 :  1  2
  2 :  3  1
  1 :  3  2
@end example

Crea un grafo orientado:

@c ===beg===
@c load (graphs)$
@c d : create_graph(
@c         [1,2,3,4], 
@c         [
@c          [1,3], [1,4],
@c          [2,3], [2,4]
@c         ],
@c         'directed = true)$
@c print_graph(d)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) d : create_graph(
       [1,2,3,4], 
       [
        [1,3], [1,4],
        [2,3], [2,4]
       ],
       'directed = true)$
(%i3) print_graph(d)$
Digraph on 4 vertices with 4 arcs.
Adjacencies:
  4 :
  3 :
  2 :  4  3
  1 :  4  3
@end example
@end deffn



@deffn {Funci@'on} copy_graph (@mvar{g})
Devuelve una copia del grafo @mvar{g}.
@end deffn

@deffn {Funci@'on} circulant_graph (@mvar{n}, @mvar{d})
Devuelve un grafo cirlulante de par@'ametros @mvar{n} y @mvar{d}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : circulant_graph(10, [1,3])$
@c print_graph(g)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : circulant_graph(10, [1,3])$
(%i3) print_graph(g)$
Graph on 10 vertices with 20 edges.
Adjacencies:
  9 :  2  6  0  8
  8 :  1  5  9  7
  7 :  0  4  8  6
  6 :  9  3  7  5
  5 :  8  2  6  4
  4 :  7  1  5  3
  3 :  6  0  4  2
  2 :  9  5  3  1
  1 :  8  4  2  0
  0 :  7  3  9  1
@end example
@end deffn

@deffn {Funci@'on} clebsch_graph ()
Devuelve el grafo de Clebsch.
@end deffn

@deffn {Funci@'on} complement_graph (@mvar{g})
Devuelve el complemento del grafo @mvar{g}.
@end deffn

@deffn {Funci@'on} complete_bipartite_graph (@mvar{n}, @mvar{m})
Devuelve el grafo bipartido completo de @mvar{n+m} v@'ertices.
@end deffn

@deffn {Funci@'on} complete_graph (@mvar{n})
Devuelve el grafo completo de @mvar{n} v@'ertices.
@end deffn

@deffn {Funci@'on} cycle_digraph (@mvar{n})
Devuelve el ciclo dirigido de @mvar{n} v@'ertices.
@end deffn

@deffn {Funci@'on} cycle_graph (@mvar{n})
Devuelve el ciclo de @mvar{n} v@'ertices.
@end deffn

@deffn {Funci@'on} cuboctahedron_graph (@mvar{n})
Devuelve el grafo cuboocta@'edrico.
@end deffn

@deffn {Funci@'on} cube_graph (@mvar{n})
Devuelve el cubo de @mvar{n} dimensiones.
@end deffn

@deffn {Funci@'on} dodecahedron_graph ()
Devuelve el grafo del dodecaedro.
@end deffn

@deffn {Funci@'on} empty_graph (@mvar{n})
Devuelve el grafo vac@'{@dotless{i}}o de @mvar{n} v@'ertices.
@end deffn

@deffn {Funci@'on} flower_snark (@mvar{n})
Devuelve el grafo de flor de @mvar{4n} v@'ertices.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c f5 : flower_snark(5)$
@c chromatic_index(f5);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) f5 : flower_snark(5)$
(%i3) chromatic_index(f5);
(%o3)                                  4
@end example
@end deffn

@deffn {Funci@'on} from_adjacency_matrix (@mvar{A})
Devuelve el grafo definido por la matriz de adyacencia @mvar{A}.
@end deffn

@deffn {Funci@'on} frucht_graph ()
Devuelve el grafo de Frucht.
@end deffn

@deffn {Funci@'on} graph_product (@mvar{g1}, @mvar{g1})
Devuelve el producto dirigido de los grafos @mvar{g1} y @mvar{g2}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c grid : graph_product(path_graph(3), path_graph(4))$
@c draw_graph(grid)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) grid : graph_product(path_graph(3), path_graph(4))$
(%i3) draw_graph(grid)$
@end example
@end deffn

@ifhtml
@image{../figures/graphs01,6cm}
@end ifhtml

@deffn {Funci@'on} graph_union (@mvar{g1}, @mvar{g1})
Devuelve la uni@'on (suma) de los grafos @mvar{g1} y @mvar{g2}.
@end deffn

@deffn {Funci@'on} grid_graph (@mvar{n}, @mvar{m})
Devuelve la rejilla @mvar{n x m}.
@end deffn

@deffn {Funci@'on} great_rhombicosidodecahedron_graph ()
Devuelve el grafo gran rombicosidodeca@'edrico.
@end deffn

@deffn {Funci@'on} great_rhombicuboctahedron_graph ()
Devuelve el grafo gran rombicocubicoocta@'edrico.
@end deffn

@deffn {Funci@'on} grotzch_graph ()
Devuelve el grafo de Grotzch.
@end deffn

@deffn {Funci@'on} heawood_graph ()
Devuelve el grafo de Heawood.
@end deffn

@deffn {Funci@'on} icosahedron_graph ()
Devuelve el grafo icosa@'edrico.
@end deffn

@deffn {Funci@'on} icosidodecahedron_graph ()
Devuelve el grafo icosidodeca@'edrico.
@end deffn

@deffn {Funci@'on} induced_subgraph (@mvar{V}, @mvar{g})
Devuelve el grafo inducido por el subconjunto @mvar{V} de v@'ertices del grafo @mvar{g}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c V : [0,1,2,3,4]$
@c g : induced_subgraph(V, p)$
@c print_graph(g)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) V : [0,1,2,3,4]$
(%i4) g : induced_subgraph(V, p)$
(%i5) print_graph(g)$
Graph on 5 vertices with 5 edges.
Adjacencies:
  4 :  3  0
  3 :  2  4
  2 :  1  3
  1 :  0  2
  0 :  1  4
@end example
@end deffn

@deffn {Funci@'on} line_graph (@mvar{g})
Devuelve el grafo de l@'{@dotless{i}}nea del grafo @mvar{g}.
@end deffn


@deffn {Funci@'on} make_graph (@mvar{vrt}, @mvar{f})
@deffnx {Funci@'on} make_graph (@mvar{vrt}, @mvar{f}, @mvar{oriented})
Crea un grafo por medio de la funci@'on de predicado @mvar{f}.

@mvar{vrt} es una lista o conjunto de v@'ertices o un simplemente un n@'umero entero.
Si @mvar{vrt} es un n@'umero entero, entonces los v@'ertices del grafo ser@'an los
enteros desde 1 hasta @mvar{vrt}.

@mvar{f} es una funci@'on de predicado. Dos v@'ertices @mvar{a} y @mvar{b} se conectar@'an
si @code{f(a,b)=true}.

Si @mvar{directed} no es @mvar{false}, entonces en grafo ser@'a dirigido.

Ejemplo 1:
@c ===beg===
@c load(graphs)$
@c g : make_graph(powerset({1,2,3,4,5}, 2), disjointp)$
@c is_isomorphic(g, petersen_graph());
@c get_vertex_label(1, g);
@c ===end===
@example
(%i1) load(graphs)$
(%i2) g : make_graph(powerset(@{1,2,3,4,5@}, 2), disjointp)$
(%i3) is_isomorphic(g, petersen_graph());
(%o3)                         true
(%i4) get_vertex_label(1, g);
(%o4)                        @{1, 2@}
@end example

Ejemplo 2:
@c ===beg===
@c load(graphs)$
@c f(i, j) := is (mod(j, i)=0)$
@c g : make_graph(20, f, directed=true)$
@c out_neighbors(4, g);
@c in_neighbors(18, g);
@c ===end===
@example
(%i1) load(graphs)$
(%i2) f(i, j) := is (mod(j, i)=0)$
(%i3) g : make_graph(20, f, directed=true)$
(%i4) out_neighbors(4, g);
(%o4)                    [8, 12, 16, 20]
(%i5) in_neighbors(18, g);
(%o5)                    [1, 2, 3, 6, 9]
@end example
@end deffn


@deffn {Funci@'on} mycielski_graph (@mvar{g})
Devuelve el grafo de Mycielski del grafo @mvar{g}.
@end deffn

@deffn {Funci@'on} new_graph ()
Devuelve el grafo sin v@'ertices ni aristas.
@end deffn

@deffn {Funci@'on} path_digraph (@mvar{n})
Devuelve el camino dirigido de @mvar{n} v@'ertices.
@end deffn

@deffn {Funci@'on} path_graph (@mvar{n})
Devuelve el camino de @mvar{n} v@'ertices.
@end deffn

@deffn {Funci@'on} petersen_graph ()
@deffnx {Funci@'on} petersen_graph (@mvar{n}, @mvar{d})
Devuelve el grafo de Petersen @mvar{P_@{n,d@}}. Los valores por
defecto para @mvar{n} y @mvar{d} son @code{n=5} y @code{d=2}.
@end deffn

@deffn {Funci@'on} random_bipartite_graph (@mvar{a}, @mvar{b}, @mvar{p})
Devuelve un grafo aleatorio bipartido a partir de los v@'ertices @code{a+b}. Cada
arista se genera con probabilidad @mvar{p}.
@end deffn

@deffn {Funci@'on} random_digraph (@mvar{n}, @mvar{p})
Devuelve un grafo aleatorio dirigido de @mvar{n} v@'ertices. Cada arco se presenta
con una probabilidad @mvar{p}.
@end deffn

@deffn {Funci@'on} random_regular_graph (@mvar{n})
@deffnx {Funci@'on} random_regular_graph (@mvar{n}, @mvar{d})
Devuelve un grafo aleatorio @mvar{d}-regular de @mvar{n} v@'ertices. El valor
por defecto para @mvar{d} es @code{d=3}.
@end deffn

@deffn {Funci@'on} random_graph (@mvar{n}, @mvar{p})
Devuelve un grafo aleatorio de @mvar{n} v@'ertices. Cada arco se presenta
con una probabilidad @mvar{p}.
@end deffn

@deffn {Funci@'on} random_graph1 (@mvar{n}, @mvar{m})
Devuelve un grafo aleatorio de @mvar{n} v@'ertices y @mvar{m} arcos aleatorios.
@end deffn

@deffn {Funci@'on} random_network (@mvar{n}, @mvar{p}, @mvar{w})
Devuelve una red aleatoria de @mvar{n} v@'ertices. Cada arco se presenta 
con probabilidad @mvar{p} y tiene un peso dentro del rango @code{[0,w]}.
La funci@'on devuelve una lista @code{[network, source, sink]}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c [net, s, t] : random_network(50, 0.2, 10.0);
@c max_flow(net, s, t)$
@c first(%);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) [net, s, t] : random_network(50, 0.2, 10.0);
(%o2)                         [DIGRAPH, 50, 51]
(%i3) max_flow(net, s, t)$
(%i4) first(%);
(%o4)                   27.65981397932507
@end example
@end deffn

@deffn {Funci@'on} random_tournament (@mvar{n})
Devuelve un torneo aleatorio de @mvar{n} v@'ertices.
@end deffn

@deffn {Funci@'on} random_tree (@mvar{n})
Devuelve un @'arbol aleatorio de @mvar{n} v@'ertices.
@end deffn

@deffn {Funci@'on} small_rhombicosidodecahedron_graph ()
Devuelve el grafo peque@~no rombicosidodeca@'edrico.
@end deffn

@deffn {Funci@'on} small_rhombicuboctahedron_graph ()
Devuelve el grafo peque@~no rombicocubicoocta@'edrico.
@end deffn

@deffn {Funci@'on} snub_cube_graph ()
Devuelve el grafo c@'ubico volteado.
@end deffn

@deffn {Funci@'on} snub_dodecahedron_graph ()
Devuelve el grafo dodeca@'edrico volteado.
@end deffn

@deffn {Funci@'on} truncated_cube_graph ()
Devuelve el grafo c@'ubico truncado.
@end deffn

@deffn {Funci@'on} truncated_dodecahedron_graph ()
Devuelve el grafo dodeca@'edrico truncado.
@end deffn

@deffn {Funci@'on} truncated_icosahedron_graph ()
Devuelve el grafo icosa@'edrico truncado.
@end deffn

@deffn {Funci@'on} truncated_tetrahedron_graph ()
Devuelve el grafo del tetraedro truncado.
@end deffn

@deffn {Funci@'on} tutte_graph ()
Devuelve el grafo de Tutte.
@end deffn

@deffn {Funci@'on} underlying_graph (@mvar{g})
Devuelve el grafo asociado al grafo orientado @mvar{g}.
@end deffn

@deffn {Funci@'on} wheel_graph (@mvar{n})
Devuelve el grafo de rueda de @mvar{n+1} v@'ertices.
@end deffn

@subsection Propiedades de los grafos

@deffn {Funci@'on} adjacency_matrix (@mvar{gr})
Devuelve la matriz de adyacencia del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c c5 : cycle_graph(4)$
@c adjacency_matrix(c5);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) c5 : cycle_graph(4)$
(%i3) adjacency_matrix(c5);
                                [ 0  1  0  1 ]
                                [            ]
                                [ 1  0  1  0 ]
(%o3)                           [            ]
                                [ 0  1  0  1 ]
                                [            ]
                                [ 1  0  1  0 ]
@end example
@end deffn

@deffn {Funci@'on} average_degree (@mvar{gr})
Devuelve el grado medio de los v@'ertices del garfo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c average_degree(grotzch_graph());
@c ===end===
@example
(%i1) load (graphs)$
(%i2) average_degree(grotzch_graph());
                                      40
(%o2)                                 --
                                      11
@end example
@end deffn

@deffn {Funci@'on} biconnected_components (@mvar{gr})
Devuelve los subconjuntos de v@'ertices biconectados del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : create_graph(
@c             [1,2,3,4,5,6,7],
@c             [
@c              [1,2],[2,3],[2,4],[3,4],
@c              [4,5],[5,6],[4,6],[6,7]
@c             ])$
@c biconnected_components(g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : create_graph(
            [1,2,3,4,5,6,7],
            [
             [1,2],[2,3],[2,4],[3,4],
             [4,5],[5,6],[4,6],[6,7]
            ])$
(%i3) biconnected_components(g);
(%o3)               [[6, 7], [4, 5, 6], [1, 2], [2, 3, 4]]
@end example

@ifhtml
@image{../figures/graphs13,6cm}
@end ifhtml
@end deffn

@deffn {Funci@'on} bipartition (@mvar{gr})
Devuelve una bipartici@'on de los v@'ertices del grafo @mvar{gr}, o una
lista vac@'{@dotless{i}}a si @mvar{gr} no es bipartido.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c h : heawood_graph()$
@c [A,B]:bipartition(h);
@c draw_graph(h, show_vertices=A, program=circular)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) h : heawood_graph()$
(%i3) [A,B]:bipartition(h);
(%o3)         [[8, 12, 6, 10, 0, 2, 4], [13, 5, 11, 7, 9, 1, 3]]
(%i4) draw_graph(h, show_vertices=A, program=circular)$
@end example
@end deffn

@ifhtml
@image{../figures/graphs02,6cm}
@end ifhtml

@deffn {Funci@'on} chromatic_index (@mvar{gr})
Devuelve el @'{@dotless{i}}ndice crom@'atico del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c chromatic_index(p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) chromatic_index(p);
(%o3)                                  4
@end example
@end deffn

@deffn {Funci@'on} chromatic_number (@mvar{gr})
Devuelve el n@'umero crom@'atico del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c chromatic_number(cycle_graph(5));
@c chromatic_number(cycle_graph(6));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) chromatic_number(cycle_graph(5));
(%o2)                                  3
(%i3) chromatic_number(cycle_graph(6));
(%o3)                                  2
@end example
@end deffn

@deffn {Funci@'on} clear_edge_weight (@mvar{e}, @mvar{gr})
Elimina el peso del arco @mvar{e} del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : create_graph(3, [[[0,1], 1.5], [[1,2], 1.3]])$
@c get_edge_weight([0,1], g);
@c clear_edge_weight([0,1], g)$
@c get_edge_weight([0,1], g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : create_graph(3, [[[0,1], 1.5], [[1,2], 1.3]])$
(%i3) get_edge_weight([0,1], g);
(%o3)                                 1.5
(%i4) clear_edge_weight([0,1], g)$
(%i5) get_edge_weight([0,1], g);
(%o5)                                  1
@end example
@end deffn

@deffn {Funci@'on} clear_vertex_label (@mvar{v}, @mvar{gr})
Elimina la etiqueta del v@'ertice @mvar{v} del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : create_graph([[0,"Zero"], [1, "One"]], [[0,1]])$
@c get_vertex_label(0, g);
@c clear_vertex_label(0, g);
@c get_vertex_label(0, g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : create_graph([[0,"Zero"], [1, "One"]], [[0,1]])$
(%i3) get_vertex_label(0, g);
(%o3)                               Zero
(%i4) clear_vertex_label(0, g);
(%o4)                               done
(%i5) get_vertex_label(0, g);
(%o5)                               false
@end example
@end deffn

@deffn {Funci@'on} connected_components (@mvar{gr})
Devuelve las componentes conexas del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g: graph_union(cycle_graph(5), path_graph(4))$
@c connected_components(g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g: graph_union(cycle_graph(5), path_graph(4))$
(%i3) connected_components(g);
(%o3)                  [[1, 2, 3, 4, 0], [8, 7, 6, 5]]
@end example
@end deffn

@deffn {Funci@'on} diameter (@mvar{gr})
Devuelve el di@'ametro del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c diameter(dodecahedron_graph());
@c ===end===
@example
(%i1) load (graphs)$
(%i2) diameter(dodecahedron_graph());
(%o2)                                 5
@end example
@end deffn

@deffn {Funci@'on} edge_coloring (@mvar{gr})
Devuelve una coloraci@'on @'optima de los arcos del grafo @mvar{gr}.

La funci@'on devuelve el @'{@dotless{i}}ndice crom@'atico y una lista
que representa el coloreado de los arcos de @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c [ch_index, col] : edge_coloring(p);
@c assoc([0,1], col);
@c assoc([0,5], col);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) [ch_index, col] : edge_coloring(p);
(%o3) [4, [[[0, 5], 3], [[5, 7], 1], [[0, 1], 1], [[1, 6], 2], 
[[6, 8], 1], [[1, 2], 3], [[2, 7], 4], [[7, 9], 2], [[2, 3], 2], 
[[3, 8], 3], [[5, 8], 2], [[3, 4], 1], [[4, 9], 4], [[6, 9], 3], 
[[0, 4], 2]]]
(%i4) assoc([0,1], col);
(%o4)                           1
(%i5) assoc([0,5], col);
(%o5)                           3
@end example
@end deffn

@deffn {Funci@'on} degree_sequence (@mvar{gr})
Devuelve una lista con los grados de los v@'ertices del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c degree_sequence(random_graph(10, 0.4));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) degree_sequence(random_graph(10, 0.4));
(%o2)            [2, 2, 2, 2, 2, 2, 3, 3, 3, 3]
@end example
@end deffn

@deffn {Funci@'on} edge_connectivity (@mvar{gr})
Devuelve la conectividad de las aristas del grafo @mvar{gr}.

V@'ease tambi@'en @code{min_edge_cut}.
@end deffn

@deffn {Funci@'on} edges (@mvar{gr})
Devuelve la lista de las aristas (arcos) del grafo (dirigido) @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c edges(complete_graph(4));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) edges(complete_graph(4));
(%o2)         [[2, 3], [1, 3], [1, 2], [0, 3], [0, 2], [0, 1]]
@end example
@end deffn

@deffn {Funci@'on} get_edge_weight (@mvar{e}, @mvar{gr})
@deffnx {Funci@'on} get_edge_weight (@mvar{e}, @mvar{gr}, @mvar{ifnot})
Devuelve el peso de la arista @mvar{e} del grafo @mvar{gr}.

Si la arista no tiene peso, la funci@'on devuelve 1. Si la arista no
pertenece al grafo, la funci@'on emite un mensaje de error o devuelve
el argumento opcional @mvar{ifnot}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c c5 : cycle_graph(5)$
@c get_edge_weight([1,2], c5);
@c set_edge_weight([1,2], 2.0, c5);
@c get_edge_weight([1,2], c5);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) c5 : cycle_graph(5)$
(%i3) get_edge_weight([1,2], c5);
(%o3)                                 1
(%i4) set_edge_weight([1,2], 2.0, c5);
(%o4)                               done
(%i5) get_edge_weight([1,2], c5);
(%o5)                                2.0
@end example
@end deffn

@deffn {Funci@'on} get_vertex_label (@mvar{v}, @mvar{gr})
Devuelve la etiqueta del v@'ertice @mvar{v} del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : create_graph([[0,"Zero"], [1, "One"]], [[0,1]])$
@c get_vertex_label(0, g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : create_graph([[0,"Zero"], [1, "One"]], [[0,1]])$
(%i3) get_vertex_label(0, g);
(%o3)                               Zero
@end example
@end deffn

@deffn {Funci@'on} graph_charpoly (@mvar{gr}, @mvar{x})
Devuelve el polinomio caracter@'{@dotless{i}}stico (de variable @mvar{x})
del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c graph_charpoly(p, x), factor;
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) graph_charpoly(p, x), factor;
                                         5        4
(%o3)                     (x - 3) (x - 1)  (x + 2)
@end example
@end deffn

@deffn {Funci@'on} graph_center (@mvar{gr})
Devuelve el centro del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : grid_graph(5,5)$
@c graph_center(g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : grid_graph(5,5)$
(%i3) graph_center(g);
(%o3)                               [12]
@end example
@end deffn

@deffn {Funci@'on} graph_eigenvalues (@mvar{gr})
Devuelve los valores propios del grafo @mvar{gr}. La funci@'on
devuelve los valores propios en el mismo formato en el que lo 
hace la funci@'on @code{eigenvalue}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c graph_eigenvalues(p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) graph_eigenvalues(p);
(%o3)                     [[3, - 2, 1], [1, 4, 5]]
@end example
@end deffn

@deffn {Funci@'on} graph_periphery (@mvar{gr})
Devuelve la periferia del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : grid_graph(5,5)$
@c graph_periphery(g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : grid_graph(5,5)$
(%i3) graph_periphery(g);
(%o3)                          [24, 20, 4, 0]
@end example
@end deffn

@deffn {Funci@'on} graph_size (@mvar{gr})
Devuelve el n@'umero de aristas del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c graph_size(p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) graph_size(p);
(%o3)                                15
@end example
@end deffn

@deffn {Funci@'on} graph_order (@mvar{gr})
Devuelve el n@'umero de v@'ertices del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c graph_order(p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) graph_order(p);
(%o3)                                10
@end example
@end deffn

@deffn {Funci@'on} girth (@mvar{gr})
Devuelve la longitud del ciclo m@'as corto del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : heawood_graph()$
@c girth(g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : heawood_graph()$
(%i3) girth(g);
(%o3)                                 6
@end example
@end deffn

@deffn {Funci@'on} hamilton_cycle (@mvar{gr})
Devuelve el ciclo de Hamilton del grafo @mvar{gr} o una lista vac@'{@dotless{i}}a
si @mvar{gr} no es hamiltoniano.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c c : cube_graph(3)$
@c hc : hamilton_cycle(c);
@c draw_graph(c, show_edges=vertices_to_cycle(hc))$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) c : cube_graph(3)$
(%i3) hc : hamilton_cycle(c);
(%o3)              [7, 3, 2, 6, 4, 0, 1, 5, 7]
(%i4) draw_graph(c, show_edges=vertices_to_cycle(hc))$
@end example
@end deffn

@ifhtml
@image{../figures/graphs03,6cm}
@end ifhtml

@deffn {Funci@'on} hamilton_path (@mvar{gr})
Devuelve el camino de Hamilton del grafo @mvar{gr} o una lista vac@'{@dotless{i}}a
si @mvar{gr} no los tiene.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c hp : hamilton_path(p);
@c draw_graph(p, show_edges=vertices_to_path(hp))$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) hp : hamilton_path(p);
(%o3)                  [0, 5, 7, 2, 1, 6, 8, 3, 4, 9]
(%i4) draw_graph(p, show_edges=vertices_to_path(hp))$
@end example
@end deffn

@ifhtml
@image{../figures/graphs04,6cm}
@end ifhtml

@deffn {Funci@'on} isomorphism (@mvar{gr1}, @mvar{gr2})
Devuelve un isomorfismo entre los grafos/digrafos @mvar{gr1} y @mvar{gr2}.
Si @mvar{gr1} y @mvar{gr2} no son isomorfos, devuelve una lista vac@'{@dotless{i}}a.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c clk5:complement_graph(line_graph(complete_graph(5)))$
@c isomorphism(clk5, petersen_graph());
@c ===end===
@example
(%i1) load (graphs)$
(%i2) clk5:complement_graph(line_graph(complete_graph(5)))$
(%i3) isomorphism(clk5, petersen_graph());
(%o3) [9 -> 0, 2 -> 1, 6 -> 2, 5 -> 3, 0 -> 4, 1 -> 5, 3 -> 6, 
                                          4 -> 7, 7 -> 8, 8 -> 9]
@end example
@end deffn

@deffn {Funci@'on} in_neighbors (@mvar{v}, @mvar{gr})
Devuelve la lista de los nodos hijos del v@'ertice @mvar{v}
del grafo orientado @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c p : path_digraph(3)$
@c in_neighbors(2, p);
@c out_neighbors(2, p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : path_digraph(3)$
(%i3) in_neighbors(2, p);
(%o3)                                 [1]
(%i4) out_neighbors(2, p);
(%o4)                                 []
@end example
@end deffn

@deffn {Funci@'on} is_biconnected (@mvar{gr})
Devuelve @code{true} si @mvar{gr} est@'a biconectado y @code{false}
en caso contrario.

Ejemplo:

Example:
@c ===beg===
@c load (graphs)$
@c is_biconnected(cycle_graph(5));
@c is_biconnected(path_graph(5));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_biconnected(cycle_graph(5));
(%o2)                         true
(%i3) is_biconnected(path_graph(5));
(%o3)                         false
@end example
@end deffn

@deffn {Funci@'on} is_bipartite (@mvar{gr})
Devuelve @code{true} si @mvar{gr} es bipartido (2-coloreable) y @code{false}
en caso contrario.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c is_bipartite(petersen_graph());
@c is_bipartite(heawood_graph());
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_bipartite(petersen_graph());
(%o2)                               false
(%i3) is_bipartite(heawood_graph());
(%o3)                               true
@end example
@end deffn

@deffn {Funci@'on} is_connected (@mvar{gr})
Devuelve @code{true} si el grafo @mvar{gr} es conexo y @code{false}
en caso contrario.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c is_connected(graph_union(cycle_graph(4), path_graph(3)));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_connected(graph_union(cycle_graph(4), path_graph(3)));
(%o2)                               false
@end example
@end deffn

@deffn {Funci@'on} is_digraph (@mvar{gr})
Devuelve @code{true} si @mvar{gr} es un grafo orientado (digrafo) y
@code{false} en caso contrario.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c is_digraph(path_graph(5));
@c is_digraph(path_digraph(5));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_digraph(path_graph(5));
(%o2)                               false
(%i3) is_digraph(path_digraph(5));
(%o3)                               true
@end example
@end deffn

@deffn {Funci@'on} is_edge_in_graph (@mvar{e}, @mvar{gr})
Devuelve @code{true} si @mvar{e} es una arista (arco) del
grafo (digrafo) @mvar{g} y @code{false} en caso contrario.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c c4 : cycle_graph(4)$
@c is_edge_in_graph([2,3], c4);
@c is_edge_in_graph([3,2], c4);
@c is_edge_in_graph([2,4], c4);
@c is_edge_in_graph([3,2], cycle_digraph(4));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) c4 : cycle_graph(4)$
(%i3) is_edge_in_graph([2,3], c4);
(%o3)                               true
(%i4) is_edge_in_graph([3,2], c4);
(%o4)                               true
(%i5) is_edge_in_graph([2,4], c4);
(%o5)                               false
(%i6) is_edge_in_graph([3,2], cycle_digraph(4));
(%o6)                               false
@end example
@end deffn

@deffn {Funci@'on} is_graph (@mvar{gr})
Devuelve @code{true} si @mvar{gr} es un grafo y @code{false} en caso contrario.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c is_graph(path_graph(5));
@c is_graph(path_digraph(5));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_graph(path_graph(5));
(%o2)                               true
(%i3) is_graph(path_digraph(5));
(%o3)                               false
@end example
@end deffn

@deffn {Funci@'on} is_graph_or_digraph (@mvar{gr})
Devuelve @code{true} si @mvar{gr} es una grafo, orientado o no,
y @code{false} en caso contrario.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c is_graph_or_digraph(path_graph(5));
@c is_graph_or_digraph(path_digraph(5));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_graph_or_digraph(path_graph(5));
(%o2)                               true
(%i3) is_graph_or_digraph(path_digraph(5));
(%o3)                               true
@end example
@end deffn

@deffn {Funci@'on} is_isomorphic (@mvar{gr1}, @mvar{gr2})
Devuelve @code{true} si los grafos/digrafos @mvar{gr1} y @mvar{gr2} son
isomorfos y @code{false} en caso contrario.

V@'ease tambi@'en @code{isomorphism}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c clk5:complement_graph(line_graph(complete_graph(5)))$
@c is_isomorphic(clk5, petersen_graph());
@c ===end===
@example
(%i1) load (graphs)$
(%i2) clk5:complement_graph(line_graph(complete_graph(5)))$
(%i3) is_isomorphic(clk5, petersen_graph());
(%o3)                         true
@end example
@end deffn

@deffn {Funci@'on} is_planar (@mvar{gr})
Devuelve @code{true} si @mvar{gr} es un grafo planar y @code{false} en caso contrario.

El algoritmo utilizado es el de Demoucron, que es de tiempo cuadr@'atico.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c is_planar(dodecahedron_graph());
@c is_planar(petersen_graph());
@c is_planar(petersen_graph(10,2));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_planar(dodecahedron_graph());
(%o2)                                true
(%i3) is_planar(petersen_graph());
(%o3)                                false
(%i4) is_planar(petersen_graph(10,2));
(%o4)                                true
@end example
@end deffn

@deffn {Funci@'on} is_sconnected (@mvar{gr})
Devuelve @code{true} si el grafo orientado @mvar{gr} es fuertemente conexo,
devolviendo @code{false} en caso contrario.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c is_sconnected(cycle_digraph(5));
@c is_sconnected(path_digraph(5));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_sconnected(cycle_digraph(5));
(%o2)                               true
(%i3) is_sconnected(path_digraph(5));
(%o3)                               false
@end example
@end deffn

@deffn {Funci@'on} is_vertex_in_graph (@mvar{v}, @mvar{gr})
Devuelve @code{true} si @mvar{v} es un v@'ertice del grafo @mvar{g}
y @code{false} en caso contrario.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c c4 : cycle_graph(4)$
@c is_vertex_in_graph(0, c4);
@c is_vertex_in_graph(6, c4);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) c4 : cycle_graph(4)$
(%i3) is_vertex_in_graph(0, c4);
(%o3)                               true
(%i4) is_vertex_in_graph(6, c4);
(%o4)                               false
@end example
@end deffn

@deffn {Funci@'on} is_tree (@mvar{gr})
Devuelve @code{true} si @mvar{gr} es un @'arbol y @code{false} en caso contrario.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c is_tree(random_tree(4));
@c is_tree(graph_union(random_tree(4), random_tree(5)));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) is_tree(random_tree(4));
(%o2)                               true
(%i3) is_tree(graph_union(random_tree(4), random_tree(5)));
(%o3)                               false
@end example
@end deffn

@deffn {Funci@'on} laplacian_matrix (@mvar{gr})
Devuelve el laplaciano de la matriz del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c laplacian_matrix(cycle_graph(5));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) laplacian_matrix(cycle_graph(5));
                          [  2   - 1   0    0   - 1 ]
                          [                         ]
                          [ - 1   2   - 1   0    0  ]
                          [                         ]
(%o2)                     [  0   - 1   2   - 1   0  ]
                          [                         ]
                          [  0    0   - 1   2   - 1 ]
                          [                         ]
                          [ - 1   0    0   - 1   2  ]
@end example
@end deffn

@deffn {Funci@'on} max_clique (@mvar{gr})
Devuelve el clique m@'aximo del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : random_graph(100, 0.5)$
@c max_clique(g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : random_graph(100, 0.5)$
(%i3) max_clique(g);
(%o3)       [6, 12, 31, 36, 52, 59, 62, 63, 80]
@end example
@end deffn

@deffn {Funci@'on} max_degree (@mvar{gr})
Devuelve el grado m@'aximo de los v@'ertices del grafo @mvar{gr} y un 
v@'ertice de grado m@'aximo.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : random_graph(100, 0.02)$
@c max_degree(g);
@c vertex_degree(95, g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : random_graph(100, 0.02)$
(%i3) max_degree(g);
(%o3)                        [6, 79]
(%i4) vertex_degree(95, g);
(%o4)                           3
@end example
@end deffn

@deffn {Funci@'on} max_flow (@mvar{net}, @mvar{s}, @mvar{t})
Devuelve el flujo maximal de la red @mvar{net} con origen en
@mvar{s} y final en @mvar{t}.

La funci@'on devuelve el valor del flujo maximal y una lista con los
pesos de los arcos del flujo @'optimo.

Ejemplo:

Example:
@c ===beg===
@c load (graphs)$
@c net : create_graph(
@c   [1,2,3,4,5,6],
@c   [[[1,2], 1.0],
@c    [[1,3], 0.3],
@c    [[2,4], 0.2],
@c    [[2,5], 0.3],
@c    [[3,4], 0.1],
@c    [[3,5], 0.1],
@c    [[4,6], 1.0],
@c    [[5,6], 1.0]],
@c   directed=true)$
@c [flow_value, flow] : max_flow(net, 1, 6);
@c fl : 0$
@c for u in out_neighbors(1, net) 
@c      do fl : fl + assoc([1, u], flow)$
@c fl;
@c ===end===
@example
(%i1) load (graphs)$
(%i2) net : create_graph(
  [1,2,3,4,5,6],
  [[[1,2], 1.0],
   [[1,3], 0.3],
   [[2,4], 0.2],
   [[2,5], 0.3],
   [[3,4], 0.1],
   [[3,5], 0.1],
   [[4,6], 1.0],
   [[5,6], 1.0]],
  directed=true)$
(%i3) [flow_value, flow] : max_flow(net, 1, 6);
(%o3) [0.7, [[[1, 2], 0.5], [[1, 3], 0.2], [[2, 4], 0.2],
[[2, 5], 0.3], [[3, 4], 0.1], [[3, 5], 0.1], [[4, 6], 0.3],
[[5, 6], 0.4]]]
(%i4) fl : 0$
(%i5) for u in out_neighbors(1, net) 
         do fl : fl + assoc([1, u], flow)$
(%i6) fl;
(%o6)                                 0.7
@end example
@end deffn

@deffn {Funci@'on} max_independent_set (@mvar{gr})
Devuelve un conjunto maximal independiente de v@'ertices del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c d : dodecahedron_graph()$
@c mi : max_independent_set(d);
@c draw_graph(d, show_vertices=mi)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) d : dodecahedron_graph()$
(%i3) mi : max_independent_set(d);
(%o3)             [0, 3, 5, 9, 10, 11, 18, 19]
(%i4) draw_graph(d, show_vertices=mi)$
@end example
@end deffn

@ifhtml
@image{../figures/graphs05,6cm}
@end ifhtml

@deffn {Funci@'on} max_matching (@mvar{gr})
Devuelve un conjunto maximal independiente de aristas del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c d : dodecahedron_graph()$
@c m : max_matching(d);
@c draw_graph(d, show_edges=m)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) d : dodecahedron_graph()$
(%i3) m : max_matching(d);
(%o3) [[5, 7], [8, 9], [6, 10], [14, 19], [13, 18], [12, 17], 
                               [11, 16], [0, 15], [3, 4], [1, 2]]
(%i4) draw_graph(d, show_edges=m)$
@end example
@end deffn

@ifhtml
@image{../figures/graphs06,6cm}
@end ifhtml

@deffn {Funci@'on} min_degree (@mvar{gr})
Devuelve el grado m@'{@dotless{i}}nimo de los v@'ertices del grafo @mvar{gr} y un 
v@'ertice de grado m@'{@dotless{i}}nimo.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : random_graph(100, 0.1)$
@c min_degree(g);
@c vertex_degree(21, g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : random_graph(100, 0.1)$
(%i3) min_degree(g);
(%o3)                              [3, 49]
(%i4) vertex_degree(21, g);
(%o4)                                 9
@end example
@end deffn

@deffn {Funci@'on} min_edge_cut (@mvar{gr})
Devuelve el m@'{@dotless{i}}nimo @i{edge cut} del grafo @mvar{gr}. Un @i{edge cut} es
un conjunto de aristas cuya eliminaci@'on aumenta el n@'umero de componentes del grafo.

V@'ease tambi@'en @code{edge_connectivity}.
@end deffn

@deffn {Funci@'on} min_vertex_cover (@mvar{gr})
Devuelve el m@'{@dotless{i}}nimo nodo @i{covering} del grafo @mvar{gr}.
@c Esta traduccion esta tomada de la wikipedia. Habra que revisarla.
@end deffn

@deffn {Funci@'on} min_vertex_cut (@mvar{gr})
Devuelve el m@'{@dotless{i}}nimo @i{vertex cut} del grafo @mvar{gr}.

V@'ease tambi@'en @code{vertex_connectivity}.
@end deffn


@deffn {Funci@'on} minimum_spanning_tree (@mvar{gr})
Devuelve el grafo de expansi@'on m@'{@dotless{i}}nimo del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : graph_product(path_graph(10), path_graph(10))$
@c t : minimum_spanning_tree(g)$
@c draw_graph(g, show_edges=edges(t))$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : graph_product(path_graph(10), path_graph(10))$
(%i3) t : minimum_spanning_tree(g)$
(%i4) draw_graph(g, show_edges=edges(t))$
@end example
@end deffn

@ifhtml
@image{../figures/graphs07,6cm}
@end ifhtml

@deffn {Funci@'on} neighbors (@mvar{v}, @mvar{gr})
Devuelve la lista de los vecinos del v@'ertice @mvar{v} del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c p : petersen_graph()$
@c neighbors(3, p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : petersen_graph()$
(%i3) neighbors(3, p);
(%o3)                             [4, 8, 2]
@end example
@end deffn

@deffn {Funci@'on} odd_girth (@mvar{gr})
Devuelve la longitud del ciclo impar m@'as corto del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : graph_product(cycle_graph(4), cycle_graph(7))$
@c girth(g);
@c odd_girth(g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : graph_product(cycle_graph(4), cycle_graph(7))$
(%i3) girth(g);
(%o3)                                 4
(%i4) odd_girth(g);
(%o4)                                 7
@end example
@end deffn

@deffn {Funci@'on} out_neighbors (@mvar{v}, @mvar{gr})
Devuelve la lista de los nodos padres del v@'ertice @mvar{v} del grafo
orientado @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c p : path_digraph(3)$
@c in_neighbors(2, p);
@c out_neighbors(2, p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : path_digraph(3)$
(%i3) in_neighbors(2, p);
(%o3)                                 [1]
(%i4) out_neighbors(2, p);
(%o4)                                 []
@end example
@end deffn

@deffn {Funci@'on} planar_embedding (@mvar{gr})
Devuelve la lista de caminos faciales en una proyecci@'on planar de @mvar{gr},
o @code{false} si @mvar{gr} no es un grafo planar.

El grafo @mvar{gr} debe estar biconectado.

El algoritmo utilizado es el de Demoucron, que es de tiempo cuadr@'atico.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c planar_embedding(grid_graph(3,3));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) planar_embedding(grid_graph(3,3));
(%o2) [[3, 6, 7, 8, 5, 2, 1, 0], [4, 3, 0, 1], [3, 4, 7, 6], 
                                      [8, 7, 4, 5], [1, 2, 5, 4]]
@end example
@end deffn

@deffn {Funci@'on} print_graph (@mvar{gr})
Muestra alguna informaci@'on sobre el grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c c5 : cycle_graph(5)$
@c print_graph(c5)$
@c dc5 : cycle_digraph(5)$
@c print_graph(dc5)$
@c out_neighbors(0, dc5);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) c5 : cycle_graph(5)$
(%i3) print_graph(c5)$
Graph on 5 vertices with 5 edges.
Adjacencies:
  4 :  0  3
  3 :  4  2
  2 :  3  1
  1 :  2  0
  0 :  4  1
(%i4) dc5 : cycle_digraph(5)$
(%i5) print_graph(dc5)$
Digraph on 5 vertices with 5 arcs.
Adjacencies:
  4 :  0
  3 :  4
  2 :  3
  1 :  2
  0 :  1
(%i6) out_neighbors(0, dc5);
(%o6)                                [1]
@end example
@end deffn

@deffn {Funci@'on} radius (@mvar{gr})
Devuelve el radio del grafo  @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c radius(dodecahedron_graph());
@c ===end===
@example
(%i1) load (graphs)$
(%i2) radius(dodecahedron_graph());
(%o2)                                 5
@end example
@end deffn

@deffn {Funci@'on} set_edge_weight (@mvar{e}, @mvar{w}, @mvar{gr})
Asigna el peso @mvar{w} a la arista @mvar{e} del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : create_graph([1, 2], [[[1,2], 1.2]])$
@c get_edge_weight([1,2], g);
@c set_edge_weight([1,2], 2.1, g);
@c get_edge_weight([1,2], g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : create_graph([1, 2], [[[1,2], 1.2]])$
(%i3) get_edge_weight([1,2], g);
(%o3)                                1.2
(%i4) set_edge_weight([1,2], 2.1, g);
(%o4)                               done
(%i5) get_edge_weight([1,2], g);
(%o5)                                2.1
@end example
@end deffn

@deffn {Funci@'on} set_vertex_label (@mvar{v}, @mvar{l}, @mvar{gr})
Asigna la etiqueta @mvar{l} al v@'ertice @mvar{v} del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : create_graph([[1, "One"], [2, "Two"]], [[1,2]])$
@c get_vertex_label(1, g);
@c set_vertex_label(1, "oNE", g);
@c get_vertex_label(1, g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : create_graph([[1, "One"], [2, "Two"]], [[1,2]])$
(%i3) get_vertex_label(1, g);
(%o3)                                One
(%i4) set_vertex_label(1, "oNE", g);
(%o4)                               done
(%i5) get_vertex_label(1, g);
(%o5)                                oNE
@end example
@end deffn

@deffn {Funci@'on} shortest_path (@mvar{u}, @mvar{v}, @mvar{gr})
Devuelve el camino m@'as corto desde @mvar{u} hasta @mvar{v} del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c d : dodecahedron_graph()$
@c path : shortest_path(0, 7, d);
@c draw_graph(d, show_edges=vertices_to_path(path))$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) d : dodecahedron_graph()$
(%i3) path : shortest_path(0, 7, d);
(%o3)                          [0, 1, 19, 13, 7]
(%i4) draw_graph(d, show_edges=vertices_to_path(path))$
@end example
@end deffn

@ifhtml
@image{../figures/graphs08,6cm}
@end ifhtml


@deffn {Funci@'on} shortest_weighted_path (@mvar{u}, @mvar{v}, @mvar{gr})
Devuelve la longitud del camino m@'as corto ponderado y el propio camino
m@'as corto ponderado desde @mvar{u} hasta @mvar{v} en el grafo @mvar{gr}.

La longitud del camino ponderado es la suma de los pesos de las aristas
del camino. Si una arista no tiene peso asignado, su valor por defecto
es la unidad.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g: petersen_graph(20, 2)$
@c for e in edges(g) do set_edge_weight(e, random(1.0), g)$
@c shortest_weighted_path(0, 10, g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g: petersen_graph(20, 2)$
(%i3) for e in edges(g) do set_edge_weight(e, random(1.0), g)$
(%i4) shortest_weighted_path(0, 10, g);
(%o4) [2.575143920268482, [0, 20, 38, 36, 34, 32, 30, 10]]
@end example

@end deffn


@deffn {Funci@'on} strong_components (@mvar{gr})
Devuelve las componentes fuertes del grafo orientado @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c t : random_tournament(4)$
@c strong_components(t);
@c vertex_out_degree(3, t);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) t : random_tournament(4)$
(%i3) strong_components(t);
(%o3)                         [[1], [0], [2], [3]]
(%i4) vertex_out_degree(3, t);
(%o4)                                 3
@end example
@end deffn

@deffn {Funci@'on} topological_sort (@mvar{dag})
Devuelve el orden topol@'ogico de los v@'ertices del grafo orientado @mvar{dag}
o una lista vac@'{@dotless{i}}a si @mvar{dag} no es un grafo orientado
ac@'{@dotless{i}}clico.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g:create_graph(
@c          [1,2,3,4,5],
@c          [
@c           [1,2], [2,5], [5,3],
@c           [5,4], [3,4], [1,3]
@c          ],
@c          directed=true)$
@c topological_sort(g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g:create_graph(
         [1,2,3,4,5],
         [
          [1,2], [2,5], [5,3],
          [5,4], [3,4], [1,3]
         ],
         directed=true)$
(%i3) topological_sort(g);
(%o3)                           [1, 2, 5, 3, 4]
@end example
@end deffn

@deffn {Funci@'on} vertex_connectivity (@mvar{g})
Devuelve la conectividad de los v@'ertices del grafo @mvar{g}.

V@'ease tambi@'en @code{min_vertex_cut}.
@end deffn

@deffn {Funci@'on} vertex_degree (@mvar{v}, @mvar{gr})
Devuelve el grado del v@'ertice @mvar{v} del grafo @mvar{gr}.
@end deffn

@deffn {Funci@'on} vertex_distance (@mvar{u}, @mvar{v}, @mvar{gr})
Devuelve la longitud del camino m@'as corto entre @mvar{u} y @mvar{v}
del grafo o digrafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c d : dodecahedron_graph()$
@c vertex_distance(0, 7, d);
@c shortest_path(0, 7, d);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) d : dodecahedron_graph()$
(%i3) vertex_distance(0, 7, d);
(%o3)                                 4
(%i4) shortest_path(0, 7, d);
(%o4)                         [0, 1, 19, 13, 7]
@end example
@end deffn

@deffn {Funci@'on} vertex_eccentricity (@mvar{v}, @mvar{gr})
Devuelve la excentricidad del v@'ertice @mvar{v} del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g:cycle_graph(7)$
@c vertex_eccentricity(0, g);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g:cycle_graph(7)$
(%i3) vertex_eccentricity(0, g);
(%o3)                           3
@end example
@end deffn

@deffn {Funci@'on} vertex_in_degree (@mvar{v}, @mvar{gr})
Devuelve el grado de entrada del v@'ertice @mvar{v} del grafo 
orientado @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c p5 : path_digraph(5)$
@c print_graph(p5)$
@c vertex_in_degree(4, p5);
@c in_neighbors(4, p5);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p5 : path_digraph(5)$
(%i3) print_graph(p5)$
Digraph on 5 vertices with 4 arcs.
Adjacencies:
  4 :
  3 :  4
  2 :  3
  1 :  2
  0 :  1
(%i4) vertex_in_degree(4, p5);
(%o4)                                 1
(%i5) in_neighbors(4, p5);
(%o5)                                [3]
@end example
@end deffn

@deffn {Funci@'on} vertex_out_degree (@mvar{v}, @mvar{gr})
Devuelve el grado de salida del v@'ertice @mvar{v} del grafo
orientado @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c t : random_tournament(10)$
@c vertex_out_degree(0, t);
@c out_neighbors(0, t);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) t : random_tournament(10)$
(%i3) vertex_out_degree(0, t);
(%o3)                           2
(%i4) out_neighbors(0, t);
(%o4)                        [7, 1]
@end example
@end deffn

@deffn {Funci@'on} vertices (@mvar{gr})
Devuelve la lista de v@'ertices del grafo @mvar{gr}.

Example

@c ===beg===
@c load (graphs)$
@c vertices(complete_graph(4));
@c ===end===
@example
(%i1) load (graphs)$
(%i2) vertices(complete_graph(4));
(%o2)                           [3, 2, 1, 0]
@end example
@end deffn

@deffn {Funci@'on} vertex_coloring (@mvar{gr})
Devuelve un coloreado @'optimo de los v@'ertices del grafo @mvar{gr}.

La funci@'on devuelve el n@'umero crom@'atico y una lista 
representando el coloreado de los v@'ertices de @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c p:petersen_graph()$
@c vertex_coloring(p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p:petersen_graph()$
(%i3) vertex_coloring(p);
(%o3) [3, [[0, 2], [1, 3], [2, 2], [3, 3], [4, 1], [5, 3], 
                                 [6, 1], [7, 1], [8, 2], [9, 2]]]
@end example
@end deffn

@deffn {Funci@'on} wiener_index (@mvar{gr})
Devuelve el @'{@dotless{i}}ndice de Wiener del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c wiener_index(dodecahedron_graph());
@c ===end===
@example
(%i1) wiener_index(dodecahedron_graph());
(%o1)                          500
@end example
@end deffn











@subsection Modificaci@'on de grafos


@deffn {Funci@'on} add_edge (@mvar{e}, @mvar{gr})
A@~nade la arista @mvar{e} al grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c p : path_graph(4)$
@c neighbors(0, p);
@c add_edge([0,3], p);
@c neighbors(0, p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p : path_graph(4)$
(%i3) neighbors(0, p);
(%o3)                                [1]
(%i4) add_edge([0,3], p);
(%o4)                               done
(%i5) neighbors(0, p);
(%o5)                              [3, 1]
@end example
@end deffn

@deffn {Funci@'on} add_edges (@mvar{e_list}, @mvar{gr})
A@~nade las aristas de la lista  @mvar{e_list} al grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : empty_graph(3)$
@c add_edges([[0,1],[1,2]], g)$
@c print_graph(g)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : empty_graph(3)$
(%i3) add_edges([[0,1],[1,2]], g)$
(%i4) print_graph(g)$
Graph on 3 vertices with 2 edges.
Adjacencies:
  2 :  1
  1 :  2  0
  0 :  1
@end example
@end deffn

@deffn {Funci@'on} add_vertex (@mvar{v}, @mvar{gr})
A@~nade el v@'ertice @mvar{v} al grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : path_graph(2)$
@c add_vertex(2, g)$
@c print_graph(g)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : path_graph(2)$
(%i3) add_vertex(2, g)$
(%i4) print_graph(g)$
Graph on 3 vertices with 1 edges.
Adjacencies:
  2 :
  1 :  0
  0 :  1
@end example
@end deffn

@deffn {Funci@'on} add_vertices (@mvar{v_list}, @mvar{gr})
A@~nade los v@'ertices de la lista  @mvar{v_list} al grafo @mvar{gr}.
@end deffn

@deffn {Funci@'on} connect_vertices (@mvar{v_list}, @mvar{u_list}, @mvar{gr})
Conecta todos los v@'ertices de la lista @mvar{v_list} con los v@'ertices
de la lista @mvar{u_list} del grafo @mvar{gr}.

@mvar{v_list} y @mvar{u_list} pueden ser v@'ertices aislados o una lista de
v@'ertices.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g : empty_graph(4)$
@c connect_vertices(0, [1,2,3], g)$
@c print_graph(g)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g : empty_graph(4)$
(%i3) connect_vertices(0, [1,2,3], g)$
(%i4) print_graph(g)$
Graph on 4 vertices with 3 edges.
Adjacencies:
  3 :  0
  2 :  0
  1 :  0
  0 :  3  2  1
@end example
@end deffn

@deffn {Funci@'on} contract_edge (@mvar{e}, @mvar{gr})
Contrae la arista @mvar{e} del @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c g: create_graph(
@c       8, [[0,3],[1,3],[2,3],[3,4],[4,5],[4,6],[4,7]])$
@c print_graph(g)$
@c contract_edge([3,4], g)$
@c print_graph(g)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g: create_graph(
       8, [[0,3],[1,3],[2,3],[3,4],[4,5],[4,6],[4,7]])$
(%i3) print_graph(g)$
Graph on 8 vertices with 7 edges.
Adjacencies:
  7 :  4
  6 :  4
  5 :  4
  4 :  7  6  5  3
  3 :  4  2  1  0
  2 :  3
  1 :  3
  0 :  3
(%i4) contract_edge([3,4], g)$
(%i5) print_graph(g)$
Graph on 7 vertices with 6 edges.
Adjacencies:
  7 :  3
  6 :  3
  5 :  3
  3 :  5  6  7  2  1  0
  2 :  3
  1 :  3
  0 :  3
@end example
@end deffn

@deffn {Funci@'on} remove_edge (@mvar{e}, @mvar{gr})
Elimina la arista @mvar{e} del grafo @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c c3 : cycle_graph(3)$
@c remove_edge([0,1], c3)$
@c print_graph(c3)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) c3 : cycle_graph(3)$
(%i3) remove_edge([0,1], c3)$
(%i4) print_graph(c3)$
Graph on 3 vertices with 2 edges.
Adjacencies:
  2 :  0  1
  1 :  2
  0 :  2
@end example
@end deffn

@deffn {Funci@'on} remove_vertex (@mvar{v}, @mvar{gr})
Elimina el v@'ertice @mvar{v} del grafo @mvar{gr}.
@end deffn

@deffn {Funci@'on} vertex_coloring (@mvar{gr})
Devuelve un coloreado @'optimo de los v@'ertice del grafo @mvar{gr}.

La funci@'on devuelve el n@'umero crom@'atico y una lista representando 
el coloreado de los v@'ertices de @mvar{gr}.

Ejemplo:

@c ===beg===
@c load (graphs)$
@c p:petersen_graph()$
@c vertex_coloring(p);
@c ===end===
@example
(%i1) load (graphs)$
(%i2) p:petersen_graph()$
(%i3) vertex_coloring(p);
(%o3) [3, [[0, 2], [1, 3], [2, 2], [3, 3], [4, 1], [5, 3], 
                                [6, 1], [7, 1], [8, 2], [9, 2]]]
@end example
@end deffn


@subsection Lectura y escritura de ficheros

@deffn {Funci@'on} dimacs_export (@mvar{gr}, @mvar{fl})
@deffnx {Funci@'on} dimacs_export (@mvar{gr}, @mvar{fl}, @mvar{comment1}, ..., @mvar{commentn})
Exporta el grafo al fichero @mvar{fl} en formato DIMACS. Los comentarios
adicionales se an@~adir@'an al comienzo del fichero.
@end deffn

@deffn {Funci@'on} dimacs_import (@mvar{fl})
Lee el grafo almacenado en el fichero @mvar{fl} en formato DIMACS.
@end deffn

@deffn {Funci@'on} graph6_decode (@mvar{str})
Devuelve el grafo codificado en formato graph6 en la cadena @mvar{str}.
@end deffn

@deffn {Funci@'on} graph6_encode (@mvar{gr})
Devuelve una cadena codificando el grafo @mvar{gr} en formato graph6.
@end deffn

@deffn {Funci@'on} graph6_export (@mvar{gr_list}, @mvar{fl})
Exporta los grafos de la lista @mvar{gr_list} al fichero @mvar{fl} en formato graph6.
@end deffn

@deffn {Funci@'on} graph6_import (@mvar{fl})
Lee la lista de grafos almacenados en el fichero @mvar{fl} en formato graph6.
@end deffn

@deffn {Funci@'on} sparse6_decode (@mvar{str})
Devuelve el grafo codificado en formato sparse6 en la cadena @mvar{str}.
@end deffn

@deffn {Funci@'on} sparse6_encode (@mvar{gr})
Devuelve una cadena codificando el grafo @mvar{gr} en formato sparse6.
@end deffn

@deffn {Funci@'on} sparse6_export (@mvar{gr_list}, @mvar{fl})
Exporta los grafos de la lista @mvar{gr_list} al fichero @mvar{fl} en formato sparse6.
@end deffn

@deffn {Funci@'on} sparse6_import (@mvar{fl})
Lee la lista de grafos almacenados en el fichero @mvar{fl} en formato sparse6.
@end deffn

@subsection Visualizaci@'on

@deffn {Funci@'on} draw_graph (@mvar{graph})
@deffnx {Funci@'on} draw_graph (@mvar{graph}, @mvar{option1}, ..., @mvar{optionk})
Dibuja el grafo utilizando el paquete @code{draw}.

El algoritmo utilizado para posicionar los v@'ertices se especifica con el argumento
opcional @mvar{program}, cuyo valor por defecto es @code{program=spring_embedding}.
@mvar{draw_graph} tambi@'en puede utilizar los programas de graphviz para
posicionar los v@'ertices, para lo cual deber@'a instalarse separadamente el programa graphviz.

Ejemplo 1:

@c ===beg===
@c load (graphs)$
@c g:grid_graph(10,10)$
@c m:max_matching(g)$
@c draw_graph(g,
@c    spring_embedding_depth=100,
@c    show_edges=m, edge_type=dots,
@c    vertex_size=0)$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g:grid_graph(10,10)$
(%i3) m:max_matching(g)$
(%i4) draw_graph(g,
   spring_embedding_depth=100,
   show_edges=m, edge_type=dots,
   vertex_size=0)$
@end example

@ifhtml
@image{../figures/graphs09,6cm}
@end ifhtml

Ejemplo 2:

@c ===beg===
@c load (graphs)$
@c g:create_graph(16,
@c     [
@c      [0,1],[1,3],[2,3],[0,2],[3,4],[2,4],
@c      [5,6],[6,4],[4,7],[6,7],[7,8],[7,10],[7,11],
@c      [8,10],[11,10],[8,9],[11,12],[9,15],[12,13],
@c      [10,14],[15,14],[13,14]
@c     ])$
@c t:minimum_spanning_tree(g)$
@c draw_graph(
@c     g,
@c     show_edges=edges(t),
@c     show_edge_width=4,
@c     show_edge_color=green,
@c     vertex_type=filled_square,
@c     vertex_size=2
@c     )$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) g:create_graph(16,
    [
     [0,1],[1,3],[2,3],[0,2],[3,4],[2,4],
     [5,6],[6,4],[4,7],[6,7],[7,8],[7,10],[7,11],
     [8,10],[11,10],[8,9],[11,12],[9,15],[12,13],
     [10,14],[15,14],[13,14]
    ])$
(%i3) t:minimum_spanning_tree(g)$
(%i4) draw_graph(
    g,
    show_edges=edges(t),
    show_edge_width=4,
    show_edge_color=green,
    vertex_type=filled_square,
    vertex_size=2
    )$
@end example

@ifhtml
@image{../figures/graphs10,6cm}
@end ifhtml

Ejemplo 3:

@c ===beg===
@c load (graphs)$
@c mi : max_independent_set(g)$
@c draw_graph(
@c     g,
@c     show_vertices=mi,
@c     show_vertex_type=filled_up_triangle,
@c     show_vertex_size=2,
@c     edge_color=cyan,
@c     edge_width=3,
@c     show_id=true,
@c     text_color=brown
@c     )$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) mi : max_independent_set(g)$
(%i3) draw_graph(
    g,
    show_vertices=mi,
    show_vertex_type=filled_up_triangle,
    show_vertex_size=2,
    edge_color=cyan,
    edge_width=3,
    =true,
    text_color=brown
    )$
@end example

@ifhtml
@image{../figures/graphs11,6cm}
@end ifhtml

Ejemplo 4:

@c ===beg===
@c load (graphs)$
@c net : create_graph(
@c     [0,1,2,3,4,5],
@c     [
@c      [[0,1], 3], [[0,2], 2],
@c      [[1,3], 1], [[1,4], 3],
@c      [[2,3], 2], [[2,4], 2],
@c      [[4,5], 2], [[3,5], 2]
@c     ],
@c     directed=true
@c     )$
@c draw_graph(
@c     net,
@c     show_weight=true,
@c     vertex_size=0,
@c     show_vertices=[0,5],
@c     show_vertex_type=filled_square,
@c     head_length=0.2,
@c     head_angle=10,
@c     edge_color="dark-green",
@c     text_color=blue
@c     )$
@c ===end===
@example
(%i1) load (graphs)$
(%i2) net : create_graph(
    [0,1,2,3,4,5],
    [
     [[0,1], 3], [[0,2], 2],
     [[1,3], 1], [[1,4], 3],
     [[2,3], 2], [[2,4], 2],
     [[4,5], 2], [[3,5], 2]
    ],
    directed=true
    )$
(%i3) draw_graph(
    net,
    show_weight=true,
    vertex_size=0,
    show_vertices=[0,5],
    show_vertex_type=filled_square,
    head_length=0.2,
    head_angle=10,
    edge_color="dark-green",
    text_color=blue
    )$
@end example

@ifhtml
@image{../figures/graphs12,6cm}
@end ifhtml

Ejemplo 5:

@c ===beg===
@c load(graphs)$
@c g: petersen_graph(20, 2);
@c draw_graph(g, redraw=true, program=planar_embedding);
@c ===end===
@example
(%i1) load(graphs)$
(%i2) g: petersen_graph(20, 2);
(%o2)                         GRAPH
(%i3) draw_graph(g, redraw=true, program=planar_embedding);
(%o3)                         done
@end example

@ifhtml
@image{../figures/graphs14,6cm}
@end ifhtml

Ejemplo 6:

@c ===beg===
@c load(graphs)$
@c t: tutte_graph();
@c draw_graph(t, redraw=true, 
@c               fixed_vertices=[1,2,3,4,5,6,7,8,9]);
@c ===end===
@example
(%i1) load(graphs)$
(%i2) t: tutte_graph();
(%o2)                         GRAPH
(%i3) draw_graph(t, redraw=true, 
                    fixed_vertices=[1,2,3,4,5,6,7,8,9]);
(%o3)                         done
@end example

@ifhtml
@image{../figures/graphs15,6cm}
@end ifhtml

@end deffn


@defvr {Variable opcional} draw_graph_program
Valor por defecto: @mvar{spring_embedding}

Programa a utilizar por defecto para posicionar los v@'ertices en la funci@'on @code{draw_graph}.
@end defvr

@defvr {Opci@'on de draw_graph} show_id
Valor por defecto: @mvar{false}

Si @mvar{show_id} vale @mvar{true} entonces se muestran los
n@'umeros identificadores de los v@'ertices.
@end defvr

@defvr {Opci@'on de draw_graph} show_label
Valor por defecto: @mvar{false}

Si @mvar{show_label} vale @mvar{true} entonces se muestran las
etiquetas de los v@'ertices.
@end defvr

@defvr {Opci@'on de draw_graph} label_alignment
Valor por defecto: @mvar{center}

Indica c@'omo se deben alinear las etiquetas o n@'umeros
identificadores de los v@'ertices. Puede ser: @code{left}, @code{center} or @code{right}.
@end defvr

@defvr {Opci@'on de draw_graph} show_weight 
Valor por defecto: @mvar{false}

si @mvar{show_weight} vale @mvar{true} entonces se mostrar@'an 
los pesos de las aristas.
@end defvr

@defvr {Opci@'on de draw_graph} vertex_type
Valor por defecto: @mvar{circle}

Establece c@'omo se mostrar@'an los v@'ertices. V@'ease la
opci@'on @mvar{point_type} del paquete @code{draw}.
@end defvr

@defvr {Opci@'on de draw_graph} vertex_size
Taman@~o de los v@'ertices.
@end defvr

@defvr {Opci@'on de draw_graph} vertex_color
Color a utilizar en los v@'ertices.
@end defvr

@defvr {Opci@'on de draw_graph} show_vertices
Valor por defecto: []

Dibuja los v@'ertices seleccionados en la lista con colores diferentes.
@end defvr

@defvr {Opci@'on de draw_graph} show_vertex_type
Establece c@'omo se mostrar@'an los v@'ertices de
@mvar{show_vertices}. V@'ease la opci@'on @mvar{point_type} del paquete @code{draw}.
@end defvr

@defvr {Opci@'on de draw_graph} show_vertex_size
Taman@~os de los v@'ertices de @mvar{show_vertices}.
@end defvr

@defvr {Opci@'on de draw_graph} show_vertex_color 
Color a utilizar en los v@'ertices de la lista @mvar{show_vertices}.
@end defvr

@defvr {Opci@'on de draw_graph} vertex_partition
Valor por defecto: []

Una partici@'on @code{[[v1,v2,...],...,[vk,...,vn]]} de los v@'ertices del grafo. Los 
v@'ertices de cada lista se dibujar@'an de diferente color.
@end defvr

@defvr {Opci@'on de draw_graph} vertex_coloring
Colores de los v@'ertices. Los colores @mvar{col} deben
especificarse en el mismo formato que el devuelto por @mvar{vertex_coloring}.
@end defvr

@defvr {Opci@'on de draw_graph} edge_color 
Color a utilizar en las aristas.
@end defvr

@defvr {Opci@'on de draw_graph} edge_width
Ancho de las aristas.
@end defvr

@defvr {Opci@'on de draw_graph} edge_type
Establece c@'omo se dibujar@'an las aristas. V@'ease la opci@'on
@mvar{line_type} del paquete @code{draw}.
@end defvr

@defvr {Opci@'on de draw_graph} show_edges
Dibuja las aristas de la lista @mvar{e_list} con colores diferentes.
@end defvr

@defvr {Opci@'on de draw_graph} show_edge_color
Color a utilizar en las aristas de la lista @mvar{show_edges}.
@end defvr

@defvr {Opci@'on de draw_graph} show_edge_width
Anchos de las aristas de @mvar{show_edges}.
@end defvr

@defvr {Opci@'on de draw_graph} show_edge_type
Establece c@'omo se dibujar@'an las aristas de @mvar{show_edges}.
V@'ease la opci@'on @mvar{line_type} del paquete @code{draw}.
@end defvr

@defvr {Opci@'on de draw_graph} edge_partition
Una partici@'on @code{[[e1,e2,...],...,[ek,...,em]]} de las aristas del grafo.
Las aristas de cada lista se dibujar@'an de diferente color.
@end defvr

@defvr {Opci@'on de draw_graph} edge_coloring
Colores de las aristas. Los colores @mvar{col} deben
especificarse en el mismo formato que el devuelto por @mvar{edge_coloring}.
@end defvr

@defvr {Opci@'on de draw_graph} redraw 
Valor por defecto: @mvar{false}

Si @mvar{redraw} vale @code{true}, las posiciones de los v@'ertices se recalculan
incluso si las posiciones est@'an almacenadas de un dibujo previo del grafo.
@end defvr

@defvr {Opci@'on de draw_graph} head_angle
Valor por defecto: 15

@'Angulo de las flechas de los arcos en los grafos orientados.
@end defvr

@defvr {Opci@'on de draw_graph} head_length
Valor por defecto: 0.1

Longitud de las flechas de los arcos en los grafos orientados.
@end defvr

@defvr {Opci@'on de draw_graph} spring_embedding_depth
Valor por defecto: 50

N@'umero de iteraciones del algoritmo de dibujo de grafos.
@end defvr

@defvr {Opci@'on de draw_graph} terminal
Terminal utilizado para ver el gr@'afo. V@'ease la opci@'on @mvar{terminal}
del paquete @code{draw}.
@end defvr

@defvr {Opci@'on de draw_graph} file_name
Nombre del fichero cuando el terminal especificado no es la pantalla.
@end defvr

@defvr {Opci@'on de draw_graph} program
establece el programa para posicionado de v@'ertices del grafo. Puede ser
cualquiera de los programas graphviz (dot, neato, twopi, circ, fdp), @mvar{circular} o
@mvar{spring_embedding} o @mvar{planar_embedding}; @mvar{planar_embedding} s@'lo est@'a
disponible para grafos planares 2-conectados. Si @code{program=spring_embedding},
se puede especificar un conjunto de v@'ertices de posici@'on fija con la opci@'on 
@mvar{fixed_vertices}.
@end defvr

@defvr {Opci@'on de draw_graph} fixed_vertices
Especifica una lista de v@'ertices con posiciones fijas en
un pol@'{@dotless{i}}gono regular. Se puede utilizar cuando @code{program=spring_embedding}.
@end defvr

@deffn {Funci@'on} vertices_to_path (@mvar{v_list})
Convierte una lista @mvar{v_list} de v@'ertices en la lista de aristas del camino
definido por la propia @mvar{v_list}.
@end deffn

@deffn {Funci@'on} vertices_to_cycle (@mvar{v_list})
Convierte una lista @mvar{v_list} de v@'ertices en la lista de aristas del ciclo
definido por la propia @mvar{v_list}.
@end deffn

