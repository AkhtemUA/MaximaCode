@c English version: 2011-05-31
@menu
* Introducci@'on al procesamiento de cadenas::
* Funciones y variables para entrada y salida::
* Funciones y variables para caracteres::
* Funciones y variables para cadenas::
@end menu

@node Introducci@'on al procesamiento de cadenas, Funciones y variables para entrada y salida, stringproc, stringproc
@section Introducci@'on al procesamiento de cadenas

El paquete @code{stringproc} ampl@'{@dotless{i}}a las capacidades de 
Maxima para manipular cadenas de caracteres, al tiempo que a@~nade algunas
funciones @'utiles para la lectura y escritura de ficheros.

Para dudas y fallos, por favor cont@'actese con van.nek at arcor.de .

En Maxima, una cadena de caracteres se construye f@'acilmente 
escribi@'endola entre comillas dobles, como en @code{"texto"}.
La funci@'on @code{stringp} comprueba si el argumento es una cadena.

@c ===beg===
@c m: "text";
@c stringp(m);
@c ===end===
@example
(%i1) m: "text";
(%o1)                         text
(%i2) stringp(m);
(%o2)                         true
@end example

Los caracteres se representan como cadenas de longitud unidad.
No se tratan como caracteres Lisp. Se pueden chequear con la
funci@'on @code{charp} (o con @code{lcharp} para los caracteres Lisp).
La conversi@'on de caracteres Lisp a caracteres Maxima se realiza con
la funci@'on @code{cunlisp}.

@c ===beg===
@c c: "e";
@c [charp(c),lcharp(c)];
@c supcase(c);
@c charp(%);
@c ===end===
@example
(%i1) c: "e";
(%o1)                           e
(%i2) [charp(c),lcharp(c)];
(%o2)                     [true, false]
(%i3) supcase(c);
(%o3)                           E
(%i4) charp(%);
(%o4)                         true
@end example

Todos los caracteres devueltos por las funciones de @code{stringproc} son caracteres
de Maxima. Puesto que los caracteres introducidos son cadenas de longitud igual a
la unidad, se pueden utilizar las funciones de cadenas tambi@'en para los 
caracteres, como se ha hecho con @code{supcase} en el anterior ejemplo.

Es importante tener en cuenta que el primer car@'acter en una cadena de Maxima
ocupa la posici@'on 1. Esto se ha dise@~nado as@'{@dotless{i}} para mantener
la compatibilidad con las listas de Maxima. V@'eanse las definiciones de 
@code{charat} y @code{charlist} para ver ejemplos.

Las funciones de cadena se utilizan frecuentemente cuando se trabaja con
ficheros. El siguiente ejemplo muestra algunas de estas funciones en acci@'on.

Ejemplo: 

La funci@'on @code{openw} env@'{@dotless{i}}a un flujo de salida hacia
un fichero, entonces @code{printf} permitir@'a formatera la escritura en
este fichero. V@'ease @code{printf} para m@'as detalles.

@example
(%i1) s: openw("E:/file.txt");
(%o1)                    #<output stream E:/file.txt>
(%i2) for n:0 thru 10 do printf( s, "~d ", fib(n) );
(%o2)                                done
(%i3) printf( s, "~%~d ~f ~a ~a ~f ~e ~a~%", 
              42,1.234,sqrt(2),%pi,1.0e-2,1.0e-2,1.0b-2 );
(%o3)                                false
(%i4) close(s);
(%o4)                                true
@end example

Una vez cerrado el flujo, se podr@'a abrir nuevamente. La funci@'on @code{readline}
devuelve el rengl@'on entero como una @'unica cadena. El paquete @code{stringproc}
dispone de muchas funciones para manipular cadenas. La separaci@'on de palabras se
puede hacer con @code{split} o @code{tokens}.

@example
(%i5) s: openr("E:/file.txt");
(%o5)                     #<input stream E:/file.txt>
(%i6) readline(s);
(%o6)                     0 1 1 2 3 5 8 13 21 34 55 
(%i7) line: readline(s);
(%o7)               42 1.234 sqrt(2) %pi 0.01 1.0E-2 1.0b-2
(%i8) list: tokens(line);
(%o8)           [42, 1.234, sqrt(2), %pi, 0.01, 1.0E-2, 1.0b-2]
(%i9) map( parsetoken, list );
(%o9)           [42, 1.234, false, false, 0.01, 0.01, false]
@end example

La funci@'on @code{parsetoken} s@'olo analiza sint@'acticamente n@'umeros
enteros y decimales. El an@'alisis de s@'{@dotless{i}}mbolos y n@'umeros
decimales grandes (@i{big floats}) necesita @code{parse_string}, que se
cargar autom@'aticamente desde @code{eval_string.lisp}.

@example 
(%i5) s: openr("E:/file.txt");
(%o5)                     #<input stream E:/file.txt>
(%i6) readline(s);
(%o6)                     0 1 1 2 3 5 8 13 21 34 55 
(%i7) line: readline(s);
(%o7)               42 1.234 sqrt(2) %pi 0.01 1.0E-2 1.0b-2
(%i8) list: tokens(line);
(%o8)           [42, 1.234, sqrt(2), %pi, 0.01, 1.0E-2, 1.0b-2]
(%i9) map( parse_string, list );
(%o9)            [42, 1.234, sqrt(2), %pi, 0.01, 0.01, 1.0b-2]
(%i10) float(%);
(%o10) [42.0, 1.234, 1.414213562373095, 3.141592653589793, 0.01,
                                                     0.01, 0.01]
(%i11) readline(s);
(%o11)                               false
(%i12) close(s)$
@end example

La funci@'on @code{readline} devuelve @code{false} cuando se alcanza el
final del fichero.


@node Funciones y variables para entrada y salida, Funciones y variables para caracteres, Introducci@'on al procesamiento de cadenas, stringproc
@section Funciones y variables para entrada y salida

Ejemplo: 

@c ===beg===
@c s: openw("E:/file.txt");
@c control: 
@c  "~2tAn atom: ~20t~a~%~2tand a list: ~20t~@{~r ~@}~%~2tand an integer: ~20t~d~%"$
@c printf( s,control, 'true,[1,2,3],42 )$
@c close(s);
@c s: openr("E:/file.txt");
@c while stringp( tmp:readline(s) ) do print(tmp)$
@c close(s)$
@c ===end===
@example
(%i1) s: openw("E:/file.txt");
(%o1)                     #<output stream E:/file.txt>
(%i2) control: 
"~2tAn atom: ~20t~a~%~2tand a list: ~20t~@{~r ~@}~%~2t\
           and an integer: ~20t~d~%"$
(%i3) printf( s,control, 'true,[1,2,3],42 )$
(%o3)                                false
(%i4) close(s);
(%o4)                                true
(%i5) s: openr("E:/file.txt");
(%o5)                     #<input stream E:/file.txt>
(%i6) while stringp( tmp:readline(s) ) do print(tmp)$
  An atom:          true 
  and a list:       one two three  
  and an integer:   42 
(%i7) close(s)$
@end example

@deffn {Funci@'on} close (@mvar{stream}) 
Cierra el flujo de datos @mvar{stream} y devuelve @code{true} si @mvar{stream} hab@'{@dotless{i}}a
sido abierto. 

@end deffn

@deffn {Funci@'on} flength (@mvar{stream})
Devuelve el n@'umero de elementos en el flujo de datos @mvar{stream}. 

@end deffn

@deffn {Funci@'on} fposition (@mvar{stream})
@deffnx {Funci@'on} fposition (@mvar{stream}, @mvar{pos})
Devuelve la posici@'on actual en el flujo de datos @mvar{stream} si no se utiliza @mvar{pos}.
Si se utiliza @mvar{pos}, @code{fposition} ajusta la posici@'on en @mvar{stream}. 
El argumento @mvar{pos} debe ser un n@'umero positivo,
ocupando el primer elemento en @mvar{stream} la posici@'on 1.

@end deffn

@deffn {Funci@'on} freshline () 
@deffnx {Funci@'on} freshline (@mvar{stream}) 
Escribe una nueva l@'{@dotless{i}}nea (en el flujo de datos @mvar{stream})
si la posici@'on actual no corresponde al inicio de la l@'{@dotless{i}}nea.

V@'ease tambi@'en @code{newline}.

@end deffn

@deffn {Funci@'on} newline () 
@deffnx {Funci@'on} newline (@mvar{stream}) 
Escribe una nueva l@'{@dotless{i}}nea (en el flujo de datos  @mvar{stream}).

V@'ease @code{sprint} para un ejemplo de uso de @code{newline()}.

N@'otese que hay algunos casos en los que @code{newline} no trabaja
seg@'un lo esperado.

@end deffn

@deffn {Funci@'on} opena (@mvar{file}) 
Devuelve un flujo de datos al fichero @mvar{file}.
Si se abre un fichero ya existente, @code{opena} a@~nade elementos al final
del fichero.

@end deffn

@deffn {Funci@'on} openr (@mvar{file}) 
Devuelve un flujo de datos de entrada al fichero @mvar{file}.
Si @mvar{file} no existe, ser@'a creado.
@end deffn

@deffn {Funci@'on} openw (@mvar{file}) 
Devuelve un flujo de datos de salida al fichero @mvar{file}.
Si @mvar{file} no existe, ser@'a creado.
Si se abre un fichero ya existente, @code{openw} lo modifica 
borrando el contenido anterior.
@end deffn

@deffn {Funci@'on} printf (@mvar{dest}, @mvar{string})
@deffnx {Funci@'on} printf (@mvar{dest}, @mvar{string}, @mvar{expr_1}, ..., @mvar{expr_n})
Pone al alcance de Maxima la funci@'on FORMAT de Common Lisp.

V@'eanse las referencias de Lisp para m@'as informaci@'on.

La siguiente descripci@'on y los ejemplos pueden dar una idea de c@'omo usar @code{printf}.

@example
   ~%       nueva l@'{@dotless{i}}nea
   ~&       l@'{@dotless{i}}nea de refresco
   ~t       tabulaci@'on
   ~$       moneda
   ~d       entero en base decimal
   ~b       entero en base binaria
   ~o       entero en base octal
   ~x       entero en base hexadecimal
   ~br      entero en base b
   ~r       deletrea un entero
   ~p       plural
   ~f       decimal en coma flotante
   ~e       notaci@'on cient@'{@dotless{i}}fica
   ~g       ~f o ~e, dependiendo de la magnitud
   ~h       n@'umero decimal grande (@i{bigfloat})
   ~a       utiliza la funci@'on @code{string} de Maxima
   ~s       como ~a, pero las cadenas se devuelven entre "comillas dobles"
   ~~       ~
   ~<       justificaci@'on, ~> termina
   ~(       conversor may@'uscula/min@'uscula, ~) termina 
   ~[       selecci@'on, ~] termina 
   ~@{       iteraci@'on, ~@} termina
@end example

La directiva @code{~[} est@'a indexada a partir del cero.
T@'engase en cuenta que la directiva @code{~*} no est@'a soportada.

@c ===beg===
@c printf( false, "~a ~a ~4f ~a ~@@r", 
@c         "String",sym,bound,sqrt(12),144), bound = 1.234;
@c printf( false,"~@{~a ~@}",["one",2,"THREE"] );
@c printf( true,"~@{~@{~9,1f ~@}~%~@}",mat ),
@c         mat = args( matrix([1.1,2,3.33],[4,5,6],[7,8.88,9]) )$
@c control: "~:(~r~) bird~p ~[is~;are~] singing."$
@c printf( false,control, n,n,if n=1 then 0 else 1 ), n=2;
@c ===end===
@example
(%i1) printf( false, "~a ~a ~4f ~a ~@@r", 
              "String",sym,bound,sqrt(12),144), bound = 1.234;
(%o1)                 String sym 1.23 2*sqrt(3) CXLIV
(%i2) printf( false,"~@{~a ~@}",["one",2,"THREE"] );
(%o2)                          one 2 THREE 
(%i3) printf( true,"~@{~@{~9,1f ~@}~%~@}",mat ),
              mat = args( matrix([1.1,2,3.33],[4,5,6],[7,8.88,9]) )$
      1.1       2.0       3.3 
      4.0       5.0       6.0 
      7.0       8.9       9.0 
(%i4) control: "~:(~r~) bird~p ~[is~;are~] singing."$
(%i5) printf( false,control, n,n,if n=1 then 0 else 1 ), n=2;
(%o5)                    Two birds are singing.
@end example

Si @mvar{dest} es un flujo de datos o @code{true}, entonces @code{printf}
devuelve @code{false}. En otro caso, @code{printf} devuelve una cadena
con la salida.
@end deffn

@deffn {Funci@'on} readline (@mvar{stream}) 
Devuelve una cadena con los caracteres desde la posici@'on actual en el flujo
de datos @mvar{stream} hasta el final de la l@'{@dotless{i}}nea, o @code{false}
si est@'a al final del fichero.
@end deffn

@deffn {Funci@'on} sprint (@mvar{expr_1}, ..., @mvar{expr_n})
Eval@'ua y muestra sus argumentos uno tras otro en un rengl@'on comenzando por 
su extremo izquierdo. 

La funci@'on @code{newline()}, que se carga autom@'aticamente desde @code{stringproc.lisp},
puede ser de utilidad si se quiere intercalar un salto de l@'{@dotless{i}}nea.

@c ===beg===
@c for n:0 thru 19 do sprint( fib(n) )$
@c for n:0 thru 22 do ( 
@c    sprint(fib(n)), if mod(n,10)=9 then newline() )$
@c ===end===
@example
(%i1) for n:0 thru 19 do sprint( fib(n) )$
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181
(%i2) for n:0 thru 22 do ( 
         sprint(fib(n)), if mod(n,10)=9 then newline() )$
0 1 1 2 3 5 8 13 21 34 
55 89 144 233 377 610 987 1597 2584 4181 
6765 10946 17711 
@end example

@end deffn

@node Funciones y variables para caracteres, Funciones y variables para cadenas, Funciones y variables para entrada y salida, stringproc
@section Funciones y variables para caracteres

@deffn {Funci@'on} alphacharp (@mvar{char})
Devuelve @code{true} si @mvar{char} es una car@'acter alfab@'etico.
@end deffn

@deffn {Funci@'on} alphanumericp (@mvar{char}) 
Devuelve @code{true} si @mvar{char} es una car@'acter alfab@'etico o
un d@'{@dotless{i}}gito.
@end deffn

@deffn {Funci@'on} ascii (@mvar{int})
Devuelve el car@'acter correspondiente al n@'umero ASCII @mvar{int},
debiendo ser @math{-1 < int < 256}.

@c ===beg===
@c for n from 0 thru 255 do ( 
@c   tmp: ascii(n),
@c   if alphacharp(tmp) then sprint(tmp), if n=96 then newline() )$
@c ===end===
@example
(%i1) for n from 0 thru 255 do ( 
  tmp: ascii(n),
  if alphacharp(tmp) then sprint(tmp), if n=96 then newline() )$
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 
a b c d e f g h i j k l m n o p q r s t u v w x y z
@end example

@end deffn

@deffn {Funci@'on} cequal (@mvar{char_1}, @mvar{char_2})          
Devuelve @code{true} si @mvar{char_1} y @mvar{char_2} son el mismo car@'acter. 
@end deffn

@deffn {Funci@'on} cequalignore (@mvar{char_1}, @mvar{char_2})
Como @code{cequal}, pero ignora si las letras est@'an en may@'usculas o
min@'usculas.
@end deffn

@deffn {Funci@'on} cgreaterp (@mvar{char_1}, @mvar{char_2})    
Devuelve  @code{true} si el n@'umero ASCII de @mvar{char_1} es mayor que el 
de @mvar{char_2}. 
@end deffn

@deffn {Funci@'on} cgreaterpignore (@mvar{char_1}, @mvar{char_2})
Como @code{cgreaterp}, pero ignora si las letras est@'an en may@'usculas o
min@'usculas.
@end deffn

@deffn {Funci@'on} charp (@mvar{obj})
Devuelve @code{true} si @mvar{obj} es un car@'acter de Maxima.
@end deffn

@deffn {Funci@'on} cint (@mvar{char}) 
Devuelve el n@'umero ASCII de @mvar{char}.
@end deffn

@deffn {Funci@'on} clessp (@mvar{char_1}, @mvar{char_2})
Devuelve  @code{true} si el n@'umero ASCII de @mvar{char_1} es menor que el 
de @mvar{char_2}.  
@end deffn

@deffn {Funci@'on} clesspignore (@mvar{char_1}, @mvar{char_2})
Como @code{clessp}, pero ignora si las letras est@'an en may@'usculas o
min@'usculas.
@end deffn

@deffn {Funci@'on} constituent (@mvar{char})
Devuelve @code{true} si @mvar{char} es un car@'acter gr@'afico y no el
car@'acter espacio. Un car@'acter gr@'afico es el que se puede ver y con un
espacio a@~nadido; @code{constituent} est@'a definido por Paul Graham,
ANSI Common Lisp, 1996, page 67.

@c ===beg===
@c for n from 0 thru 255 do ( 
@c    tmp: ascii(n), if constituent(tmp) then sprint(tmp) )$
@c ===end===
@example
(%i1) for n from 0 thru 255 do ( 
tmp: ascii(n), if constituent(tmp) then sprint(tmp) )$
! " #  %  ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ? @@ A B
C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ] ^ _ ` a b c
d e f g h i j k l m n o p q r s t u v w x y z @{ | @} ~
@end example

@end deffn

@deffn {Funci@'on} cunlisp (@mvar{lisp_char}) 
Convierte un car@'acter Lisp en uno de Maxima. El uso de esta funci@'on por
parte del usuario no ser@'a necesario.
@end deffn

@deffn {Funci@'on} digitcharp (@mvar{char})    
Devuelve @code{true} si @mvar{char} es un d@'{@dotless{i}}gito. 
@end deffn

@deffn {Funci@'on} lcharp (@mvar{obj}) 
Devuelve @code{true} si @mvar{obj} es un car@'acter de Lisp.
El uso de esta funci@'on por parte del usuario no ser@'a necesario.
@end deffn

@deffn {Funci@'on} lowercasep (@mvar{char})  
Devuelve  @code{true} si @mvar{char} es un car@'acter en min@'uscula.
@end deffn

@defvr {Variable} newline 
El car@'acter de nueva l@'{@dotless{i}}nea. 
@end defvr

@defvr {Variable} space   
El car@'acter de espacio.
@end defvr

@defvr {Variable} tab     
El car@'acter de tabulaci@'on.
@end defvr

@deffn {Funci@'on} uppercasep (@mvar{char})  
Devuelve @code{true} si @mvar{char} es un car@'acter en may@'uscula.
@end deffn

@node Funciones y variables para cadenas,  , Funciones y variables para caracteres, stringproc
@section Funciones y variables para cadenas

@deffn {Funci@'on} stringp (@mvar{obj}) 
Devuelve @code{true} si @mvar{obj} es una cadena.
V@'ease un ejemplo en la introducci@'on.
@end deffn

@deffn {Funci@'on} charat (@mvar{string}, @mvar{n})
Devuelve el @mvar{n}-@'esimo car@'acter de @mvar{string}.
Al primer car@'acter de @mvar{string} le corresponde @mvar{n} = 1.

@c ===beg===
@c charat("Lisp",1);
@c ===end===
@example
(%i1) charat("Lisp",1);
(%o1)                           L
@end example

@end deffn

@deffn {Funci@'on} charlist (@mvar{string}) 
Devuelve una lista con todos los caracteres de @mvar{string}. 

@c ===beg===
@c charlist("Lisp");
@c %[1];
@c ===end===
@example
(%i1) charlist("Lisp");
(%o1)                     [L, i, s, p]
(%i2) %[1];
(%o2)                           L
@end example

@end deffn

@deffn {Funci@'on} eval_string (@mvar{str})
Analiza sint@'acticamente la cadena @mvar{str} como una expresi@'on de Maxima
y la eval@'ua. La cadena @mvar{str} puede terminar o no con cualquiera de los 
s@'{@dotless{i}}mbolos de final de sentencia (d@'olar @code{$} o punto y coma @code{;}).
S@'olo se analiza la primera expresi@'on si hay m@'as de una.

Se emitir@'a un mensaje de error si @mvar{str} no es una cadena.

Ejemplos:

@c ===beg===
@c eval_string ("foo: 42; bar: foo^2 + baz");
@c eval_string ("(foo: 42, bar: foo^2 + baz)");
@c ===end===
@example
(%i1) eval_string ("foo: 42; bar: foo^2 + baz");
(%o1)                       42
(%i2) eval_string ("(foo: 42, bar: foo^2 + baz)");
(%o2)                   baz + 1764
@end example

V@'ease tambi@'en @code{parse_string}.
@end deffn

@deffn {Funci@'on} parse_string (@mvar{str})
Analiza sint@'acticamente la cadena @mvar{str} como una expresi@'on de Maxima,
pero no la eval@'ua. La cadena @mvar{str} puede terminar o no con cualquiera de los 
s@'{@dotless{i}}mbolos de final de sentencia (d@'olar @code{$} o punto y coma @code{;}).
S@'olo se analiza la primera expresi@'on si hay m@'as de una.

Se emitir@'a un mensaje de error si @mvar{str} no es una cadena.

Ejemplos:

@c ===beg===
@c parse_string ("foo: 42; bar: foo^2 + baz");
@c parse_string ("(foo: 42, bar: foo^2 + baz)");
@c ===end===
@example
(%i1) parse_string ("foo: 42; bar: foo^2 + baz");
(%o1)                    foo : 42
(%i2) parse_string ("(foo: 42, bar: foo^2 + baz)");
                                   2
(%o2)          (foo : 42, bar : foo  + baz)
@end example

V@'ease tambi@'en @code{eval_string}.
@end deffn

@deffn {Funci@'on} scopy (@mvar{string}) 
Devuelve una copia nueva de la cadena @mvar{string}. 
@end deffn

@deffn {Funci@'on} sdowncase (@mvar{string}) 
@deffnx {Funci@'on} sdowncase (@mvar{string}, @mvar{start}) 
@deffnx {Funci@'on} sdowncase (@mvar{string}, @mvar{start}, @mvar{end}) 
Convierte caracteres en min@'uscula a may@'uscula. V@'ease tambi@'en @code{supcase}.
@end deffn

@deffn {Funci@'on} sequal (@mvar{string_1}, @mvar{string_2}) 
Devuelve @code{true} si @mvar{string_1} y @mvar{string_2} son dos cadenas de caracteres iguales. 

@end deffn

@deffn {Funci@'on} sequalignore (@mvar{string_1}, @mvar{string_2})
Igual que @code{sequal} pero no diferencia entre min@'usculas y may@'usculas.. 

@end deffn

@deffn {Funci@'on} sexplode (@mvar{string})
El nombre @code{sexplode} es un seud@'onimo de la funci@'on @code{charlist}.

@end deffn

@deffn {Funci@'on} simplode (@mvar{list})  
@deffnx {Funci@'on} simplode (@mvar{list}, @mvar{delim})  
La funci@'on @code{simplode} admite como entrada una lista de expresiones para
luego convertirla en una cadena de caracteres. Si no se utiliza la opci@'on @mvar{delim}
para indicar el delimitador, entonces @code{simplode} no 
hace uso de ninguno. El valor de @mvar{delim} puede ser cualquier cadena.

@c ===beg===
@c simplode(["xx[",3,"]:",expand((x+y)^3)]);
@c simplode( sexplode("stars")," * " );
@c simplode( ["One","more","coffee."]," " );
@c ===end===
@example
(%i1) simplode(["xx[",3,"]:",expand((x+y)^3)]);
(%o1)             xx[3]:y^3+3*x*y^2+3*x^2*y+x^3
(%i2) simplode( sexplode("stars")," * " );
(%o2)                   s * t * a * r * s
(%i3) simplode( ["One","more","coffee."]," " );
(%o3)                   One more coffee.
@end example

@end deffn

@deffn {Funci@'on} sinsert (@mvar{seq}, @mvar{string}, @mvar{pos}) 
Devuelve la concatenaci@'on de las cadenas @code{substring (@mvar{string}, 1, @mvar{pos} - 1)},
@mvar{seq} y @code{substring (@mvar{string}, @mvar{pos})}.
N@'otese que al primer car@'acter de @mvar{string} le corresponde la posici@'on 1.

@c ===beg===
@c s: "A submarine."$
@c concat( substring(s,1,3),"yellow ",substring(s,3) );
@c sinsert("hollow ",s,3);
@c ===end===
@example
(%i1) s: "A submarine."$
(%i2) concat( substring(s,1,3),"yellow ",substring(s,3) );
(%o2)                  A yellow submarine.
(%i3) sinsert("hollow ",s,3);
(%o3)                  A hollow submarine.
@end example

@end deffn

@deffn {Funci@'on} sinvertcase (@mvar{string})  
@deffnx {Funci@'on} sinvertcase (@mvar{string}, @mvar{start})  
@deffnx {Funci@'on} sinvertcase (@mvar{string}, @mvar{start}, @mvar{end})  
Devuelve la misma cadena @mvar{string} pero con todos sus caracteres desde la
posici@'on @mvar{start} hasta @mvar{end} invertidos, esto es, las
may@'usculas se convierten en min@'usculas y @'estas en may@'usculas.
Si no se incluye el argumento @mvar{end}, se invierten todos los caracteres 
desde @mvar{start} hasta el final de la cadena.


@c ===beg===
@c sinvertcase("sInvertCase");
@c ===end===
@example
(%i1) sinvertcase("sInvertCase");
(%o1)                      SiNVERTcASE
@end example

@end deffn

@deffn {Funci@'on} slength (@mvar{string}) 
Devuelve el n@'umero de caracteres de @mvar{string}. 

@end deffn

@deffn {Funci@'on} smake (@mvar{num}, @mvar{char}) 
Construye una cadena de longitud @mvar{num} con todos sus
caracteres iguales a @mvar{char}. 

@c ===beg===
@c smake(3,"w");
@c ===end===
@example
(%i1) smake(3,"w");
(%o1)                          www
@end example

@end deffn

@deffn {Funci@'on} smismatch (@mvar{string_1}, @mvar{string_2}) 
@deffnx {Funci@'on} smismatch (@mvar{string_1}, @mvar{string_2}, @mvar{test}) 
Devuelve la posici@'on del primer car@'acter de @mvar{string_1} distinto del
correpondiente a @mvar{string_2}. La respuesta ser@'a @code{false} si no existe
tal car@'acter. Por defecto, la funci@'on de comparaci@'on es @code{sequal}.
Si se quiere ignorar la diferencia entre may@'usculas y min@'usculas, h@'agase uso de 
@code{sequalignore} para el argumento @mvar{test}.

@c ===beg===
@c smismatch("seven","seventh");
@c ===end===
@example
(%i1) smismatch("seven","seventh");
(%o1)                           6
@end example

@end deffn

@deffn {Funci@'on} split (@mvar{string})  
@deffnx {Funci@'on} split (@mvar{string}, @mvar{delim})  
@deffnx {Funci@'on} split (@mvar{string}, @mvar{delim}, @mvar{multiple}) 
Devuelve la lista de todos los lexemas (@i{tokens}) de @mvar{string}.
La funci@'on @code{split} utiliza @mvar{delim} como delimitador, y en caso
de no ser utilizado este argumento, ser@'a utilizado el espacio en blanco
como delimitador por defecto. El argumento @mvar{multiple} es una variable
booleana con valor @code{true} por defecto. Los delimitadores m@'ultiples 
se leen como uno solo, lo que resulta de utilidad si las tabulaciones son 
almacenadas como secuencias de espacios en blanco. Si a @mvar{multiple} se 
le asigna el valor @code{false}, se consirarar@'an todos los delimitadores.

@c ===beg===
@c split("1.2   2.3   3.4   4.5");
@c split("first;;third;fourth",";",false);
@c ===end===
@example
(%i1) split("1.2   2.3   3.4   4.5");
(%o1)                 [1.2, 2.3, 3.4, 4.5]
(%i2) split("first;;third;fourth",";",false);
(%o2)               [first, , third, fourth]
@end example

@end deffn

@deffn {Funci@'on} sposition (@mvar{char}, @mvar{string}) 
Devuelve la posici@'on del primer car@'acter de @mvar{string} que
coincide con @mvar{char}. Al primer car@'acter de @mvar{string}
le corresponde la posici@'on 1.
Para cuando se quiera ignorar la diferencia entre may@'usculas y 
min@'usculas, v@'ease @mvar{ssearch}.
@end deffn

@deffn {Funci@'on} sremove (@mvar{seq}, @mvar{string})  
@deffnx {Funci@'on} sremove (@mvar{seq}, @mvar{string}, @mvar{test})  
@deffnx {Funci@'on} sremove (@mvar{seq}, @mvar{string}, @mvar{test}, @mvar{start})  
@deffnx {Funci@'on} sremove (@mvar{seq}, @mvar{string}, @mvar{test}, @mvar{start}, @mvar{end})
Devuelve la cadena @mvar{string} pero sin las subcadenas que coinciden con @mvar{seq}.
La funci@'on de comparaci@'on por defecto es @code{sequal}.
Si se quiere ignorar la diferencia entre may@'usculas y min@'usculas, h@'agase uso de 
@code{sequalignore} para el argumento @mvar{test}.
Util@'{@dotless{i}}cense @mvar{start} y @mvar{end} para acotar la b@'usqueda.
Al primer car@'acter de @mvar{string} le corresponde la posici@'on 1.

@c ===beg===
@c sremove("n't","I don't like coffee.");
@c sremove ("DO ",%,'sequalignore);
@c ===end===
@example
(%i1) sremove("n't","I don't like coffee.");
(%o1)                   I do like coffee.
(%i2) sremove ("DO ",%,'sequalignore);
(%o2)                    I like coffee.
@end example

@end deffn

@deffn {Funci@'on} sremovefirst (@mvar{seq}, @mvar{string})  
@deffnx {Funci@'on} sremovefirst (@mvar{seq}, @mvar{string}, @mvar{test})  
@deffnx {Funci@'on} sremovefirst (@mvar{seq}, @mvar{string}, @mvar{test}, @mvar{start})  
@deffnx {Funci@'on} sremovefirst (@mvar{seq}, @mvar{string}, @mvar{test}, @mvar{start}, @mvar{end})  
Act@'ua de forma similar a la funci@'on @code{sremove}, pero s@'olo elimina
la primera aparici@'on de la subcadena @code{seq}.

@end deffn

@deffn {Funci@'on} sreverse (@mvar{string}) 
Devuelve una cadena con todos los caracteres de @mvar{string} en orden inverso.

@end deffn

@deffn {Funci@'on} ssearch (@mvar{seq}, @mvar{string})  
@deffnx {Funci@'on} ssearch (@mvar{seq}, @mvar{string}, @mvar{test})  
@deffnx {Funci@'on} ssearch (@mvar{seq}, @mvar{string}, @mvar{test}, @mvar{start})  
@deffnx {Funci@'on} ssearch (@mvar{seq}, @mvar{string}, @mvar{test}, @mvar{start}, @mvar{end})
Devuelve la posici@'on de la primera subcadena de @mvar{string} que coincide con
la cadena @mvar{seq}.
La funci@'on de comparaci@'on por defecto es @code{sequal}.
Si se quiere ignorar la diferencia entre may@'usculas y min@'usculas, h@'agase uso de 
@code{sequalignore} para el argumento @mvar{test}.
Util@'{@dotless{i}}cense @mvar{start} y @mvar{end} para acotar la b@'usqueda.
Al primer car@'acter de @mvar{string} le corresponde la posici@'on 1.

@example
(%i1) ssearch("~s","~@{~S ~@}~%",'sequalignore);
(%o1)                                  4
@end example

@end deffn

@deffn {Funci@'on} ssort (@mvar{string}) 
@deffnx {Funci@'on} ssort (@mvar{string}, @mvar{test}) 
Devuelve una cadena con todos los caracteres de @mvar{string} en un orden
tal que no haya dos caracteres sucesivos @mvar{c} y @mvar{d} que verifiquen
que @code{test (@mvar{c}, @mvar{d})} sea igual @code{false} y 
@code{test (@mvar{d}, @mvar{c})} igual a @code{true}.
La funci@'on de comparaci@'on @mvar{test} por defecto es  @mvar{clessp}, siendo
el conjunto de posibles valores para este argumento 
@code{@{clessp, clesspignore, cgreaterp, cgreaterpignore, cequal, cequalignore@}}.

@c ===beg===
@c ssort("I don't like Mondays.");
@c ssort("I don't like Mondays.",'cgreaterpignore);
@c ===end===
@example
(%i1) ssort("I don't like Mondays.");
(%o1)                    '.IMaddeiklnnoosty
(%i2) ssort("I don't like Mondays.",'cgreaterpignore);
(%o2)                 ytsoonnMlkIiedda.'   
@end example

@end deffn

@deffn {Funci@'on} ssubst (@mvar{new}, @mvar{old}, @mvar{string}) 
@deffnx {Funci@'on} ssubst (@mvar{new}, @mvar{old}, @mvar{string}, @mvar{test}) 
@deffnx {Funci@'on} ssubst (@mvar{new}, @mvar{old}, @mvar{string}, @mvar{test}, @mvar{start}) 
@deffnx {Funci@'on} ssubst (@mvar{new}, @mvar{old}, @mvar{string}, @mvar{test}, @mvar{start}, @mvar{end}) 
Devuelve una cadena similar a @mvar{string} pero en la que aquellas subcadenas 
coincidentes con @mvar{old} han sido sustituidas por @mvar{new}. Las subcadenas
@mvar{old} y @mvar{new} no necesitan ser de la misma longitud. 
La funci@'on de comparaci@'on por defecto es @code{sequal}.
Si se quiere ignorar la diferencia entre may@'usculas y min@'usculas durante
la b@'usqueda de @mvar{old}, h@'agase uso de 
@code{sequalignore} para el argumento @mvar{test}.
Util@'{@dotless{i}}cense @mvar{start} y @mvar{end} para acotar la b@'usqueda.
Al primer car@'acter de @mvar{string} le corresponde la posici@'on 1.

@c ===beg===
@c ssubst("like","hate","I hate Thai food. I hate green tea.");
@c ssubst("Indian","thai",%,'sequalignore,8,12);
@c ===end===
@example
(%i1) ssubst("like","hate","I hate Thai food. I hate green tea.");
(%o1)          I like Thai food. I like green tea.
(%i2) ssubst("Indian","thai",%,'sequalignore,8,12);
(%o2)         I like Indian food. I like green tea.
@end example

@end deffn

@deffn {Funci@'on} ssubstfirst (@mvar{new}, @mvar{old}, @mvar{string}) 
@deffnx {Funci@'on} ssubstfirst (@mvar{new}, @mvar{old}, @mvar{string}, @mvar{test}) 
@deffnx {Funci@'on} ssubstfirst (@mvar{new}, @mvar{old}, @mvar{string}, @mvar{test}, @mvar{start}) 
@deffnx {Funci@'on} ssubstfirst (@mvar{new}, @mvar{old}, @mvar{string}, @mvar{test}, @mvar{start}, @mvar{end}) 
Act@'ua de forma similar a la funci@'on @code{subst}, pero s@'olo hace
la sustituci@'on en la primera coincidencia con @mvar{old}. 
@end deffn

@deffn {Funci@'on} strim (@mvar{seq},@mvar{string}) 
Devuelve la cadena @mvar{string} pero recortando los caracteres
de @mvar{seq} que tuviese en sus extremos.

@c ===beg===
@c "/* comment */"$
@c strim(" /*",%);
@c slength(%);
@c ===end===
@example
(%i1) "/* comment */"$
(%i2) strim(" /*",%);
(%o2)                        comment
(%i3) slength(%);
(%o3)                           7
@end example

@end deffn

@deffn {Funci@'on} striml (@mvar{seq}, @mvar{string}) 
Act@'ua de forma similar a @code{strim}, pero s@'olo recorta
en el extremo final de @mvar{string}.
@end deffn

@deffn {Funci@'on} strimr (@mvar{seq}, @mvar{string}) 
Act@'ua de forma similar a @code{strim}, pero s@'olo recorta
en el extremo inicial de @mvar{string}.
@end deffn

@deffn {Funci@'on} substring (@mvar{string}, @mvar{start})
@deffnx {Funci@'on} substring (@mvar{string}, @mvar{start}, @mvar{end}) 
Devuelve la subcadena de @mvar{string} que comienza en la posici@'on
@mvar{start} y termina en la posici@'on @mvar{end}.
El car@'acter en la posici@'on @mvar{end} no se incluye.
En caso de no suministrarse el argumento @mvar{end}, la subcadena
se extender@'a hasta el final. 
Al primer car@'acter de @mvar{string} le corresponde la posici@'on 1.

@c ===beg===
@c substring("substring",4);
@c substring(%,4,6);
@c ===end===
@example
(%i1) substring("substring",4);
(%o1)                        string
(%i2) substring(%,4,6);
(%o2)                          in
@end example


@end deffn

@deffn {Funci@'on} supcase (@mvar{string}) 
@deffnx {Funci@'on} supcase (@mvar{string}, @mvar{start}) 
@deffnx {Funci@'on} supcase (@mvar{string}, @mvar{start}, @mvar{end}) 
Devuelve la cadena @mvar{string} con todos sus caracteres entre las posiciones
@mvar{start} y @mvar{end} en min@'uscula transformados a may@'uscula.
En caso de no suministrarse el argumento @mvar{end}, los cambios
se extender@'an hasta el final.

@c ===beg===
@c supcase("english",1,2);
@c ===end===
@example
(%i1) supcase("english",1,2);
(%o1)                        English
@end example

@end deffn

@deffn {Funci@'on} tokens (@mvar{string}) 
@deffnx {Funci@'on} tokens (@mvar{string}, @mvar{test}) 
Devuelve la lista de todos los lexemas (@i{tokens}) de @mvar{string}.
Los lexemas son subcadenas cuyos caracteres satisfacen la  condici@'on @mvar{test}.
Si no se suministra el argumento @mvar{test}, se utilizar@'a la condici@'on
@mvar{constituent}, siendo el conjunto de las otras alternativas
@code{@{constituent, alphacharp, digitcharp, lowercasep, uppercasep, charp, characterp, alphanumericp@}}.

@c ===beg===
@c tokens("24 October 2005");
@c tokens("05-10-24",'digitcharp);
@c map(parse_string,%);
@c ===end===
@example
(%i1) tokens("24 October 2005");
(%o1)                  [24, October, 2005]
(%i2) tokens("05-10-24",'digitcharp);
(%o2)                     [05, 10, 24]
(%i3) map(parse_string,%);
(%o3)                      [5, 10, 24]
@end example

@end deffn
