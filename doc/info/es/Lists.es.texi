@c English version 2011-12-03
@page
@node Listas, Arrays, Constantes, Tipos de datos y estructuras
@section Listas

@menu
* Introducci@'on a las listas::       
* Funciones y variables para listas::       
@end menu

@node Introducci@'on a las listas, Funciones y variables para listas, Listas, Listas
@subsection Introducci@'on a las listas

Las listas son bloques de construcci@'on b@'asica para Maxima y Lisp. Todos los tipos de datos
diferentes a los arreglos, tablas mixtas o n@'umeros son representados como listas Lisp,
estas listas Lisp tienen la forma

@example
((MPLUS) $A 2)
@end example

@noindent
para indicar la expresi@'on @code{a+2}. Al nivel de Maxima se observar@'a
la notaci@'on infija @code{a+2}. Maxima tambi@'en tiene listas con el formato

@example
[1, 2, 7, x+y]
@end example

@noindent
para una lista de 4 elementos. Internamente esto se corresponde con una lista Lisp
de la forma

@example
((MLIST) 1  2  7  ((MPLUS)  $X $Y ))
@end example

@noindent
El elemento que denota el tipo de expresi@'on en Maxima es tambi@'en una lista, la cual tras ser analizada y simplificada tomar@'a la forma

@example
((MLIST SIMP) 1 2 7 ((MPLUS SIMP) $X $Y))
@end example


@node Funciones y variables para listas,  , Introducci@'on a las listas, Listas
@subsection Funciones y variables para listas



@defvr  {Operador} [
@defvrx {Operador} ]
@ifinfo
@fnindex Acotador de listas
@fnindex Operador para sub@'{@dotless{i}}ndices
@end ifinfo

@code{[} y @code{]} marcan, respectivamente, el comienzo y el final de una lista.

@code{[} y @code{]} tambi@'en se utilizan para indicar los sub@'{@dotless{i}}ndices
de una lista o de un array.

Ejemplos:

@c ===beg===
@c x: [a, b, c];
@c x[3];
@c array (y, fixnum, 3);
@c y[2]: %pi;
@c y[2];
@c z['foo]: 'bar;
@c z['foo];
@c g[k] := 1/(k^2+1);
@c g[10];
@c ===end===
@example
@group
(%i1) x: [a, b, c];
(%o1)                       [a, b, c]
@end group
@group
(%i2) x[3];
(%o2)                           c
@end group
@group
(%i3) array (y, fixnum, 3);
(%o3)                           y
@end group
@group
(%i4) y[2]: %pi;
(%o4)                          %pi
@end group
@group
(%i5) y[2];
(%o5)                          %pi
@end group
@group
(%i6) z['foo]: 'bar;
(%o6)                          bar
@end group
@group
(%i7) z['foo];
(%o7)                          bar
@end group
@group
(%i8) g[k] := 1/(k^2+1);
                                  1
(%o8)                     g  := ------
                           k     2
                                k  + 1
@end group
@group
(%i9) g[10];
                                1
(%o9)                          ---
                               101
@end group
@end example

@end defvr




@deffn {Funci@'on} append (@mvar{lista_1}, ..., @mvar{lista_n})

Devuelve una lista cuyos elementos son los de la lista @mvar{lista_1} seguidos de los de @mvar{lista_2}, ...  La funci@'on @code{append} tambi@'en opera con expresiones generales, como la llamada @code{append (f(a,b), f(c,d,e));}, de la que se obtiene @code{f(a,b,c,d,e)}.

Tecl@'eese @code{example(append);} para ver un ejemplo.

@end deffn

@deffn {Funci@'on} assoc (@mvar{clave}, @mvar{lista}, @mvar{valor_por_defecto})
@deffnx {Function} assoc (@mvar{clave}, @mvar{lista})

Esta funci@'on busca la @mvar{clave} en el lado derecho de la  @mvar{lista}, la cual es de la forma @code{[x,y,z,...]}, donde cada elemento  es una expresi@'on formada por un operador binario y dos elementos. Por ejemplo, @code{x=1}, @code{2^3}, @code{[a,b]} etc.  La @mvar{clave} se compara con el primer operando. La funci@'on @code{assoc} devuelve el segundo operando si se encuentra con que la @code{clave} coincide.  Si la @code{clave} no coincide entonces devuelve el valor @mvar{valor_por_defecto}. El argumento @mvar{valor_por_defecto} es opcional; en caso de no estar presente, se devolver@'a @code{false}.

@end deffn


@deffn {Funci@'on} cons (@mvar{expr}, @mvar{lista})

Devuelve una nueva lista en la que el elemento @mvar{expr} ocupa la primera posici@'on, seguido de los elementos de @mvar{lista}. La funci@'on  @code{cons} tambi@'en opera con otro tipo de expresiones, como  @code{cons(x, f(a,b,c));}  ->  @code{f(x,a,b,c)}.

@end deffn

@deffn {Funci@'on} copylist (@mvar{lista})

Devuelve una copia de la @mvar{lista}.

@end deffn


@deffn {Funci@'on} create_list (@mvar{form}, @mvar{x_1}, @mvar{list_1}, ..., @mvar{x_n}, @mvar{list_n})
Crea una lista mediante la evaluaci@'on de @mvar{form} con @mvar{x_1} tomando cada uno de los
valores de @mvar{list_1}, para cada uno de estos valores liga @mvar{x_2} con cada elemento de 
@mvar{list_2}, .... El n@'umero de elementos en el resultado ser@'a el producto del n@'umero de elementos
en cada lista. Cada variable @mvar{x_i} debe ser un s@'{@dotless{i}}mbolo y no ser@'a evaluado.
La lista de argumentos ser@'a evaluada una vez al comienzo de la iteraci@'on.

Ejemplos:

@c ===beg===
@c create_list (x^i, i, [1, 3, 7]);
@c ===end===
@example
@group
(%i1) create_list (x^i, i, [1, 3, 7]);
                                3   7
(%o1)                      [x, x , x ]
@end group
@end example

@noindent
Con una doble iteraci@'on:

@c ===beg===
@c create_list ([i, j], i, [a, b], j, [e, f, h]);
@c ===end===
@example
@group
(%i1) create_list ([i, j], i, [a, b], j, [e, f, h]);
(%o1)   [[a, e], [a, f], [a, h], [b, e], [b, f], [b, h]]
@end group
@end example

En lugar de @mvar{list_i} se pueden suministrar dos argumentos cada uno de los cuales 
deber@'{@dotless{i}}a poder evaluarse a un n@'umero, los cuales ser@'an los l@'{@dotless{i}}mites inferior
y superior, ambos inclusive, para cada iteraci@'on.

@c ===beg===
@c create_list ([i, j], i, [1, 2, 3], j, 1, i);
@c ===end===
@example
@group
(%i1) create_list ([i, j], i, [1, 2, 3], j, 1, i);
(%o1)   [[1, 1], [2, 1], [2, 2], [3, 1], [3, 2], [3, 3]]
@end group
@end example

N@'otese que los l@'{@dotless{i}}mites o lista para la variable @code{j} pueden depender
del valor actual de @code{i}.
@end deffn


@deffn {Funci@'on} delete (@mvar{expr_1}, @mvar{expr_2})
@deffnx {Funci@'on} delete (@mvar{expr_1}, @mvar{expr_2}, @mvar{n})

@code{delete(@mvar{expr_1}, @mvar{expr_2})}
elimina de @mvar{expr_2} cualesquiera argumentos del operador
del nivel superior que sean iguales a @mvar{expr_1}.
N@'otese que los argumentos de las subexpresiones no se ven
afectados por esta funci@'on.

@mvar{expr_1} puede ser un @'atomo o una expresi@'on no
at@'omica. @mvar{expr_2} puede ser cualquier expresi@'on no
at@'omica. La funci@'on @code{delete} devuelve una
nueva expresi@'on sin modificar @mvar{expr_2}.

@code{delete(@mvar{expr_1}, @mvar{expr_2}, @mvar{n})}
elimina de @mvar{expr_2} los primeros @mvar{n} argumentos
del operador del nivel superior que sean iguales a @mvar{expr_1}.
Si hay menos de @mvar{n} argumentos iguales, entonces se
eliminan todos ellos.

Ejemplos:

Eliminando elementos de una lista.

@c ===beg===
@c delete (y, [w, x, y, z, z, y, x, w]);
@c ===end===
@example
@group
(%i1) delete (y, [w, x, y, z, z, y, x, w]);
(%o1)                  [w, x, z, z, x, w]
@end group
@end example

Eliminando t@'erminos de una suma.

@c ===beg===
@c delete (sin(x), x + sin(x) + y);
@c ===end===
@example
@group
(%i1) delete (sin(x), x + sin(x) + y);
(%o1)                         y + x
@end group
@end example

Eliminando factores de un producto.

@c ===beg===
@c delete (u - x, (u - w)*(u - x)*(u - y)*(u - z));
@c ===end===
@example
@group
(%i1) delete (u - x, (u - w)*(u - x)*(u - y)*(u - z));
(%o1)                (u - w) (u - y) (u - z)
@end group
@end example

Eliminando argumentos de una expresi@'on arbitraria.

@c ===beg===
@c delete (a, foo (a, b, c, d, a));
@c ===end===
@example
@group
(%i1) delete (a, foo (a, b, c, d, a));
(%o1)                     foo(b, c, d)
@end group
@end example

Limitando el n@'umero de argumentos a eliminar.

@c ===beg===
@c delete (a, foo (a, b, a, c, d, a), 2);
@c ===end===
@example
@group
(%i1) delete (a, foo (a, b, a, c, d, a), 2);
(%o1)                    foo(b, c, d, a)
@end group
@end example

Los argumentos se comparan respecto de "=".
Aquellos argumentos que verifiquen la condici@'on @code{equal},
pero no "=" no ser@'an eliminados.

@c ===beg===
@c [is (equal (0, 0)), is (equal (0, 0.0)), is (equal (0, 0b0))];
@c [is (0 = 0), is (0 = 0.0), is (0 = 0b0)];
@c delete (0, [0, 0.0, 0b0]);
@c is (equal ((x + y)*(x - y), x^2 - y^2));
@c is ((x + y)*(x - y) = x^2 - y^2);
@c delete ((x + y)*(x - y), [(x + y)*(x - y), x^2 - y^2]);
@c ===end===
@example
@group
(%i1) [is (equal (0, 0)), is (equal (0, 0.0)), is (equal (0, 0b0))];
rat: replaced 0.0 by 0/1 = 0.0
`rat' replaced 0.0B0 by 0/1 = 0.0B0
(%o1)                  [true, true, true]
@end group
@group
(%i2) [is (0 = 0), is (0 = 0.0), is (0 = 0b0)];
(%o2)                 [true, false, false]
@end group
@group
(%i3) delete (0, [0, 0.0, 0b0]);
(%o3)                     [0.0, 0.0b0]
@end group
@group
(%i4) is (equal ((x + y)*(x - y), x^2 - y^2));
(%o4)                         true
@end group
@group
(%i5) is ((x + y)*(x - y) = x^2 - y^2);
(%o5)                         false
@end group
@group
(%i6) delete ((x + y)*(x - y), [(x + y)*(x - y), x^2 - y^2]);
                              2    2
(%o6)                       [x  - y ]
@end group
@end example
@end deffn

@deffn {Funci@'on} eighth (@mvar{expr})

Devuelve el octavo elemento de la lista o expresi@'on @mvar{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} endcons (@mvar{expr}, @mvar{lista})

Devuelve una nueva lista formada por los elementos de @code{lista} seguidos de los de @mvar{expr}. La funci@'on @code{endcons} tambi@'en opera con expresiones generales, por ejemplo @code{endcons(x, f(a,b,c));}  ->  @code{f(a,b,c,x)}.

@end deffn

@deffn {Funci@'on} fifth (@mvar{expr})

Devuelve el quinto elemento de la lista o expresi@'on @mvar{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} first (@mvar{expr})

Devuelve la primera parte de @mvar{expr}, que puede consistir en el primer elemento de una lista, la primera fila de una matriz, el primer t@'ermino de una suma, etc. N@'otese que tanto @code{first} como sus funciones relacionadas, @code{rest} y @code{last}, operan sobre la forma en la que @mvar{expr} es mostrada por Maxima, no sobre la forma en la que es introducida la expresi@'on. Sin embargo, cuando la variable @code{inflag} toma el valor @code{true} estas funciones tendr@'an en cuenta el formato interno de @mvar{expr}. T@'engase en cuenta que el simplificador reordena las expresiones.  As@'{@dotless{i}}, @code{first(x+y)} devolver@'a @code{x} si @code{inflag} vale @code{true} y @code{y} cuando @code{inflag} tome el valor @code{false} (@code{first(y+x)} devuelve el mismo resultado). Las funciones @code{second} ... @code{tenth} devuelven desde el segundo hasta el d@'ecimo elemento del argumento de entrada.

@end deffn

@deffn {Funci@'on} fourth (@mvar{expr})

Devuelve el cuarto elemento de la lista o expresi@'on @mvar{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn




@deffn {Funci@'on} join (@mvar{l}, @mvar{m})
Crea una nueva lista con los elementos de las listas @mvar{l} y @mvar{m} alternados.
El resultado tiene como elementos @code{[@mvar{l}[1], @mvar{m}[1], @mvar{l}[2], @mvar{m}[2], ...]}.
Las listas @mvar{l} y @mvar{m} pueden contener cualquier tipo de elementos.

Si las listas son de diferente longitud, @code{join} ignora los elementos sobrantes de la lista m@'as larga.

Maxima da error si o bien @mvar{l} o @mvar{m} no son listas.

Ejemplos:

@c ===beg===
@c L1: [a, sin(b), c!, d - 1];
@c join (L1, [1, 2, 3, 4]);
@c join (L1, [aa, bb, cc, dd, ee, ff]);
@c ===end===
@example
@group
(%i1) L1: [a, sin(b), c!, d - 1];
(%o1)                [a, sin(b), c!, d - 1]
@end group
@group
(%i2) join (L1, [1, 2, 3, 4]);
(%o2)          [a, 1, sin(b), 2, c!, 3, d - 1, 4]
@end group
@group
(%i3) join (L1, [aa, bb, cc, dd, ee, ff]);
(%o3)        [a, aa, sin(b), bb, c!, cc, d - 1, dd]
@end group
@end example

@end deffn


@deffn {Funci@'on} last (@mvar{expr})

Devuelve la @'ultima parte (t@'ermino, fila, elemento, etc.) de @mvar{expr}.

@end deffn

@deffn {Funci@'on} length (@mvar{expr})

Devuelve (por defecto) el n@'umero de partes de que consta @mvar{expr} en la versi@'on correspondiente a la que muestra.  En el caso de listas, se devuelve el n@'umero de elementos, si se trata de matrices el n@'umero de filas y se se trata de sumas el n@'umero de t@'erminos o sumandos (v@'ease @code{dispform}).

La funci@'on @code{length} se ve afectada por el valor de la variable @code{inflag}.  As@'{@dotless{i}}, @code{length(a/(b*c));} devuelve 2 si @code{inflag} vale @code{false} (dando por hecho que @code{exptdispflag} vale @code{true}), pero devuelve 3 si @code{inflag} vale @code{true} (ya que la representaci@'on interna es @code{a*b^-1*c^-1}).

@end deffn

@defvr {Variable opcional} listarith
Valor por defecto: @code{true}

Cuando vale @code{false} provoca que no se realicen operaciones aritm@'eticas con listas;  cuando vale @code{true}, las operaciones con listas y matrices son contagiosas, en el sentido de que las listas se transforman en matrices, retornando resultados de este @'ultimo tipo. Sin embargo, operaciones que involucren listas con listas devolver@'an tambi@'en listas.

@end defvr

@deffn {Funci@'on} listp (@mvar{expr})

Devuelve el valor @code{true} si @mvar{expr} es una lista, y @code{false} en caso contrario.

@end deffn



@deffn  {Funci@'on} makelist ()
@deffnx {Funci@'on} makelist (@mvar{expr}, @mvar{n})
@deffnx {Funci@'on} makelist (@mvar{expr}, @mvar{i}, @mvar{i_max})
@deffnx {Funci@'on} makelist (@mvar{expr}, @mvar{i}, @mvar{i_0}, @mvar{i_max})
@deffnx {Funci@'on} makelist (@mvar{expr}, @mvar{i}, @mvar{i_0}, @mvar{i_max}, @mvar{step})
@deffnx {Funci@'on} makelist (@mvar{expr}, @mvar{x}, @mvar{list})

El primer formato, @code{makelist ()}, crea una lista vac@'{@dotless{i}}a. El
segundo formato, @code{makelist (@mvar{expr})}, crea una lista con @mvar{expr}
como @'unico elemento. @code{makelist (@mvar{expr}, @mvar{n})} crea una lista
de @mvar{n} elementos generados a partir de @mvar{expr}.

El formato m@'as general, @code{makelist (@mvar{expr}, @mvar{i}, @mvar{i_0},
@mvar{i_max}, @mvar{step})}, devuelve la lista de elementos obtenidos al
aplicar @code{ev (@mvar{expr}, @mvar{i}=@mvar{j})} a los elementos @mvar{j} 
de la secuencia @mvar{i_0}, @mvar{i_0} + @mvar{step}, @mvar{i_0} +
2*@mvar{step}, ..., siendo @mvar{|j|} menor o igual que @mvar{|i_max|}.

El incremento @mvar{step} puede ser un n@'umero (positivo o negativo) o una
expresi@'on. En caso de omitirse, se utilizar@'a 1 como valor por defecto.
Si se omiten  @mvar{i_0} y @mvar{step}, se le asignar@'a a ambos 1 como valor
por defecto.

@code{makelist (@mvar{expr}, @mvar{x}, @mvar{list})} devuelve una lista, cuyo
@code{j}-@'esimo elemento es igual a
@code{ev (@mvar{expr}, @mvar{x}=@mvar{list}[j])} tomando @code{j} valores desde
1 hasta @code{length (@mvar{list})}.


Ejemplos:

@c ===beg===
@c makelist (concat (x,i), i, 6);
@c makelist (x=y, y, [a, b, c]);
@c makelist (x^2, x, 3, 2*%pi, 2);
@c makelist (random(6), 4);
@c flatten (makelist (makelist (i^2, 3), i, 4));
@c flatten (makelist (makelist (i^2, i, 3), 4));
@c ===end===
@example
@group
(%i1) makelist (concat (x,i), i, 6);
(%o1)               [x1, x2, x3, x4, x5, x6]
@end group
@group
(%i2) makelist (x=y, y, [a, b, c]);
(%o2)                 [x = a, x = b, x = c]
@end group
@group
(%i3) makelist (x^2, x, 3, 2*%pi, 2);
(%o3)                        [9, 25]
@end group
@group
(%i4) makelist (random(6), 4);
(%o4)                     [2, 0, 2, 5]
@end group
@group
(%i5) flatten (makelist (makelist (i^2, 3), i, 4));
(%o5)        [1, 1, 1, 4, 4, 4, 9, 9, 9, 16, 16, 16]
@end group
@group
(%i6) flatten (makelist (makelist (i^2, i, 3), 4));
(%o6)         [1, 4, 9, 1, 4, 9, 1, 4, 9, 1, 4, 9]
@end group
@end example

@end deffn

@deffn {Funci@'on} member (@mvar{expr_1}, @mvar{expr_2})

Devuelve @code{true} si @code{is(@mvar{expr_1} = @mvar{a})}
para alg@'un elemento @mvar{a} de @code{args(@mvar{expr_2})},
en caso contrario devuelve @code{false}.

Normalmente, @code{expr_2} ser@'a una lista,
en cuyo caso @code{args(@mvar{expr_2}) = @mvar{expr_2}},
y la comprobaci@'on ser@'a si @code{is(@mvar{expr_1} = @mvar{a})} para 
alg@'un elemento @mvar{a} de @code{expr_2}.

La funci@'on @code{member} no inspecciona las partes de los argumentos de @code{expr_2},
por lo que puede devolver @code{false} si @code{expr_1} es parte de alguno de los argumentos de @code{expr_2}.

V@'ease tambi@'en @code{elementp}.

Ejemplos:

@c ===beg===
@c member (8, [8, 8.0, 8b0]);
@c member (8, [8.0, 8b0]);
@c member (b, [a, b, c]);
@c member (b, [[a, b], [b, c]]);
@c member ([b, c], [[a, b], [b, c]]);
@c F (1, 1/2, 1/4, 1/8);
@c member (1/8, %);
@c member ("ab", ["aa", "ab", sin(1), a + b]);
@c ===end===
@example
@group
(%i1) member (8, [8, 8.0, 8b0]);
(%o1)                         true
@end group
@group
(%i2) member (8, [8.0, 8b0]);
(%o2)                         false
@end group
@group
(%i3) member (b, [a, b, c]);
(%o3)                         true
@end group
@group
(%i4) member (b, [[a, b], [b, c]]);
(%o4)                         false
@end group
@group
(%i5) member ([b, c], [[a, b], [b, c]]);
(%o5)                         true
@end group
@group
(%i6) F (1, 1/2, 1/4, 1/8);
                               1  1  1
(%o6)                     F(1, -, -, -)
                               2  4  8
@end group
@group
(%i7) member (1/8, %);
(%o7)                         true
@end group
@group
(%i8) member ("ab", ["aa", "ab", sin(1), a + b]);
(%o8)                         true
@end group
@end example
@end deffn



@deffn {Funci@'on} ninth (@mvar{expr})

Devuelve el noveno elemento de la lista o expresi@'on @mvar{expr}. V@'ease @code{first} para m@'as detalles.
@end deffn



@deffn {Funci@'on} pop (@mvar{list})

Borra el primer elemento de la lista @mvar{list} y devuelve este
mismo elemento.

Si el argumento @mvar{list} es una lista vac@'{@dotless{i}}a, o
simplemente no es una lista, Maxima devuelve un mensaje de error.

V@'ease @code{push} para los ejemplos.

Ejec@'utese @code{load(basic)} antes de utilizar esta funci@'on.
@end deffn




@deffn {Funci@'on} push (@mvar{item}, @mvar{list})

A@~nade al comienzo de la lista @mvar{list} el elemento @mvar{item},
devolviendo este mismo elemento. El argumento @mvar{list} debe ser necesariamente
una lista, mientras que @mvar{item} puede ser cualquier s@'{@dotless{i}}mbolo
o expresi@'on.

Si el argumento @mvar{list} no es una lista, Maxima devuelve un
mensaje de error.

V@'ease @code{pop} para eliminar el primer elemento de una lista.

Ejec@'utese @code{load(basic)} antes de utilizar esta funci@'on.

Ejemplos:

@c ===beg===
@c load ("basic")$
@c ll: [];
@c push (x, ll);
@c push (x^2+y, ll);
@c a: push ("string", ll);
@c pop (ll);
@c pop (ll);
@c pop (ll);
@c ll;
@c a;
@c ===end===
@example
(%i1) load ("basic")$
@group
(%i2) ll: [];
(%o2)                          []
@end group
@group
(%i3) push (x, ll);
(%o3)                          [x]
@end group
@group
(%i4) push (x^2+y, ll);
                                 2
(%o4)                      [y + x , x]
@end group
@group
(%i5) a: push ("string", ll);
                                     2
(%o5)                  [string, y + x , x]
@end group
@group
(%i6) pop (ll);
(%o6)                        string
@end group
@group
(%i7) pop (ll);
                                  2
(%o7)                        y + x
@end group
@group
(%i8) pop (ll);
(%o8)                           x
@end group
@group
(%i9) ll;
(%o9)                          []
@end group
@group
(%i10) a;
                                     2
(%o10)                 [string, y + x , x]
@end group
@end example
@end deffn


@deffn {Funci@'on} rest (@mvar{expr}, @mvar{n})
@deffnx {Funci@'on} rest (@mvar{expr})

Devuelve @mvar{expr} sin sus primeros @mvar{n} elementos si @mvar{n} es positivo, o sus @'ultimos @code{- @mvar{n}} elementos si @mvar{n} es negativo. En caso de que @mvar{n} tome el valor 1 puede ser omitido. La expresi@'on  @mvar{expr} puede ser una lista, una matriz o cualquier otra expresi@'on.

@end deffn

@deffn {Funci@'on} reverse (@mvar{lista})

Invierte el orden de los elementos de la @mvar{lista} (no los propios elementos). La funci@'on @code{reverse} tambi@'en opera sobre expresiones generales, como en  @code{reverse(a=b);} gives @code{b=a}.

@end deffn

@deffn {Funci@'on} second (@mvar{expr})

Devuelve el segundo elemento de la lista o expresi@'on @mvar{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} seventh (@mvar{expr})

Devuelve el s@'eptimo elemento de la lista o expresi@'on @mvar{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} sixth (@mvar{expr})

Devuelve el sexto elemento de la lista o expresi@'on @mvar{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn




@deffn {Funci@'on} sort (@mvar{L}, @mvar{P})
@deffnx {Funci@'on} sort (@mvar{L})

@code{sort(@mvar{L}, @mvar{P})} ordena la lista @mvar{L} de acuerdo con el predicado @code{P}
de dos argumentos, el cual define un preorden total sobre los elementos de @mvar{L}.
Si @code{@mvar{P}(a, b)} vale @code{true}, entonces @code{a} aparece antes que @code{b} en
el resultado. Si ninguna de las expresiones @code{@mvar{P}(a, b)} y @code{@mvar{P}(b, a)}
valen @code{true}, entonces @code{a} y @code{b} son equivalentes y aparecen en el
resultado en el mismo orden que a la entrada; esto es, @code{sort} es un orden estable.

Si tanto @code{@mvar{P}(a, b)} como @code{@mvar{P}(b, a)} valen ambos @code{true} para
algunos elementos de @mvar{L}, entonces @mvar{P} no es un predicado de orden correcto,
siento entonces el resultado indefinido. Si @code{@mvar{P}(a, b)} toma un valor diferente
a @code{true} o @code{false}, entonces @code{sort} devuelve un error.

El predicado puede especificarse como el nombre de una funci@'on, de una operaci@'on binaria
infija o como una expresi@'on @code{lambda}. Si se especifica con el nombre de un operador,
dicho nombre debe encerrarse con comillas dobles.

La lista ordenada se devuelve como un nuevo objeto, no modific@'andose el argumento @mvar{L}.

@code{sort(@mvar{L})} equivale a @code{sort(@mvar{L}, orderlessp)}.

La ordenaci@'on por defecto es ascendente, tal como queda determinada por @code{orderlessp}.
El predicado @code{ordergreatp} ordena las listas en orden descendente.

Todos los @'atomos y expresiones de Maxima son comparables respecto de los predicados
@code{orderlessp} y @code{ordergreatp}.

Los operadores @code{<} y @code{>} ordenan n@'umeros, constantes y expresiones constantes por
magnitud. N@'otese que @code{orderlessp} y @code{ordergreatp} no ordenan n@'umeros, 
constantes y expresiones constantes por magnitud.

@code{ordermagnitudep} ordena n@'umeros, constantes y expresiones constantes de igual modo
que lo hace @code{<}, y cualesquiera otros elementos lo hace igual que @code{orderlessp}.

Ejemplos:

@code{sort} ordena una lista respecto de un predicado de dos argumentos que define un
preorden total en los elementos de la lista.

@c ===beg===
@c sort ([1, a, b, 2, 3, c], 'orderlessp);
@c sort ([1, a, b, 2, 3, c], 'ordergreatp);
@c ===end===
@example
@group
(%i1) sort ([1, a, b, 2, 3, c], 'orderlessp);
(%o1)                  [1, 2, 3, a, b, c]
(%i2) sort ([1, a, b, 2, 3, c], 'ordergreatp);
(%o2)                  [c, b, a, 3, 2, 1]
@end group
@end example

El predicado puede especificarse con el nombre de una funci@'on, de un
operador binario infijo o una expresi@'on @code{lambda}. Si se especifica
con el nombre de un operador, dicho nombre debe encerrarse con comillas dobles.

@c ===beg===
@c L : [[1, x], [3, y], [4, w], [2, z]];
@c foo (a, b) := a[1] > b[1];
@c sort (L, 'foo);
@c infix (">>");
@c a >> b := a[1] > b[1];
@c sort (L, ">>");
@c sort (L, lambda ([a, b], a[1] > b[1]));
@c ===end===
@example
@group
(%i1) L : [[1, x], [3, y], [4, w], [2, z]];
(%o1)           [[1, x], [3, y], [4, w], [2, z]]
(%i2) foo (a, b) := a[1] > b[1];
(%o2)                 foo(a, b) := a  > b
                                    1    1
(%i3) sort (L, 'foo);
(%o3)           [[4, w], [3, y], [2, z], [1, x]]
(%i4) infix (">>");
(%o4)                          >>
(%i5) a >> b := a[1] > b[1];
(%o5)                   a >> b := a  > b
                                   1    1
(%i6) sort (L, ">>");
(%o6)           [[4, w], [3, y], [2, z], [1, x]]
(%i7) sort (L, lambda ([a, b], a[1] > b[1]));
(%o7)           [[4, w], [3, y], [2, z], [1, x]]
@end group
@end example

@code{sort(@mvar{L})} equivale a @code{sort(@mvar{L}, orderlessp)}.

@c ===beg===
@c L : [a, 2*b, -5, 7, 1 + %e, %pi];
@c sort (L);
@c sort (L, 'orderlessp);
@c ===end===
@example
@group
(%i1) L : [a, 2*b, -5, 7, 1 + %e, %pi];
(%o1)             [a, 2 b, - 5, 7, %e + 1, %pi]
(%i2) sort (L);
(%o2)             [- 5, 7, %e + 1, %pi, a, 2 b]
(%i3) sort (L, 'orderlessp);
(%o3)             [- 5, 7, %e + 1, %pi, a, 2 b]
@end group
@end example

La ordenaci@'on por defecto es ascendente, tal como queda determinada por @code{orderlessp}.
El predicado @code{ordergreatp} ordena las listas en orden descendente.

@c ===beg===
@c L : [a, 2*b, -5, 7, 1 + %e, %pi];
@c sort (L);
@c sort (L, 'ordergreatp);
@c ===end===
@example
@group
(%i1) L : [a, 2*b, -5, 7, 1 + %e, %pi];
(%o1)                    [a, 2 b, - 5, 7, %e + 1, %pi]
(%i2) sort (L);
(%o2)                    [- 5, 7, %e + 1, %pi, a, 2 b]
(%i3) sort (L, 'ordergreatp);
(%o3)                    [2 b, a, %pi, %e + 1, 7, - 5]
@end group
@end example

Todos los @'atomos y expresiones de Maxima son comparables respecto de los predicados
@code{orderlessp} y @code{ordergreatp}.

@c ===beg===
@c L : [11, -17, 29b0, 9*c, 7.55, foo(x, y), -5/2, b + a];
@c sort (L, orderlessp);
@c sort (L, ordergreatp);
@c ===end===
@example
@group
(%i1) L : [11, -17, 29b0, 9*c, 7.55, foo(x, y), -5/2, b + a];
                                                 5
(%o1)  [11, - 17, 2.9b1, 9 c, 7.55, foo(x, y), - -, b + a]
                                                 2
(%i2) sort (L, orderlessp);
                5
(%o2)  [- 17, - -, 7.55, 11, 2.9b1, b + a, 9 c, foo(x, y)]
                2
(%i3) sort (L, ordergreatp);
                                                  5
(%o3)  [foo(x, y), 9 c, b + a, 2.9b1, 11, 7.55, - -, - 17]
                                                  2
@end group
@end example

Los operadores @code{<} y @code{>} ordenan n@'umeros, constantes y expresiones constantes por
magnitud. N@'otese que @code{orderlessp} y @code{ordergreatp} no ordenan n@'umeros, 
constantes y expresiones constantes por magnitud.

@c ===beg===
@c L : [%pi, 3, 4, %e, %gamma];
@c sort (L, ">");
@c sort (L, ordergreatp);
@c ===end===
@example
@group
(%i1) L : [%pi, 3, 4, %e, %gamma];
(%o1)                [%pi, 3, 4, %e, %gamma]
(%i2) sort (L, ">");
(%o2)                [4, %pi, 3, %e, %gamma]
(%i3) sort (L, ordergreatp);
(%o3)                [%pi, %gamma, %e, 4, 3]
@end group
@end example

@code{ordermagnitudep} ordena n@'umeros, constantes y expresiones constantes de igual modo
que lo hace @code{<}, y cualesquiera otros elementos lo hace igual que @code{orderlessp}.

@c ===beg===
@c L : [%i, 1+%i, 2*x, minf, inf, %e, sin(1), 0, 1, 2, 3, 1.0, 1.0b0];
@c sort (L, ordermagnitudep);
@c sort (L, orderlessp);
@c ===end===
@example
@group
(%i1) L : [%i, 1+%i, 2*x, minf, inf, %e, sin(1), 0, 1, 2, 3, 1.0, 1.0b0];
(%o1) [%i, %i + 1, 2 x, minf, inf, %e, sin(1), 0, 1, 2, 3, 1.0, 
                                                           1.0b0]
(%i2) sort (L, ordermagnitudep);
(%o2) [minf, 0, sin(1), 1, 1.0, 1.0b0, 2, %e, 3, inf, %i, 
                                                     %i + 1, 2 x]
(%i3) sort (L, orderlessp);
(%o3) [0, 1, 1.0, 2, 3, %e, %i, %i + 1, inf, minf, sin(1), 
                                                      1.0b0, 2 x]
@end group
@end example
@end deffn




@deffn {Funci@'on} sublist (@mvar{list}, @mvar{p})
Devuelve la lista de elementos de @mvar{list} para los cuales el predicado @code{p} retorna @code{true}.

Ejemplo:

@c ===beg===
@c L: [1, 2, 3, 4, 5, 6];
@c sublist (L, evenp);
@c ===end===
@example
@group
(%i1) L: [1, 2, 3, 4, 5, 6];
(%o1)                  [1, 2, 3, 4, 5, 6]
@end group
@group
(%i2) sublist (L, evenp);
(%o2)                       [2, 4, 6]
@end group
@end example

@end deffn




@deffn {Funci@'on} sublist_indices (@mvar{L}, @mvar{P})

Devuelve los @'{@dotless{i}}ndices de los elementos @code{x} de la
lista @mvar{L} para la cual el predicado @code{maybe(@mvar{P}(x))}
devuelve @code{true}, lo que excluye a @code{unknown} y a @code{false}.
@mvar{P} puede ser el nombre de una funci@'on o de una expresi@'on lambda.
@mvar{L} debe ser una lista literal.

Ejemplos:

@c ===beg===
@c sublist_indices ('[a, b, b, c, 1, 2, b, 3, b], 
@c                        lambda ([x], x='b));
@c sublist_indices ('[a, b, b, c, 1, 2, b, 3, b], symbolp);
@c sublist_indices ([1 > 0, 1 < 0, 2 < 1, 2 > 1, 2 > 0], 
@c                        identity);
@c assume (x < -1);
@c map (maybe, [x > 0, x < 0, x < -2]);
@c sublist_indices ([x > 0, x < 0, x < -2], identity);
@c ===end===
@example
@group
(%i1) sublist_indices ('[a, b, b, c, 1, 2, b, 3, b],
                       lambda ([x], x='b));
(%o1)                     [2, 3, 7, 9]
@end group
@group
(%i2) sublist_indices ('[a, b, b, c, 1, 2, b, 3, b], symbolp);
(%o2)                  [1, 2, 3, 4, 7, 9]
@end group
@group
(%i3) sublist_indices ([1 > 0, 1 < 0, 2 < 1, 2 > 1, 2 > 0],
                       identity);
(%o3)                       [1, 4, 5]
@end group
@group
(%i4) assume (x < -1);
(%o4)                       [x < - 1]
@end group
@group
(%i5) map (maybe, [x > 0, x < 0, x < -2]);
(%o5)                [false, true, unknown]
@end group
@group
(%i6) sublist_indices ([x > 0, x < 0, x < -2], identity);
(%o6)                          [2]
@end group
@end example

@end deffn


@deffn {Funci@'on} unique (@mvar{L})

Devuelve la lista @mvar{L} sin redundancias, es decir, sin
elementos repetidos

Cuando ninguno de los elementos de @mvar{L} est@'a repetido,
@code{unique} devuelve una r@'eplica de @mvar{L}, no la
propia @mvar{L}.

Si @mvar{L} no es una lista, @code{unique} devuelve @mvar{L}.

Ejemplo:

@c ===beg===
@c unique ([1, %pi, a + b, 2, 1, %e, %pi, a + b, [1]]);
@c ===end===
@example
@group
(%i1) unique ([1, %pi, a + b, 2, 1, %e, %pi, a + b, [1]]);
(%o1)              [1, 2, %e, %pi, [1], b + a]
@end group
@end example
@end deffn



@deffn {Funci@'on} tenth (@mvar{expr})

Devuelve el d@'ecimo elemento de la lista o expresi@'on @mvar{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} third (@mvar{expr})

Devuelve el tercer elemento de la lista o expresi@'on @mvar{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

