@menu
* Introduction to Function Definition::  
* Function::                    
* Macros::                      
* Definitions for Function Definition::  
@end menu

@node Introduction to Function Definition, Function, Function Definition, Function Definition
@section Introduction to Function Definition

@node Function, Macros, Introduction to Function Definition, Function Definition
@section Function

@node Macros, Definitions for Function Definition, Function, Function Definition
@section Macros

@deffn {Function} buildq (@mvar{L}, @mvar{expr})
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@deffn {Function} macroexpand (@mvar{expr})
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@deffn {Function} macroexpand1 (@mvar{expr})
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@defvr {Global variable} macros
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@deffn {Function} splice (@mvar{a})
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@node Definitions for Function Definition,  , Macros, Function Definition
@section Definitions for Function Definition

@deffn {Function} apply (@mvar{F}, [@mvar{x_1}, ..., @mvar{x_n}])
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@deffn {Function} block ([@mvar{v_1}, ..., @mvar{v_m}], @mvar{expr_1}, ..., @mvar{expr_n})
@deffnx {Function} block (@mvar{expr_1}, ..., @mvar{expr_n})
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@deffn {Function} break (@mvar{expr_1}, ..., @mvar{expr_n})
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@deffn {Function} catch (@mvar{expr_1}, ..., @mvar{expr_n})
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@deffn {Function} compfile (@mvar{filename}, @mvar{f_1}, ..., @mvar{f_n})
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@deffn {Function} compile (@mvar{f_1}, ..., @mvar{f_n})
@deffnx {Function} compile (functions)
@deffnx {Function} compile (all)
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@deffn {Function} define (@mvar{f}(@mvar{x_1}, ..., @mvar{x_n}), @mvar{expr})
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@deffn {Function} define_variable (@mvar{name}, @mvar{default_value}, @mvar{mode})
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@deffn {Function} dispfun (@mvar{f_1}, ..., @mvar{f_n})
@deffnx {Function} dispfun (all)
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@defvr {System variable} functions
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@deffn {Function} fundef (@mvar{f})
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@deffn {Function} funmake (@mvar{F}, [@mvar{arg_1}, ..., @mvar{arg_n}])
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@deffn {Function} lambda ([@mvar{x_1}, ..., @mvar{x_m}], @mvar{expr_1}, ..., @mvar{expr_n})
@deffnx {Function} lambda ([[@mvar{L}]], @mvar{expr_1}, ..., @mvar{expr_n})
@deffnx {Function} lambda ([@mvar{x_1}, ..., @mvar{x_m}, [@mvar{L}]], @mvar{expr_1}, ..., @mvar{expr_n})
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@deffn {Function} local (@mvar{v_1}, ..., @mvar{v_n})
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@defvr {Option variable} macroexpansion
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@defvr {Option variable} mode_checkp
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@defvr {Option variable} mode_check_errorp
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@defvr {Option variable} mode_check_warnp
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@deffn {Function} mode_declare (@mvar{y_1}, @mvar{mode_1}, ..., @mvar{y_n}, @mvar{mode_n})
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@deffn {Function} mode_identity (@mvar{arg_1}, @mvar{arg_2})
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@defvr {Option variable} transcompile
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@deffn {Function} translate (@mvar{f_1}, ..., @mvar{f_n})
@deffnx {Function} translate (functions)
@deffnx {Function} translate (all)
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@deffn {Function} translate_file (@mvar{maxima_filename})
@deffnx {Function} translate_file (@mvar{maxima_filename}, @mvar{lisp_filename})
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@defvr {Option variable} transrun
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@defvr {Option variable} tr_array_as_ref
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@defvr {Option variable} tr_bound_function_applyp
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@defvr {Option variable} tr_file_tty_messagesp
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@defvr {Option variable} tr_float_can_branch_complex
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@defvr {Option variable} tr_function_call_default
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@defvr {Option variable} tr_numer
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@defvr {Option variable} tr_optimize_max_loop
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@defvr {Option variable} tr_semicompile
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@defvr {System variable} tr_state_vars
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@deffn {Function} tr_warnings_get ()
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@defvr {Option variable} tr_warn_bad_function_calls
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@defvr {Option variable} tr_warn_fexpr
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@defvr {Option variable} tr_warn_meval
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@defvr {Option variable} tr_warn_mode
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@defvr {Option variable} tr_warn_undeclared
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@defvr {Option variable} tr_warn_undefined_variable
THIS ITEM NEEDS TO BE TRANSLATED.
@end defvr

@deffn {Function} compile_file (@mvar{filename})
@deffnx {Function} compile_file (@mvar{filename}, @mvar{compiled_filename})
@deffnx {Function} compile_file (@mvar{filename}, @mvar{compiled_filename}, @mvar{lisp_filename})
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

@deffn {Function} declare_translated (@mvar{f_1}, @mvar{f_2}, ...)
THIS ITEM NEEDS TO BE TRANSLATED.
@end deffn

