@c -----------------------------------------------------------------------------
@c File     : linearalgebra.de.texi
@c License  : GNU General Public License (GPL)
@c Language : German
@c Original : linearalgebra.texi revision 1.17
@c Date     : 08.11.2010
@c Revision : 19.02.2011
@c 
@c This file is part of Maxima -- GPL CAS based on DOE-MACSYMA
@c -----------------------------------------------------------------------------

@menu
* Introduction to linearalgebra::
* Functions and Variables for linearalgebra::
@end menu

@c -----------------------------------------------------------------------------
@node Introduction to linearalgebra, Functions and Variables for linearalgebra, linearalgebra, linearalgebra
@section Introduction to linearalgebra
@c -----------------------------------------------------------------------------

@code{linearalgebra} is a collection of functions for linear algebra.

Example:

@example
(%i1) M : matrix ([1, 2], [1, 2]);
                            [ 1  2 ]
(%o1)                       [      ]
                            [ 1  2 ]
(%i2) nullspace (M);
                               [  1  ]
                               [     ]
(%o2)                     span([   1 ])
                               [ - - ]
                               [   2 ]
(%i3) columnspace (M);
                                [ 1 ]
(%o3)                      span([   ])
                                [ 1 ]
(%i4) ptriangularize (M - z*ident(2), z);
                         [ 1   2 - z   ]
(%o4)                    [             ]
                         [           2 ]
                         [ 0  3 z - z  ]
(%i5) M : matrix ([1, 2, 3], [4, 5, 6], [7, 8, 9]) - z*ident(3);
                     [ 1 - z    2      3   ]
                     [                     ]
(%o5)                [   4    5 - z    6   ]
                     [                     ]
                     [   7      8    9 - z ]
(%i6) MM : ptriangularize (M, z);
              [ 4  5 - z            6            ]
              [                                  ]
              [                2                 ]
              [     66        z    102 z   132   ]
              [ 0   --      - -- + ----- + ---   ]
(%o6)         [     49        7     49     49    ]
              [                                  ]
              [               3        2         ]
              [           49 z    245 z    147 z ]
              [ 0    0    ----- - ------ - ----- ]
              [            264      88      44   ]
(%i7) algebraic : true;
(%o7)                         true
(%i8) tellrat (MM [3, 3]);
                         3       2
(%o8)                  [z  - 15 z  - 18 z]
(%i9) MM : ratsimp (MM);
               [ 4  5 - z           6           ]
               [                                ]
               [                2               ]
(%o9)          [     66      7 z  - 102 z - 132 ]
               [ 0   --    - ------------------ ]
               [     49              49         ]
               [                                ]
               [ 0    0             0           ]
(%i10) nullspace (MM);
                        [        1         ]
                        [                  ]
                        [   2              ]
                        [  z  - 14 z - 16  ]
                        [  --------------  ]
(%o10)             span([        8         ])
                        [                  ]
                        [    2             ]
                        [   z  - 18 z - 12 ]
                        [ - -------------- ]
                        [         12       ]
(%i11) M : matrix ([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12],
                   [13, 14, 15, 16]);
                       [ 1   2   3   4  ]
                       [                ]
                       [ 5   6   7   8  ]
(%o11)                 [                ]
                       [ 9   10  11  12 ]
                       [                ]
                       [ 13  14  15  16 ]
(%i12) columnspace (M);
                           [ 1  ]  [ 2  ]
                           [    ]  [    ]
                           [ 5  ]  [ 6  ]
(%o12)                span([    ], [    ])
                           [ 9  ]  [ 10 ]
                           [    ]  [    ]
                           [ 13 ]  [ 14 ]
(%i13) apply ('orthogonal_complement, args (nullspace (transpose (M))));
                           [ 0 ]  [  1  ]
                           [   ]  [     ]
                           [ 1 ]  [  0  ]
(%o13)                span([   ], [     ])
                           [ 2 ]  [ - 1 ]
                           [   ]  [     ]
                           [ 3 ]  [ - 2 ]
@end example

@c -----------------------------------------------------------------------------
@node Functions and Variables for linearalgebra,  , Introduction to linearalgebra, linearalgebra
@section Functions and Variables for linearalgebra
@c -----------------------------------------------------------------------------

@c -----------------------------------------------------------------------------
@deffn {Function} addmatrices (@mvar{f}, @mvar{M_1}, ..., @mvar{M_n})

@c REWORD -- THE RESULT IS NOT GENERALLY THE SUM OF M_1, ..., M_N
Using the function @mvar{f} as the addition function, return the sum of
the matrices @mvar{M_1}, ..., @mvar{M_n}. The function @mvar{f} must accept any
number of arguments (a Maxima nary function).

Examples:

@example
(%i1) m1 : matrix([1,2],[3,4])$
(%i2) m2 : matrix([7,8],[9,10])$
(%i3) addmatrices('max,m1,m2);
(%o3) matrix([7,8],[9,10])
(%i4) addmatrices('max,m1,m2,5*m1);
(%o4) matrix([7,10],[15,20])
@end example
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} blockmatrixp (@mvar{M})

Return true if and only if @mvar{M} is a matrix and every entry of 
@mvar{M} is a matrix.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} columnop (@mvar{M}, @mvar{i}, @mvar{j}, @mvar{theta})

If @mvar{M} is a matrix, return the matrix that results from doing the  
column operation @code{C_i <- C_i - @mvar{theta} * C_j}. If @mvar{M} doesn't
have a row @mvar{i} or @mvar{j}, signal an error.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} columnswap (@mvar{M}, @mvar{i}, @mvar{j})

If @mvar{M} is a matrix, swap columns @mvar{i} and @mvar{j}.  If @mvar{M} doesn't 
have a column @mvar{i} or @mvar{j}, signal an error.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} columnspace (@mvar{M})

If @mvar{M} is a matrix, return @code{span (v_1, ..., v_n)}, where the set
@code{@{v_1, ..., v_n@}} is a basis for the column space of @mvar{M}.  The span 
of the empty set is @code{@{0@}}. Thus, when the column space has only 
one member, return @code{span ()}.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} copy (@mvar{e})

Return a copy of the Maxima expression @mvar{e}. Although @mvar{e} can be any
Maxima expression, the copy function is the most useful when @mvar{e} is either 
a list or a matrix; consider:

@example 
(%i1) m : [1,[2,3]]$
(%i2) mm : m$
(%i3) mm[2][1] : x$
(%i4) m;
(%o4)                      [1,[x,3]]
(%i5) mm;
(%o5)                      [1,[x,3]]
@end example

Let's try the same experiment, but this time let @mvar{mm} be a copy of @mvar{m}

@example
(%i6) m : [1,[2,3]]$
(%i7) mm : copy(m)$
(%i8) mm[2][1] : x$
(%i9) m;
(%o9)                     [1,[2,3]]
(%i10) mm;
(%o10)                    [1,[x,3]]
@end example
This time, the assignment to @mvar{mm} does not change the value of @mvar{m}.
@end deffn

@c -----------------------------------------------------------------------------
@deffn  {Function} cholesky (@mvar{M})
@deffnx {Function} cholesky (@mvar{M}, @mvar{field})

Return the Cholesky factorization of the matrix selfadjoint (or hermitian)
matrix @mvar{M}. The second argument defaults to 'generalring.' For a description
of the possible values for @mvar{field}, see @code{lu_factor}.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} ctranspose (@mvar{M})

Return the complex conjugate transpose of the matrix @mvar{M}. The function
@code{ctranspose} uses @code{matrix_element_transpose} to transpose each matrix
element.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} diag_matrix (@mvar{d_1}, @mvar{d_2},...,@mvar{d_n})

Return a diagonal matrix with diagonal entries @mvar{d_1}, @mvar{d_2}, ...,
@mvar{d_n}.  When the diagonal entries are matrices, the zero entries of the
returned matrix are zero matrices of the appropriate size; for example:

@example
(%i1) diag_matrix(diag_matrix(1,2),diag_matrix(3,4));

                            [ [ 1  0 ]  [ 0  0 ] ]
                            [ [      ]  [      ] ]
                            [ [ 0  2 ]  [ 0  0 ] ]
(%o1)                       [                    ]
                            [ [ 0  0 ]  [ 3  0 ] ]
                            [ [      ]  [      ] ]
                            [ [ 0  0 ]  [ 0  4 ] ]
(%i2) diag_matrix(p,q);

                                   [ p  0 ]
(%o2)                              [      ]
                                   [ 0  q ]
@end example
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} dotproduct (@mvar{u}, @mvar{v})

Return the dotproduct of vectors @mvar{u} and @mvar{v}.  This is the same
as @code{conjugate (transpose (@mvar{u})) . @mvar{v}}.  The arguments @mvar{u} and
@mvar{v} must be column vectors.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} eigens_by_jacobi (@mvar{A})
@deffnx {Function} eigens_by_jacobi (@mvar{A}, @mvar{field_type})

Computes the eigenvalues and eigenvectors of @mvar{A} by the method of Jacobi
rotations.  @mvar{A} must be a symmetric matrix (but it need not be positive
definite nor positive semidefinite).  @mvar{field_type} indicates the
computational field, either @code{floatfield} or @code{bigfloatfield}.  If 
@mvar{field_type} is not specified, it defaults to @code{floatfield}.

The elements of @mvar{A} must be numbers or expressions which evaluate to numbers
via @code{float} or @code{bfloat} (depending on @mvar{field_type}).

Examples:

@example
(%i1) S: matrix([1/sqrt(2), 1/sqrt(2)],[-1/sqrt(2), 1/sqrt(2)]);
                     [     1         1    ]
                     [  -------   ------- ]
                     [  sqrt(2)   sqrt(2) ]
(%o1)                [                    ]
                     [      1        1    ]
                     [ - -------  ------- ]
                     [   sqrt(2)  sqrt(2) ]
(%i2) L : matrix ([sqrt(3), 0], [0, sqrt(5)]);
                      [ sqrt(3)     0    ]
(%o2)                 [                  ]
                      [    0     sqrt(5) ]
(%i3) M : S . L . transpose (S);
            [ sqrt(5)   sqrt(3)  sqrt(5)   sqrt(3) ]
            [ ------- + -------  ------- - ------- ]
            [    2         2        2         2    ]
(%o3)       [                                      ]
            [ sqrt(5)   sqrt(3)  sqrt(5)   sqrt(3) ]
            [ ------- - -------  ------- + ------- ]
            [    2         2        2         2    ]
(%i4) eigens_by_jacobi (M);
The largest percent change was 0.1454972243679
The largest percent change was 0.0
number of sweeps: 2
number of rotations: 1
(%o4) [[1.732050807568877, 2.23606797749979], 
                        [  0.70710678118655   0.70710678118655 ]
                        [                                      ]]
                        [ - 0.70710678118655  0.70710678118655 ]
(%i5) float ([[sqrt(3), sqrt(5)], S]);
(%o5) [[1.732050807568877, 2.23606797749979], 
                        [  0.70710678118655   0.70710678118655 ]
                        [                                      ]]
                        [ - 0.70710678118655  0.70710678118655 ]
(%i6) eigens_by_jacobi (M, bigfloatfield);
The largest percent change was 1.454972243679028b-1
The largest percent change was 0.0b0
number of sweeps: 2
number of rotations: 1
(%o6) [[1.732050807568877b0, 2.23606797749979b0], 
                [  7.071067811865475b-1   7.071067811865475b-1 ]
                [                                              ]]
                [ - 7.071067811865475b-1  7.071067811865475b-1 ]
@end example
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} get_lu_factors (@mvar{x}) 

When @code{@mvar{x} = lu_factor (@mvar{A})}, then @code{get_lu_factors} returns 
a list of the form @code{[P, L, U]}, where @mvar{P} is a permutation matrix, 
@mvar{L} is lower triangular with ones on the diagonal, and @mvar{U} is upper 
triangular, and @code{@mvar{A} = @mvar{P} @mvar{L} @mvar{U}}.
@end deffn

@c -----------------------------------------------------------------------------
@deffn  {Function} hankel (@mvar{col})
@deffnx {Function} hankel (@mvar{col}, @mvar{row})

Return a Hankel matrix @mvar{H}. The first column of @mvar{H} is @mvar{col};
except for the first entry, the last row of @mvar{H} is @mvar{row}. The
default for @mvar{row} is the zero vector with the same length as @mvar{col}.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} hessian (@mvar{f}, @mvar{x})

Returns the Hessian matrix of @mvar{f} with respect to the list of variables 
@mvar{x}.  The @code{(i, j)}-th element of the Hessian matrix is 
@code{diff(@mvar{f}, @mvar{x}[i], 1, @mvar{x}[j], 1)}.

Examples:

@example
(%i1) hessian (x * sin (y), [x, y]);
                     [   0       cos(y)   ]
(%o1)                [                    ]
                     [ cos(y)  - x sin(y) ]
(%i2) depends (F, [a, b]);
(%o2)                       [F(a, b)]
(%i3) hessian (F, [a, b]);
                        [   2      2   ]
                        [  d F    d F  ]
                        [  ---   ----- ]
                        [    2   da db ]
                        [  da          ]
(%o3)                   [              ]
                        [   2      2   ]
                        [  d F    d F  ]
                        [ -----   ---  ]
                        [ da db     2  ]
                        [         db   ]
@end example
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} hilbert_matrix (@mvar{n})

Return the @mvar{n} by @mvar{n} Hilbert matrix. When @mvar{n} isn't a positive
integer, signal an error.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} identfor (@mvar{M})
@deffnx {Function} identfor (@mvar{M}, @mvar{fld})

Return an identity matrix that has the same shape as the matrix
@mvar{M}.  The diagonal entries of the identity matrix are the 
multiplicative identity of the field @mvar{fld}; the default for
@mvar{fld} is @mvar{generalring}.

The first argument @mvar{M} should be a square matrix or a 
non-matrix. When @mvar{M} is a matrix, each entry of @mvar{M} can be a
square matrix -- thus @mvar{M} can be a blocked Maxima matrix. The
matrix can be blocked to any (finite) depth.

See also @code{zerofor}
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} invert_by_lu (@mvar{M}, @mvar{(rng generalring)})

Invert a matrix @mvar{M} by using the LU factorization.  The LU factorization
is done using the ring @mvar{rng}.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} jacobian (@mvar{f}, @mvar{x})

Returns the Jacobian matrix of the list of functions @mvar{f} with respect to 
the list of variables @mvar{x}.  The @code{(i, j)}-th element of the Jacobian 
matrix is @code{diff(@mvar{f}[i], @mvar{x}[j])}.

Examples:

@example
(%i1) jacobian ([sin (u - v), sin (u * v)], [u, v]);
                  [ cos(v - u)  - cos(v - u) ]
(%o1)             [                          ]
                  [ v cos(u v)   u cos(u v)  ]
(%i2) depends ([F, G], [y, z]);
(%o2)                  [F(y, z), G(y, z)]
(%i3) jacobian ([F, G], [y, z]);
                           [ dF  dF ]
                           [ --  -- ]
                           [ dy  dz ]
(%o3)                      [        ]
                           [ dG  dG ]
                           [ --  -- ]
                           [ dy  dz ]
@end example
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} kronecker_product (@mvar{A}, @mvar{B})

Return the Kronecker product of the matrices @mvar{A} and @mvar{B}.
@end deffn

@c -----------------------------------------------------------------------------
@deffn  {Function} listp (@mvar{e}, @mvar{p})
@deffnx {Function} listp (@mvar{e})

Given an optional argument @mvar{p}, return @code{true} if @mvar{e} is 
a Maxima list and @mvar{p} evaluates to @code{true} for every list element.
When @code{listp} is not given the optional argument, return @code{true} if @mvar{e} is 
a Maxima list.  In all other cases, return @code{false}.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} locate_matrix_entry (@mvar{M}, @mvar{r_1}, @mvar{c_1}, @mvar{r_2}, @mvar{c_2}, @mvar{f}, @mvar{rel})

The first argument must be a matrix; the arguments
@mvar{r_1} through @mvar{c_2} determine a sub-matrix of @mvar{M} that consists of
rows @mvar{r_1} through @mvar{r_2} and columns @mvar{c_1} through @mvar{c_2}. 

Find a entry in the sub-matrix @mvar{M} that satisfies some property. 
Three cases:

(1) @code{@mvar{rel} = 'bool} and @mvar{f} a predicate: 

Scan the sub-matrix from left to right then top to bottom,
and return the index of the first entry that satisfies the 
predicate @mvar{f}. If no matrix entry satisfies @mvar{f}, return @code{false}.

(2) @code{@mvar{rel} = 'max} and @mvar{f} real-valued:

Scan the sub-matrix looking for an entry that maximizes @mvar{f}.
Return the index of a maximizing entry.

(3) @code{@mvar{rel} = 'min} and @mvar{f} real-valued:

Scan the sub-matrix looking for an entry that minimizes @mvar{f}. 
Return the index of a minimizing entry.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} lu_backsub (@mvar{M}, @mvar{b})

When @code{@mvar{M} = lu_factor (@mvar{A}, @mvar{field})},
then @code{lu_backsub (@mvar{M}, @mvar{b})} solves the linear
system @code{@mvar{A} @mvar{x} = @mvar{b}}.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} lu_factor (@mvar{M}, @mvar{field})

Return a list of the form @code{[@mvar{LU}, @mvar{perm}, @mvar{fld}]}, or 
@code{[@mvar{LU}, @mvar{perm}, @mvar{fld}, @mvar{lower-cnd} @mvar{upper-cnd}]}, where

  (1) The matrix @mvar{LU} contains the factorization of @mvar{M} in a packed 
      form. Packed form means three things: First, the rows of @mvar{LU} are 
      permuted according to the list @mvar{perm}.  If, for example, @mvar{perm} 
      is the list @code{[3,2,1]}, the actual first row 
      of the @mvar{LU} factorization is the third row of the matrix @mvar{LU}. 
      Second, the lower triangular factor of m is the lower triangular part of 
      @mvar{LU} with the diagonal entries replaced by all ones. Third, the upper
      triangular factor of @mvar{M} is the upper triangular part of @mvar{LU}.

  (2) When the field is either @code{floatfield} or @code{complexfield},
      the numbers @mvar{lower-cnd} and @mvar{upper-cnd} are lower and upper bounds
      for the infinity norm condition number of @mvar{M}.  For all fields, the 
      condition number might not be estimated; for such fields, @code{lu_factor}
      returns a two item list.  Both the lower and upper bounds can differ from 
      their true values by arbitrarily large factors. 
      (See also @code{mat_cond}.)
   
  The argument @mvar{M} must be a square matrix.

  The optional argument @mvar{fld} must be a symbol that determines a ring or 
  field. The pre-defined fields and rings are:

    (a) @code{generalring} -- the ring of Maxima expressions,
    (b) @code{floatfield} --  the field of floating point numbers of the type double,
    (c) @code{complexfield} --  the field of complex floating point numbers of the 
        type double,
    (d) @code{crering}  -- the ring of Maxima CRE expressions,
    (e) @code{rationalfield} -- the field of rational numbers,
    (f) @code{runningerror} -- track the all floating point rounding errors,
    (g) @code{noncommutingring} -- the ring of Maxima expressions where multiplication is the
        non-commutative dot operator.       

When the field is @code{floatfield}, @code{complexfield}, or
@code{runningerror}, the algorithm uses partial pivoting; for all
other fields, rows are switched only when needed to avoid a zero
pivot.

Floating point addition arithmetic isn't associative, so the meaning
of 'field' differs from the mathematical definition.

A member of the field @code{runningerror} is a two member Maxima list
of the form @code{[x,n]},where @mvar{x} is a floating point number and
@code{n} is an integer. The relative difference between the 'true'
value of @code{x} and @code{x} is approximately bounded by the machine
epsilon times @code{n}. The running error bound drops some terms that
of the order the square of the machine epsilon.

There is no user-interface for defining a new field. A user that is
familiar with Common Lisp should be able to define a new field.  To do
this, a user must define functions for the arithmetic operations and
functions for converting from the field representation to Maxima and
back. Additionally, for ordered fields (where partial pivoting will be
used), a user must define functions for the magnitude and for
comparing field members.  After that all that remains is to define a
Common Lisp structure @code{mring}.  The file @code{mring} has many
examples.
 
To compute the factorization, the first task is to convert each matrix
entry to a member of the indicated field. When conversion isn't
possible, the factorization halts with an error message. Members of
the field needn't be Maxima expressions.  Members of the
@code{complexfield}, for example, are Common Lisp complex numbers. Thus
after computing the factorization, the matrix entries must be
converted to Maxima expressions.

See also  @code{get_lu_factors}.

Examples:

@example
(%i1) w[i,j] := random (1.0) + %i * random (1.0);
(%o1)          w     := random(1.) + %i random(1.)
                i, j
(%i2) showtime : true$
Evaluation took 0.00 seconds (0.00 elapsed)
(%i3) M : genmatrix (w, 100, 100)$
Evaluation took 7.40 seconds (8.23 elapsed)
(%i4) lu_factor (M, complexfield)$
Evaluation took 28.71 seconds (35.00 elapsed)
(%i5) lu_factor (M, generalring)$
Evaluation took 109.24 seconds (152.10 elapsed)
(%i6) showtime : false$

(%i7) M : matrix ([1 - z, 3], [3, 8 - z]); 
                        [ 1 - z    3   ]
(%o7)                   [              ]
                        [   3    8 - z ]
(%i8) lu_factor (M, generalring);
          [ 1 - z         3        ]
          [                        ]
(%o8)    [[   3            9       ], [1, 2], generalring]
          [ -----  - z - ----- + 8 ]
          [ 1 - z        1 - z     ]
(%i9) get_lu_factors (%);
                  [   1    0 ]  [ 1 - z         3        ]
        [ 1  0 ]  [          ]  [                        ]
(%o9)  [[      ], [   3      ], [                9       ]]
        [ 0  1 ]  [ -----  1 ]  [   0    - z - ----- + 8 ]
                  [ 1 - z    ]  [              1 - z     ]
(%i10) %[1] . %[2] . %[3];
                        [ 1 - z    3   ]
(%o10)                  [              ]
                        [   3    8 - z ]
@end example
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} mat_cond (@mvar{M}, 1)
@deffnx {Function} mat_cond (@mvar{M}, inf)

Return the @mvar{p}-norm matrix condition number of the matrix
@mvar{m}. The allowed values for @mvar{p} are 1 and @mvar{inf}.  This
function uses the LU factorization to invert the matrix @mvar{m}. Thus
the running time for @code{mat_cond} is proportional to the cube of
the matrix size; @code{lu_factor} determines lower and upper bounds
for the infinity norm condition number in time proportional to the
square of the matrix size.
@end deffn

@c -----------------------------------------------------------------------------
@deffn  {Function} mat_norm (@mvar{M}, 1)
@deffnx {Function} mat_norm (@mvar{M}, inf)
@deffnx {Function} mat_norm (@mvar{M}, frobenius)

Return the matrix @mvar{p}-norm of the matrix @mvar{M}.  The allowed values for 
@mvar{p} are 1, @code{inf}, and @code{frobenius} (the Frobenius matrix norm). 
The matrix @mvar{M} should be an unblocked matrix.
@end deffn

@c -----------------------------------------------------------------------------
@deffn  {Function} matrixp (@mvar{e}, @mvar{p})
@deffnx {Function} matrixp (@mvar{e})

Given an optional argument @mvar{p}, return @code{true} if @mvar{e} is 
a matrix and @mvar{p} evaluates to @code{true} for every matrix element.
When @code{matrixp} is not given an optional argument, return @code{true} 
if @code{e} is a matrix.  In all other cases, return @code{false}.

See also @code{blockmatrixp}
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} matrix_size (@mvar{M})

Return a two member list that gives the number of rows and columns, respectively
of the matrix @mvar{M}.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} mat_fullunblocker (@mvar{M})

If @mvar{M} is a block matrix, unblock the matrix to all levels. If @mvar{M} is 
a matrix, return @mvar{M}; otherwise, signal an error.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} mat_trace (@mvar{M})

Return the trace of the matrix @mvar{M}. If @mvar{M} isn't a matrix, return a
noun form. When @mvar{M} is a block matrix, @code{mat_trace(M)} returns
the same value as does @code{mat_trace(mat_unblocker(m))}.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} mat_unblocker (@mvar{M})

If @mvar{M} is a block matrix, unblock @mvar{M} one level. If @mvar{M} is a matrix, 
@code{mat_unblocker (M)} returns @mvar{M}; otherwise, signal an error.

Thus if each entry of @mvar{M} is matrix, @code{mat_unblocker (M)} returns an 
unblocked matrix, but if each entry of @mvar{M} is a block matrix, 
@code{mat_unblocker (M)} returns a block matrix with one less level of blocking.

If you use block matrices, most likely you'll want to set 
@code{matrix_element_mult} to @code{"."} and @code{matrix_element_transpose} 
to @code{'transpose}. See also @code{mat_fullunblocker}.

Example:

@example
(%i1) A : matrix ([1, 2], [3, 4]);
                            [ 1  2 ]
(%o1)                       [      ]
                            [ 3  4 ]
(%i2) B : matrix ([7, 8], [9, 10]);
                            [ 7  8  ]
(%o2)                       [       ]
                            [ 9  10 ]
(%i3) matrix ([A, B]);
                     [ [ 1  2 ]  [ 7  8  ] ]
(%o3)                [ [      ]  [       ] ]
                     [ [ 3  4 ]  [ 9  10 ] ]
(%i4) mat_unblocker (%);
                         [ 1  2  7  8  ]
(%o4)                    [             ]
                         [ 3  4  9  10 ]
@end example
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} nullspace (@mvar{M})

If @mvar{M} is a matrix, return @code{span (v_1, ..., v_n)}, where the set 
@code{@{v_1, ..., v_n@}} is a basis for the nullspace of @mvar{M}.  The span of 
the empty set is @code{@{0@}}.  Thus, when the nullspace has only one member, 
return @code{span ()}.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} nullity (@mvar{M})

If @mvar{M} is a matrix, return the dimension of the nullspace of @mvar{M}.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} orthogonal_complement (@mvar{v_1}, ..., @mvar{v_n})

Return @code{span (u_1, ..., u_m)}, where the set @code{@{u_1, ..., u_m@}} is a 
basis for the orthogonal complement of the set @code{(v_1, ..., v_n)}.

Each vector @mvar{v_1} through @mvar{v_n} must be a column vector.
@end deffn

@c -----------------------------------------------------------------------------
@deffn  {Function} polynomialp (@mvar{p}, @mvar{L}, @mvar{coeffp}, @mvar{exponp})
@deffnx {Function} polynomialp (@mvar{p}, @mvar{L}, @mvar{coeffp})
@deffnx {Function} polynomialp (@mvar{p}, @mvar{L})

Return @code{true} if @mvar{p} is a polynomial in the variables in the list 
@mvar{L}.  The predicate @mvar{coeffp} must evaluate to @code{true} for each
coefficient, and the predicate @mvar{exponp} must evaluate to @code{true} for all 
exponents of the variables in @mvar{L}. If you want to use a non-default
value for @mvar{exponp}, you must supply @mvar{coeffp} with a value even if you
want to use the default for @mvar{coeffp}.

@c WORK THE FOLLOWING INTO THE PRECEDING
The command @code{polynomialp (@mvar{p}, @mvar{L}, @mvar{coeffp})} is equivalent to
@code{polynomialp (@mvar{p}, @mvar{L}, @mvar{coeffp}, 'nonnegintegerp)} and
@code{polynomialp (@mvar{p}, @mvar{L})} is equivalent to
@code{polynomialp (@mvar{p}, L@mvar{,} 'constantp, 'nonnegintegerp)}.

The polynomial needn't be expanded:

@example
(%i1) polynomialp ((x + 1)*(x + 2), [x]);
(%o1)                         true
(%i2) polynomialp ((x + 1)*(x + 2)^a, [x]);
(%o2)                         false
@end example

An example using non-default values for coeffp and exponp:

@example
(%i1) polynomialp ((x + 1)*(x + 2)^(3/2), [x], numberp, numberp);
(%o1)                         true
(%i2) polynomialp ((x^(1/2) + 1)*(x + 2)^(3/2), [x], numberp,
                                                        numberp);
(%o2)                         true
@end example

Polynomials with two variables:

@example
(%i1) polynomialp (x^2 + 5*x*y + y^2, [x]);
(%o1)                         false
(%i2) polynomialp (x^2 + 5*x*y + y^2, [x, y]);
(%o2)                         true
@end example
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} polytocompanion (@mvar{p}, @mvar{x})

If @mvar{p} is a polynomial in @mvar{x}, return the companion matrix of @mvar{p}. 
For a monic polynomial @mvar{p} of degree @mvar{n}, we have 
@code{@mvar{p} = (-1)^@mvar{n} charpoly (polytocompanion (@mvar{p}, @mvar{x}))}.

When @mvar{p} isn't a polynomial in @mvar{x}, signal an error.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} ptriangularize (@mvar{M}, @mvar{v})

If @mvar{M} is a matrix with each entry a polynomial in @mvar{v}, return 
a matrix @mvar{M2} such that

(1) @mvar{M2} is upper triangular,

(2) @code{@mvar{M2} = @mvar{E_n} ... @mvar{E_1} @mvar{M}},
where @mvar{E_1} through @mvar{E_n} are elementary matrices 
whose entries are polynomials in @mvar{v},

(3) @code{|det (@mvar{M})| = |det (@mvar{M2})|},

Note: This function doesn't check that every entry is a polynomial in @mvar{v}.  
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} rowop (@mvar{M}, @mvar{i}, @mvar{j}, @mvar{theta})

If @mvar{M} is a matrix, return the matrix that results from doing the  
row operation @code{R_i <- R_i - theta * R_j}. If @mvar{M} doesn't have a row
@mvar{i} or @mvar{j}, signal an error.
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} rank (@mvar{M})

Return the rank of that matrix @mvar{M}. The rank is the dimension of the
column space. 

Example:

@example
(%i1) rank(matrix([1,2],[2,4]));
(%o1)                                  1
(%i2) rank(matrix([1,b],[c,d]));
Proviso:  @{d - b c # 0@}
(%o2)                                  2
@end example
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} rowswap (@mvar{M}, @mvar{i}, @mvar{j})

If @mvar{M} is a matrix, swap rows @mvar{i} and @mvar{j}. If @mvar{M} doesn't have 
a row @mvar{i} or @mvar{j}, signal an error.
@end deffn

@c -----------------------------------------------------------------------------
@deffn  {Function} toeplitz (@mvar{col})
@deffnx {Function} toeplitz (@mvar{col}, @mvar{row})

Return a Toeplitz matrix @mvar{T}. The first first column of @mvar{T} is 
@mvar{col}; except for the first entry, the first row of @mvar{T} is @mvar{row}. 
The default for @mvar{row} is complex conjugate of @mvar{col}. 

Example:

@example
(%i1)  toeplitz([1,2,3],[x,y,z]);

                                  [ 1  y  z ]
                                  [         ]
(%o1)                             [ 2  1  y ]
                                  [         ]
                                  [ 3  2  1 ]
(%i2)  toeplitz([1,1+%i]);

                              [   1     1 - %I ]
(%o2)                         [                ]
                              [ %I + 1    1    ]
@end example
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} vandermonde_matrix ([@mvar{x_1}, ..., @mvar{x_n}])

Return a @mvar{n} by @mvar{n} matrix whose @mvar{i}-th row is 
@code{[1, @mvar{x_i}, @mvar{x_i}^2, ... @mvar{x_i}^(@mvar{n}-1)]}. 
@end deffn

@c -----------------------------------------------------------------------------
@deffn  {Function} zerofor (@mvar{M})
@deffnx {Function} zerofor (@mvar{M}, @mvar{fld})

Return a zero  matrix that has the same shape as the matrix
@mvar{M}.  Every entry of the zero matrix is the
additive identity of the field @mvar{fld}; the default for
@mvar{fld} is @mvar{generalring}.

The first argument @mvar{M} should be a square matrix or a
non-matrix. When @mvar{M} is a matrix, each entry of @mvar{M} can be a
square matrix -- thus @mvar{M} can be a blocked Maxima matrix. The
matrix can be blocked to any (finite) depth.

See also @code{identfor}
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} zeromatrixp (@mvar{M})

If @mvar{M} is not a block matrix, return @code{true} if 
@code{is (equal (@mvar{e}, 0))} is true for each element @mvar{e} of the matrix 
@mvar{M}.  If @mvar{M} is a block matrix, return @code{true} if @code{zeromatrixp}
evaluates to @code{true} for each element of @mvar{e}.
@end deffn

@c --- End of file linearalgebra.de.texi ---------------------------------------

