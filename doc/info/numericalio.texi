@menu
* Introduction to numericalio::
* Functions and Variables for plain-text input and output::
* Functions and Variables for binary input and output::
@end menu

@node Introduction to numericalio, Functions and Variables for plain-text input and output, numericalio, numericalio
@section Introduction to numericalio

@code{numericalio} is a collection of functions to read and write files and streams.
Functions for plain-text input and output
can read and write numbers (integer, float, or bigfloat), symbols, and strings.
Functions for binary input and output
can read and write only floating-point numbers.

If there already exists a list, matrix, or array object to store input data,
@code{numericalio} input functions can write data into that object.
Otherwise, @code{numericalio} can guess, to some degree, the structure of an object
to store the data, and return that object.

@opencatbox
@category{File input} @category{File output} @category{Share packages} @category{Package numericalio}
@closecatbox

@subsection Plain-text input and output

In plain-text input and output,
it is assumed that each item to read or write is an atom:
an integer, float, bigfloat, string, or symbol,
and not a rational or complex number or any other kind of nonatomic expression.
The @code{numericalio} functions may attempt to do something sensible faced with nonatomic expressions,
but the results are not specified here and subject to change.

Atoms in both input and output files have the same format as
in Maxima batch files or the interactive console.
In particular, strings are enclosed in double quotes,
backslash @code{\} prevents any special interpretation of the next character,
and the question mark @code{?} is recognized at the beginning of a symbol
to mean a Lisp symbol (as opposed to a Maxima symbol).
No continuation character (to join broken lines) is recognized.

@subsection Separator flag values for input

The functions for plain-text input and output take an optional argument,
@mvar{separator_flag}, that tells what character separates data.

For plain-text input, these values of @mvar{separator_flag} are recognized:
@code{comma} for comma separated values,
@code{pipe} for values separated by the vertical bar character @code{|},
@code{semicolon} for values separated by semicolon @code{;}, 
and @code{space} for values separated by space or tab characters.
If the file name ends in @code{.csv} and @mvar{separator_flag} is not specified,
@code{comma} is assumed.
If the file name ends in something other than @code{.csv} and @code{separator_flag} is not specified,
@code{space} is assumed.

In plain-text input, multiple successive space and tab characters count as a single separator.
However, multiple comma, pipe, or semicolon characters are significant.
Successive comma, pipe, or semicolon characters (with or without intervening spaces or tabs)
are considered to have @code{false} between the separators.
For example, @code{1234,,Foo} is treated the same as @code{1234,false,Foo}.

@subsection Separator flag values for output

For plain-text output, @code{tab}, for values separated by the tab character,
is recognized as a value of @mvar{separator_flag},
as well as @code{comma}, @code{pipe}, @code{semicolon}, and @code{space}.

In plain-text output, @code{false} atoms are written as such;
a list @code{[1234, false, Foo]} is written @code{1234,false,Foo},
and there is no attempt to collapse the output to @code{1234,,Foo}.

@subsection Binary floating-point input and output

@code{numericalio} functions can read and write 8-byte IEEE 754 floating-point numbers.
These numbers can be stored either least significant byte first or most significant byte first,
according to the global flag set by @code{assume_external_byte_order}.
If not specified, @code{numericalio} assumes the external byte order is most-significant byte first.

Other kinds of numbers are coerced to 8-byte floats;
@code{numericalio} cannot read or write binary non-numeric data.

Some Lisp implementations do not recognize IEEE 754 special values
(positive and negative infinity, not-a-number values, denormalized values).
The effect of reading such values with @code{numericalio} is undefined.

@code{numericalio} includes functions to open a stream for reading or writing a stream of bytes.


@node Functions and Variables for plain-text input and output, Functions and Variables for binary input and output, Introduction to numericalio, numericalio
@section Functions and Variables for plain-text input and output

@deffn {Function} read_matrix (@mvar{S})
@deffnx {Function} read_matrix (@mvar{S}, @mvar{M})
@deffnx {Function} read_matrix (@mvar{S}, @mvar{separator_flag})
@deffnx {Function} read_matrix (@mvar{S}, @mvar{M}, @mvar{separator_flag})

@code{read_matrix(@mvar{S})} reads the source @mvar{S} and returns its entire content as a matrix.
The size of the matrix is inferred from the input data;
each line of the file becomes one row of the matrix.
If some lines have different lengths, @code{read_matrix} complains.

@code{read_matrix(@mvar{S}, @mvar{M})} read the source @mvar{S} into the matrix @mvar{M},
until @mvar{M} is full or the source is exhausted.
Input data are read into the matrix in row-major order;
the input need not have the same number of rows and columns as @mvar{M}.

The source @mvar{S} may be a file name or a stream.

The recognized values of @mvar{separator_flag} are
@code{comma}, @code{pipe}, @code{semicolon}, and @code{space}.
If @mvar{separator_flag} is not specified, the file is assumed space-delimited.

@opencatbox
@category{Package numericalio} @category{File input}
@closecatbox

@end deffn

@deffn {Function} read_array (@mvar{S}, @mvar{A})
@deffnx {Function} read_array (@mvar{S}, @mvar{A}, @mvar{separator_flag})

Reads the source @mvar{S} into the array @mvar{A},
until @mvar{A} is full or the source is exhausted.
Input data are read into the array in row-major order;
the input need not conform to the dimensions of @mvar{A}.

The source @mvar{S} may be a file name or a stream.

The recognized values of @mvar{separator_flag} are
@code{comma}, @code{pipe}, @code{semicolon}, and @code{space}.
If @mvar{separator_flag} is not specified, the file is assumed space-delimited.

@opencatbox
@category{Package numericalio} @category{File input}
@closecatbox

@end deffn

@deffn {Function} read_hashed_array (@mvar{S}, @mvar{A})
@deffnx {Function} read_hashed_array (@mvar{S}, @mvar{A}, @mvar{separator_flag})

Reads the source @mvar{S} and returns its entire content as a hashed array.
The source @mvar{S} may be a file name or a stream.

@code{read_hashed_array} treats the first item on each line as a hash key,
and associates the remainder of the line (as a list) with the key.
For example,
the line @code{567 12 17 32 55} is equivalent to @code{A[567]: [12, 17, 32, 55]$}.
Lines need not have the same numbers of elements.

The recognized values of @mvar{separator_flag} are
@code{comma}, @code{pipe}, @code{semicolon}, and @code{space}.
If @mvar{separator_flag} is not specified, the file is assumed space-delimited.

@opencatbox
@category{Package numericalio} @category{File input}
@closecatbox

@end deffn

@deffn {Function} read_nested_list (@mvar{S})
@deffnx {Function} read_nested_list (@mvar{S}, @mvar{separator_flag})

Reads the source @mvar{S} and returns its entire content as a nested list.
The source @mvar{S} may be a file name or a stream.

@code{read_nested_list} returns a list which has a sublist for each
line of input. Lines need not have the same numbers of elements.
Empty lines are @i{not} ignored: an empty line yields an empty sublist.

The recognized values of @mvar{separator_flag} are
@code{comma}, @code{pipe}, @code{semicolon}, and @code{space}.
If @mvar{separator_flag} is not specified, the file is assumed space-delimited.

@opencatbox
@category{Package numericalio} @category{File input}
@closecatbox

@end deffn

@deffn {Function} read_list (@mvar{S})
@deffnx {Function} read_list (@mvar{S}, @mvar{L})
@deffnx {Function} read_list (@mvar{S}, @mvar{separator_flag})
@deffnx {Function} read_list (@mvar{S}, @mvar{L}, @mvar{separator_flag})

@code{read_list(@mvar{S})} reads the source @mvar{S} and returns its entire content as a flat list.

@code{read_list(@mvar{S}, @mvar{L})} reads the source @mvar{S} into the list @mvar{L},
until @mvar{L} is full or the source is exhausted.

The source @mvar{S} may be a file name or a stream.

The recognized values of @mvar{separator_flag} are
@code{comma}, @code{pipe}, @code{semicolon}, and @code{space}.
If @mvar{separator_flag} is not specified, the file is assumed space-delimited.

@opencatbox
@category{Package numericalio} @category{File input}
@closecatbox

@end deffn

@deffn {Function} write_data (@mvar{X}, @mvar{D})
@deffnx {Function} write_data (@mvar{X}, @mvar{D}, @mvar{separator_flag})

Writes the object @mvar{X} to the destination @mvar{D}.

@code{write_data} writes a matrix in row-major order,
with one line per row.

@code{write_data} writes an array created by @code{array} or @code{make_array}
in row-major order, with a new line at the end of every slab.
Higher-dimensional slabs are separated by additional new lines.

@code{write_data} writes a hashed array with each key followed by
its associated list on one line.

@code{write_data} writes a nested list with each sublist on one line.

@code{write_data} writes a flat list all on one line.

The destination @mvar{D} may be a file name or a stream.
When the destination is a file name,
the global variable @code{file_output_append} governs
whether the output file is appended or truncated.
When the destination is a stream,
no special action is taken by @code{write_data} after all the data are written;
in particular, the stream remains open.

The recognized values of @mvar{separator_flag} are
@code{comma}, @code{pipe}, @code{semicolon}, @code{space}, and @code{tab}.
If @mvar{separator_flag} is not specified, the file is assumed space-delimited.

@opencatbox
@category{Package numericalio} @category{File output}
@closecatbox

@end deffn

@node Functions and Variables for binary input and output, , Functions and Variables for plain-text input and output, numericalio
@section Functions and Variables for binary input and output

@deffn {Function} assume_external_byte_order (@mvar{byte_order_flag})
Tells @code{numericalio} the byte order for reading and writing binary data.
Two values of @mvar{byte_order_flag} are recognized:
@code{lsb} which indicates least-significant byte first, also called little-endian byte order;
and @code{msb} which indicates most-significant byte first, also called big-endian byte order.

If not specified, @code{numericalio} assumes the external byte order is most-significant byte first.

@opencatbox
@category{Package numericalio}
@closecatbox
@end deffn

@deffn {Function} openr_binary (@mvar{file_name})
Returns an input stream of 8-bit unsigned bytes to read the file named by @mvar{file_name}.

@opencatbox
@category{Package numericalio} @category{File input}
@closecatbox
@end deffn

@deffn {Function} openw_binary (@mvar{file_name})
Returns an output stream of 8-bit unsigned bytes to write the file named by @mvar{file_name}.

@opencatbox
@category{Package numericalio} @category{File output}
@closecatbox
@end deffn

@deffn {Function} opena_binary (@mvar{file_name})
Returns an output stream of 8-bit unsigned bytes to append the file named by @mvar{file_name}.

@opencatbox
@category{Package numericalio} @category{File output}
@closecatbox
@end deffn

@deffn {Function} read_binary_matrix (@mvar{S}, @mvar{M})
Reads binary 8-byte floating point numbers from the source @mvar{S} into the matrix @mvar{M}
until @mvar{M} is full, or the source is exhausted.
Elements of @mvar{M} are read in row-major order.

The source @mvar{S} may be a file name or a stream.

The byte order in elements of the source is specified by @code{assume_external_byte_order}.

@opencatbox
@category{Package numericalio} @category{File input}
@closecatbox
@end deffn

@deffn {Function} read_binary_array (@mvar{S}, @mvar{A})
Reads binary 8-byte floating point numbers from the source @mvar{S} into the array @mvar{A}
until @mvar{A} is full, or the source is exhausted.
@mvar{A} must be an array created by @code{array} or @code{make_array}.
Elements of @mvar{A} are read in row-major order.

The source @mvar{S} may be a file name or a stream.

The byte order in elements of the source is specified by @code{assume_external_byte_order}.

@opencatbox
@category{Package numericalio} @category{File input}
@closecatbox
@end deffn

@deffn {Function} read_binary_list (@mvar{S})
@deffnx {Function} read_binary_list (@mvar{S}, @mvar{L})
@code{read_binary_list(@mvar{S})} reads the entire content of the source @mvar{S}
as a sequence of binary 8-byte floating point numbers, and returns it as a list.
The source @mvar{S} may be a file name or a stream.

@code{read_binary_list(@mvar{S}, @mvar{L})} reads 8-byte binary floating point numbers
from the source @mvar{S} until the list @mvar{L} is full, or the source is exhausted.

The byte order in elements of the source is specified by @code{assume_external_byte_order}.

@opencatbox
@category{Package numericalio} @category{File input}
@closecatbox
@end deffn

@deffn {Function} write_binary_data (@mvar{X}, @mvar{D})

Writes the object @mvar{X}, comprising binary 8-byte IEEE 754 floating-point numbers,
to the destination @mvar{D}.
Other kinds of numbers are coerced to 8-byte floats.
@code{write_binary_data} cannot write non-numeric data.

The object @mvar{X} may be a list, a nested list, a matrix,
or an array created by @code{array} or @code{make_array};
@mvar{X} cannot be an undeclared array or any other type of object.
@code{write_binary_data} writes nested lists, matrices, and arrays in row-major order.

The destination @mvar{D} may be a file name or a stream.
When the destination is a file name,
the global variable @code{file_output_append} governs
whether the output file is appended or truncated.
When the destination is a stream,
no special action is taken by @code{write_binary_data} after all the data are written;
in particular, the stream remains open.

The byte order in elements of the destination
is specified by @code{assume_external_byte_order}.

@opencatbox
@category{Package numericalio} @category{File output}
@closecatbox
@end deffn
