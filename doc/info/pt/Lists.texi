@c /Lists.texi/1.28/Mon Jan  8 04:17:44 2007/-ko/
@menu
* Introdu@value{cedilha}@~ao a Listas::
* Defini@value{cedilha}@~oes para Listas::
@end menu

@node Introdu@value{cedilha}@~ao a Listas, Defini@value{cedilha}@~oes para Listas, Listas, Listas
@section Introdu@value{cedilha}@~ao a Listas

Listas s@~ao o bloco b@'asico de constru@value{cedilha}@~ao para Maxima e Lisp.**Todos os outros tipos
de dado como arrays, tabelas desordenadas, n@'umeros s@~ao representados como listas Lisp.
Essas listas Lisp possuem a forma

@example
((MPLUS) $A 2)
@end example

@noindent
para indicar a express@~ao @code{a+2}.**No n@'{@dotless{i}}vel um do Maxima poderemos ver
a nota@value{cedilha}@~ao infixa @code{a+2}.**Maxima tamb@'em tem listas que foram impressas
como

@example
[1, 2, 7, x+y]
@end example

@noindent
para uma lista com 4 elementos.**Internamente isso corresponde a uma lista Lisp
da forma

@example
((MLIST) 1  2  7  ((MPLUS)  $X $Y ))
@end example

@noindent
O sinalizador que denota o tipo campo de uma express@~ao Maxima @'e uma lista
em si mesmo, ap@'os ter sido adicionado o simplificador a lista poder@'a transforma-se

@example
((MLIST SIMP) 1 2 7 ((MPLUS SIMP) $X $Y))
@end example

@node Defini@value{cedilha}@~oes para Listas,  , Introdu@value{cedilha}@~ao a Listas, Listas
@section Defini@value{cedilha}@~oes para Listas

@c NEED ANOTHER deffn FOR GENERAL EXPRESSIONS ARGUMENTS
@c NEEDS CLARIFICATION AND EXAMPLES
@deffn {Fun@value{cedilha}@~ao} append (@mvar{list_1}, ..., @mvar{list_n})
Retorna uma lista simples dos elementos de @mvar{list_1} seguidos
pelos elementos de @mvar{list_2}, ....  @code{append} tamb@'em trabalha sobre
express@~oes gerais, e.g. @code{append (f(a,b), f(c,d,e));} retorna
@code{f(a,b,c,d,e)}.

Fa@value{cedilha}a @code{example(append);} para um exemplo.

@end deffn

@c NEEDS CLARIFICATION AND EXAMPLES
@deffn {Fun@value{cedilha}@~ao} assoc (@mvar{key}, @mvar{list}, @mvar{default})
@deffnx {Fun@value{cedilha}@~ao} assoc (@mvar{key}, @mvar{list})
Essa fun@value{cedilha}@~ao procura pela chave @mvar{key} do lado esquerdo da entrada @mvar{list}
que @'e da forma @code{[x,y,z,...]} onde cada elemento de @mvar{list} @'e uma express@~ao de
um operando bin@'ario e 2 elementos.  Por exemplo @code{x=1}, @code{2^3}, @code{[a,b]} etc.
A chave @mvar{key} @'e verificada contra o primeiro operando.  @code{assoc} retorna o segundo
operando se @code{key} for achada.  Se a chave @code{key} n@~ao for achada isso
retorna o valor padr@~ao @mvar{default}.  @mvar{default} @'e opcional
e o padr@~ao @'e @code{false}.

@end deffn

@c REPHRASE
@c SPLIT OFF EXAMPLES INTO EXAMPLE SECTION
@deffn {Fun@value{cedilha}@~ao} atom (@mvar{expr})
Retorna @code{true} se @mvar{expr} for atomica (i.e. um n@'umero, nome ou sequ@^encia de caracteres) de outra forma retorna
@code{false}.  Desse modo @code{atom(5)} @'e @code{true} enquanto @code{atom(a[1])} e @code{atom(sin(x))} S@~ao
@code{false} (assumindo @code{a[1]} e @code{x} n@~ao est@~ao associados).

@end deffn

@c NEED ANOTHER deffn FOR GENERAL EXPRESSIONS ARGUMENTS
@c SPLIT OFF EXAMPLES INTO EXAMPLE SECTION
@deffn {Fun@value{cedilha}@~ao} cons (@mvar{expr}, @mvar{list})
Retorna uma nova lista constru@'{@dotless{i}}da do elemento @mvar{expr} como
seu primeiro elemento, seguido por elementos de @mvar{list}.  @code{cons} tamb@'em trabalha
sobre outras express@~oes, e.g. @code{cons(x, f(a,b,c));}  ->  @code{f(x,a,b,c)}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} copylist (@mvar{list})
Retorna uma c@'opia da lista @mvar{list}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} create_list (@mvar{form}, @mvar{x_1}, @mvar{list_1}, ..., @mvar{x_n}, @mvar{list_n})

Cria uma lista por avalia@value{cedilha}@~ao de @mvar{form} com @mvar{x_1} associando a
cada elemento @mvar{list_1}, e para cada tal associa@value{cedilha}@~ao anexa @mvar{x_2}
para cada elemento de @mvar{list_2}, ....
O n@'umero de elementos no resultado ser@'a
o produto do n@'umero de elementos de cada lista.
Cada vari@'avel @mvar{x_i} pode actualmente ser um s@'{@dotless{i}}bolo --o qual n@~ao pode ser avaliado.
A lista de argumentos ser@'a avaliada uma @'unica vez no in@'{@dotless{i}}cio do bloco de 
repeti@value{cedilha}@~ao.  

@example
(%i82) create_list1(x^i,i,[1,3,7]);
(%o82) [x,x^3,x^7]
@end example

@noindent
Com um bloco de repeti@value{cedilha}@~ao duplo:

@example
(%i79) create_list([i,j],i,[a,b],j,[e,f,h]);
(%o79) [[a,e],[a,f],[a,h],[b,e],[b,f],[b,h]]
@end example

Em lugar de @mvar{list_i} dois argumentos podem ser fornecidos cada um dos quais ser@'a
avaliado como um n@'umero.   Esses podem vir a ser inclusive o limite inferior e
superior do bloco de repeti@value{cedilha}@~ao.   

@example
(%i81) create_list([i,j],i,[1,2,3],j,1,i);
(%o81) [[1,1],[2,1],[2,2],[3,1],[3,2],[3,3]]
@end example

Note que os limites ou lista para a vari@'avel @mvar{j} podem
depender do valor corrente de @mvar{i}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} delete (@mvar{expr_1}, @mvar{expr_2})
@deffnx {Fun@value{cedilha}@~ao} delete (@mvar{expr_1}, @mvar{expr_2}, @mvar{n})
Remove todas as ocorr@^encias de @mvar{expr_1} em @mvar{expr_2}. @mvar{expr_1}
pode ser uma parcela de @mvar{expr_2} (se isso for uma adi@value{cedilha}@~ao) ou um factor de @mvar{expr_2}
(se isso for um produto).

@c ===beg===
@c delete(sin(x), x+sin(x)+y);
@c ===end===
@example
(%i1) delete(sin(x), x+sin(x)+y);
(%o1)                         y + x

@end example

@code{delete(@mvar{expr_1}, @mvar{expr_2}, @mvar{n})} remove as primeiras @mvar{n} ocorr@^encias de
@mvar{expr_1} em @mvar{expr_2}.  Se houver menos que @mvar{n}
ocorr@^encias de @mvar{expr_1} em @mvar{expr_2} ent@~ao todas as corr@^encias seram exclu@'{@dotless{i}}das.

@c ===beg===
@c delete(a, f(a,b,c,d,a));
@c delete(a, f(a,b,a,c,d,a), 2);
@c ===end===
@example
(%i1) delete(a, f(a,b,c,d,a));
(%o1)                      f(b, c, d)
(%i2) delete(a, f(a,b,a,c,d,a), 2);
(%o2)                     f(b, c, d, a)

@end example

@end deffn

@deffn {Fun@value{cedilha}@~ao} eighth (@mvar{expr})
Retorna o oitavo item de uma express@~ao ou lista @mvar{expr}.
Veja @code{first} para maiores detalhes.

@end deffn

@c NEED ANOTHER deffn FOR GENERAL EXPRESSIONS ARGUMENTS
@c SPLIT OFF EXAMPLES INTO EXAMPLE SECTION
@deffn {Fun@value{cedilha}@~ao} endcons (@mvar{expr}, @mvar{list})
Retorna uma nova lista consistindo de elementos de
@code{list} seguidos por @mvar{expr}.  @code{endcons} tamb@'em trabalha  sobre express@~oes gerais, e.g.
@code{endcons(x, f(a,b,c));}  ->  @code{f(a,b,c,x)}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} fifth (@mvar{expr})
Retorna o quinto item da express@~ao ou lista @mvar{expr}.
Veja @code{first} para maiores detalhes.

@end deffn

@c NEEDS CLARIFICATION AND EXAMPLES
@deffn {Fun@value{cedilha}@~ao} first (@mvar{expr})
Retorna a primeira parte de @mvar{expr} que pode resultar no primeiro
elemento de uma lista, a primeira linha de uma matriz, a primeira parcela de uma adi@value{cedilha}@~ao,
etc.  Note que @code{first} e suas fun@value{cedilha}@~oes relacionadas, @code{rest} e @code{last}, trabalham
sobre a forma de @mvar{expr} que @'e mostrada n@~ao da forma que @'e digitada na
entrada.  Se a vari@'avel @code{inflag} @'e escolhida para @code{true} todavia, essa
fun@value{cedilha}@~oes olhar@~ao  na forma interna de @mvar{expr}.  Note que o
simplificador re-ordena express@~oes.  Desse modo @code{first(x+y)} ser@'a @code{x} se @code{inflag}
for @code{true} e @code{y} se @code{inflag} for @code{false} (@code{first(y+x)} fornece os mesmos
resultados).  As fun@value{cedilha}@~oes @code{second} .. @code{tenth} retornam da segunda at@'e a
d@'ecima parte do seu argumento.

@end deffn

@deffn {Fun@value{cedilha}@~ao} fourth (@mvar{expr})
Retorna o quarto item da express@~o ou lista @mvar{expr}.
Veja @code{first} para maiores detalhes.

@end deffn

@deffn {Fun@value{cedilha}@~ao} get (@mvar{a}, @mvar{i})
Recupera a propriedade de utilizador indicada por @mvar{i} associada com
o @'atomo @mvar{a} ou retorna @code{false} se "a" n@~ao tem a propriedade @mvar{i}.

@code{get} avalia seus argumentos.

@c ===beg===
@c put (%e, 'transcendental, 'type);
@c put (%pi, 'transcendental, 'type)$
@c put (%i, 'algebraic, 'type)$
@c typeof (expr) := block ([q],
@c         if numberp (expr)
@c         then return ('algebraic),
@c         if not atom (expr)
@c         then return (maplist ('typeof, expr)),
@c         q: get (expr, 'type),
@c         if q=false
@c         then errcatch (error(expr,"is not numeric.")) else q)$
@c typeof (2*%e + x*%pi);
@c typeof (2*%e + %pi);
@c ===end===
@example
(%i1) put (%e, 'transcendental, 'type);
(%o1)                    transcendental
(%i2) put (%pi, 'transcendental, 'type)$
(%i3) put (%i, 'algebraic, 'type)$
(%i4) typeof (expr) := block ([q],
        if numberp (expr)
        then return ('algebraic),
        if not atom (expr)
        then return (maplist ('typeof, expr)),
        q: get (expr, 'type),
        if q=false
        then errcatch (error(expr,"is not numeric.")) else q)$
(%i5) typeof (2*%e + x*%pi);
x is not numeric.
(%o5)  [[transcendental, []], [algebraic, transcendental]]
(%i6) typeof (2*%e + %pi);
(%o6)     [transcendental, [algebraic, transcendental]]

@end example

@end deffn

@deffn {Fun@value{cedilha}@~ao} join (@mvar{l}, @mvar{m})
Cria uma nova lista contendo os elementos das lista @mvar{l} e @mvar{m}, intercaladas.
O resultado tem os elementos @code{[@mvar{l}[1], @mvar{m}[1], @mvar{l}[2], @mvar{m}[2], ...]}.
As listas @mvar{l} e @mvar{m} podem conter qualquer tipo de elementos.

Se as listas forem de diferentes comprimentos, @code{join} ignora elementos da lista mais longa.

Maxima reclama se @mvar{L_1} ou @mvar{L_2} n@~ao for uma lista.

Exemplos:

@c ===beg===
@c L1: [a, sin(b), c!, d - 1];
@c join (L1, [1, 2, 3, 4]);
@c join (L1, [aa, bb, cc, dd, ee, ff]);
@c ===end===
@example
(%i1) L1: [a, sin(b), c!, d - 1];
(%o1)                [a, sin(b), c!, d - 1]
(%i2) join (L1, [1, 2, 3, 4]);
(%o2)          [a, 1, sin(b), 2, c!, 3, d - 1, 4]
(%i3) join (L1, [aa, bb, cc, dd, ee, ff]);
(%o3)        [a, aa, sin(b), bb, c!, cc, d - 1, dd]
@end example

@end deffn

@c NEEDS EXAMPLES
@c HOW IS "LAST" PART DETERMINED ??
@deffn {Fun@value{cedilha}@~ao} last (@mvar{expr})
Retorna a @'ultima parte (parcela, linha, elemento, etc.) de @mvar{expr}.

@end deffn

@c NEEDS CLARIFICATION AND EXAMPLES
@deffn {Fun@value{cedilha}@~ao} length (@mvar{expr})
Retorna (por padr@~ao) o n@'umero de partes na forma
externa (mostrada) de @mvar{expr}.  Para listas isso @'e o n@'umero de elementos,
para matrizes isso @'e o n@'umero de linhas, e para adi@value{cedilha}@~oes isso @'e o n@'umero
de parcelas (veja @code{dispform}).

O comando @code{length} @'e afectado pelo comutador
@code{inflag}.  Ent@~ao, e.g. @code{length(a/(b*c));} retorna 2 se
@code{inflag} for @code{false} (Assumindo @code{exptdispflag} sendo @code{true}), mas 3 se @code{inflag} for
@code{true} (A representa@value{cedilha}@~ao interna @'e essencialmente @code{a*b^-1*c^-1}).

@end deffn

@defvr {Vari@'avel de op@value{cedilha}@~ao} listarith
Valor por omiss@~ao: @code{true} - se @code{false} faz com que quaisquer opera@value{cedilha}@~oes aritm@'eticas
com listas sejam suprimidas; quando @code{true}, opera@value{cedilha}@~oes lista-matriz s@~ao
contagiosas fazendo com que listas sejam convertidas para matrizes retornando um resultado
que @'e sempre uma matriz.  Todavia, opera@value{cedilha}@~oes lista-lista podem retornar
listas.

@end defvr

@deffn {Fun@value{cedilha}@~ao} listp (@mvar{expr})
Retorna @code{true} se @mvar{expr} for uma lista de outra forma retorna @code{false}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} makelist (@mvar{expr}, @mvar{i}, @mvar{i_0}, @mvar{i_1})
@deffnx {Fun@value{cedilha}@~ao} makelist (@mvar{expr}, @mvar{x}, @mvar{list})
Constr@'oi e retorna uma lista,
cada elemento dessa lista @'e gerado usando @mvar{expr}.

@code{makelist (@mvar{expr}, @mvar{i}, @mvar{i_0}, @mvar{i_1})} retorna uma lista,
o @code{j}'@'esimo elemento dessa lista @'e igual a @code{ev (@mvar{expr}, @mvar{i}=j)}
para @code{j} variando de @mvar{i_0} at@'e @mvar{i_1}.

@code{makelist (@mvar{expr}, @mvar{x}, @mvar{list})} retorna uma lista,
o @code{j}'@'esimo elemento @'e igual a @code{ev (@mvar{expr}, @mvar{x}=@mvar{list}[j])}
para @code{j} variando de 1 at@'e @code{length (@mvar{list})}.

Exemplos:

@c ===beg===
@c makelist(concat(x,i),i,1,6);
@c makelist(x=y,y,[a,b,c]);
@c ===end===
@example
(%i1) makelist(concat(x,i),i,1,6);
(%o1)               [x1, x2, x3, x4, x5, x6]
(%i2) makelist(x=y,y,[a,b,c]);
(%o2)                 [x = a, x = b, x = c]

@end example

@end deffn

@deffn {Fun@value{cedilha}@~ao} member (@mvar{expr_1}, @mvar{expr_2})

Retorna @code{true} se @code{is(@mvar{expr_1} = @mvar{a})}
para algum elemento @mvar{a} em @code{args(@mvar{expr_2})},
de outra forma retorna @code{false}.

@code{expr_2} @'e tipicamente uma lista,
nesse caso @code{args(@mvar{expr_2}) = @mvar{expr_2}}
e @code{is(@mvar{expr_1} = @mvar{a})} para algum elemento @mvar{a} em @code{expr_2} @'e o teste.

@code{member} n@~ao inspeciona partes dos argumentos de @code{expr_2},
ent@~ao @code{member} pode retornar @code{false} mesmo se @code{expr_1} for uma parte de algum argumento de @code{expr_2}.

Veja tamb@'em @code{elementp}.

Exemplos:

@c ===beg===
@c member (8, [8, 8.0, 8b0]);
@c member (8, [8.0, 8b0]);
@c member (b, [a, b, c]);
@c member (b, [[a, b], [b, c]]);
@c member ([b, c], [[a, b], [b, c]]);
@c F (1, 1/2, 1/4, 1/8);
@c member (1/8, %);
@c member ("ab", ["aa", "ab", sin(1), a + b]);
@c ===end===
@example
(%i1) member (8, [8, 8.0, 8b0]);
(%o1)                         true
(%i2) member (8, [8.0, 8b0]);
(%o2)                         false
(%i3) member (b, [a, b, c]);
(%o3)                         true
(%i4) member (b, [[a, b], [b, c]]);
(%o4)                         false
(%i5) member ([b, c], [[a, b], [b, c]]);
(%o5)                         true
(%i6) F (1, 1/2, 1/4, 1/8);
                               1  1  1
(%o6)                     F(1, -, -, -)
                               2  4  8
(%i7) member (1/8, %);
(%o7)                         true
(%i8) member ("ab", ["aa", "ab", sin(1), a + b]);
(%o8)                         true
@end example

@end deffn

@deffn {Fun@value{cedilha}@~ao} ninth (@mvar{expr})
Retorna o nono item da express@~ao ou lista @mvar{expr}.
Veja @code{first} para maiores detalhes.

@end deffn

@c NEEDS EXAMPLES
@deffn {Fun@value{cedilha}@~ao} rest (@mvar{expr}, @mvar{n})
@deffnx {Fun@value{cedilha}@~ao} rest (@mvar{expr})
Retorna @mvar{expr} com seus primeiros @mvar{n} elementos removidos se @mvar{n} for
positivo e seus @'ultimos @code{- @mvar{n}} elementos removidos se @mvar{n} for negativo.  Se @mvar{n} for 1
isso pode ser omitido.  @mvar{expr} pode ser uma lista, matriz, ou outra express@~ao.

@end deffn

@c NEED ANOTHER deffn FOR GENERAL EXPRESSIONS ARGUMENTS
@c SPLIT OFF EXAMPLES INTO EXAMPLE SECTION
@deffn {Fun@value{cedilha}@~ao} reverse (@mvar{list})
Ordem reversa para os membros de @mvar{list} (n@~ao
os membros em si mesmos).  @code{reverse} tamb@'em trabalha sobre express@~oes gerais,
e.g.  @code{reverse(a=b);} fornece @code{b=a}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} second (@mvar{expr})
Retorna o segundo item da express@~ao ou lista @mvar{expr}.
Veja @code{first} para maiores detalhes.

@end deffn

@deffn {Fun@value{cedilha}@~ao} seventh (@mvar{expr})
Retorna o s@'etimo item da express@~ao ou lista @mvar{expr}.
Veja @code{first} para maiores detalhes.

@end deffn

@deffn {Fun@value{cedilha}@~ao} sixth (@mvar{expr})
Retorna o sexto item da express@~ao ou lista @mvar{expr}.
Veja @code{first} para maiores detalhes.

@end deffn

@deffn {Fun@value{cedilha}@~ao} sublist_indices (@mvar{L}, @mvar{P})

Retorna os @'{@dotless{i}}ndices dos elementos @code{x} da lista @mvar{L} para os quais
o predicado @code{maybe(@mvar{P}(x))} retornar @code{true};
isso inclui @code{unknown} bem como @code{false}.
@mvar{P} pode ser um nome de fun@value{cedilha}@~ao ou uma express@~ao lambda.
@mvar{L} deve ser uma lista literal.

Exemplos:
@c ===beg===
@c sublist_indices ('[a, b, b, c, 1, 2, b, 3, b], lambda ([x], x='b));
@c sublist_indices ('[a, b, b, c, 1, 2, b, 3, b], symbolp);
@c sublist_indices ([1 > 0, 1 < 0, 2 < 1, 2 > 1, 2 > 0], identity);
@c assume (x < -1);
@c map (maybe, [x > 0, x < 0, x < -2]);
@c sublist_indices ([x > 0, x < 0, x < -2], identity);
@c ===end===

@example
(%i1) sublist_indices ('[a, b, b, c, 1, 2, b, 3, b], lambda ([x], x='b));
(%o1)                     [2, 3, 7, 9]
(%i2) sublist_indices ('[a, b, b, c, 1, 2, b, 3, b], symbolp);
(%o2)                  [1, 2, 3, 4, 7, 9]
(%i3) sublist_indices ([1 > 0, 1 < 0, 2 < 1, 2 > 1, 2 > 0], identity);
(%o3)                       [1, 4, 5]
(%i4) assume (x < -1);
(%o4)                       [x < - 1]
(%i5) map (maybe, [x > 0, x < 0, x < -2]);
(%o5)                [false, true, unknown]
(%i6) sublist_indices ([x > 0, x < 0, x < -2], identity);
(%o6)                          [2]
@end example

@end deffn

@deffn {Fun@value{cedilha}@~ao} tenth (@mvar{expr})
Retorna o d@'ecimo item da express@~ao ou lista @mvar{expr}.
Veja @code{first} para maiores detalhes.

@end deffn

@deffn {Fun@value{cedilha}@~ao} third (@mvar{expr})
Retorna o terceiro item da express@~ao ou lista @mvar{expr}.
Veja @code{first} para maiores detalhes.

@end deffn

