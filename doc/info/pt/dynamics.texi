@c Language: Portuguese
@c Source: dynamics.texi (en) 1.10
@menu
* Introdu@,{c}@~ao a dynamics::
* Defini@,{c}@~oes para dynamics::
@end menu

@node Introdu@,{c}@~ao a dynamics, Defini@,{c}@~oes para dynamics, dynamics, dynamics
@section Introdu@,{c}@~ao a dynamics

O pacote adicional @code{dynamics} inclui v@'arias
fun@,{c}@~oes para criar diversas
representa@,{c}@~oes gr@'aficas de sistemas din@^amicos e
fractais, para al@'em duma implementa@,{c}@~o do m@'etodo
num@'erico de Runge-Kutta de quarta ordem, para resolver sistemas de
equa@,{c}@~oes diferenciais.

Para usar as fun@,{c}@~oes neste pacote ser@'a necess@'ario
primeiro que tudo carreg@'a-lo com @code{load("dynamics")}; as
fun@,{c}@~oes que criam gr@'aficos precisam que o Xmaxima
esteja instalado.

@node Defini@,{c}@~oes para dynamics,  , Introdu@,{c}@~ao a dynamics, dynamics
@section Defini@,{c}@~oes para dynamics

@deffn {Fun@,{c}@~ao} chaosgame (@code{[[}@var{x1}, @var{y1}@code{]}...@code{[}@var{xm}, @var{ym}@code{]]}, @code{[}@var{x0}, @var{y0}@code{]}, @var{b}, @var{n}, ...op@,{c}@~oes...);

Usa o m@'etodo designado de @emph{jogo do caos}, para produzir fractais:
desenha-se um ponto inicial (@var{x0}, @var{y0}) e logo escolhe-se
aleatoriamente um dos @var{m} pontos @code{[}@var{x1},
@var{y1}@code{]}...@code{[}@var{xm}, @var{ym}@code{]}. A seguir,
desenha-se um novo ponto que estar@'a no segmento entre o @'ultimo ponto
desenhado e o ponto que se acabou de seleccionar aleatoriamente, a uma
dist@^ancia do ponto seleccionado que ser@'a @var{b} vezes o comprimento
do segmento. O processo repete-se @var{n} vezes.

@end deffn

@deffn {Fun@,{c}@~ao} evolution (@var{F}, @var{y0}, @var{n},...op@,{c}@~oes...);

Desenha @var{n+1} pontos num gr@'afico bidimensional (s@'erie de tempo),
onde as coordenadas horizontais dos pontos s@~ao os n@'umeros inteiros
0, 1, 2, ..., @var{n}, e as coordenadas verticais s@~ao os valores
@var{y(n)} correspondentes, obtidos a partir da rela@,{c}@~ao
de recorr@^encia
@ifnottex
@example
        y(n+1) = F(y(n))
@end example
@end ifnottex
@tex
$$y_{n+1} = F(y_n)$$
@end tex

Com valor inicial @var{y(0)} igual a @var{y0}. @var{F} dever@'a ser uma
express@~ao que dependa unicamente da vari@'avel @var{y} (e n@~ao de @var{n}),
@var{y0} dever@'a ser um n@'umero real e @var{n} um n@'umero inteiro positivo.

@end deffn

@deffn {Fun@,{c}@~ao} evolution2d (@code{[}@var{F}, @var{G}@code{]}, @code{[}@var{x0}, @var{y0}@code{]}, @var{n}, ...op@,{c}@~oes...);

Mostra, num gr@'afico bidimensional, os primeiros @var{n+1} pontos da
sucess@~ao definida a partir do sistema din@^amico discreto com
rela@,{c}@~oes de recorr@^encia:
@ifnottex 
@example
        x(n+1) = F(x(n), y(n))    y(n+1) = G(x(n), y(n))
@end example
@end ifnottex
@tex
$$\cases{x_{n+1} = F(x_n, y_n) &\cr y_{n+1} = G(x_n, y_n)}$$
@end tex

Com valores iniciais @var{x0} e @var{y0}. @var{F} e @var{G} dever@~ao
ser duas express@~oes que dependam unicamente de @var{x} e @var{y}.

@end deffn

@deffn {Fun@,{c}@~ao} ifs (@code{[}@var{r1},...,@var{rm}@code{]},@code{[}@var{A1},...,@var{Am}@code{]}, @code{[[}@var{x1},@var{y1}@code{]}...@code{[}@var{xm}, @var{ym}@code{]]}, @code{[}@var{x0},@var{y0}@code{]},
@var{n}, ...op@,{c}@~oes...);

Usa o m@'etodo do Sistema de Fun@,{c}@~oes Iteradas (IFS, em
ingl@^es @emph{Iterated Function System}). Esse m@'etodo @'e semelhante
ao m@'etodo descrito na fun@,{c}@~ao @code{chaosgame}, mas em
vez de aproximar o @'ultimo ponto para ponto seleccionado
aleatoriamente, as duas coordenadas do @'ultimo ponto multiplicam-se por
uma matriz 2 por 2 @var{Ai} correspondente ao ponto que tenha sido
escolhido aleatoriamente.

A selec@,{c}@~ao aleat@'oria de um dos @var{m} pontos
atractivos pode se realizada com uma fun@,{c}@~ao de
probabilidade n@~ao uniforme, definida com os pesos
@var{r1},...,@var{rm}. Pesos esses que dever@~ao ser dados em forma
acumulada; por exemplo, se quiser usar 3 pontos com probabilidades
0.2, 0.5 e 0.3, os pesos @var{r1}, @var{r2} e @var{r3} poderiam ser 2, 7
e 10, ou qualquer outro grupo de n@'umeros que estejam na mesma
propor@,{c}@~ao.

@end deffn


@deffn {Fun@,{c}@~ao} orbits (@var{F}, @var{y0}, @var{n1}, @var{n2}, [@var{x}, @var{x0}, @var{xf}, @var{xstep}], ...op@,{c}@~oes...);

Desenha o diagrama de @'orbitas duma fam@'{@dotless{i}}lia de sistemas
din@^amicos discretos unidimensionais, com um par@^ametro @var{x}; esse
tipo de diagrama usa-se para mostrar as bifurca@,{c}@~oes dum
sistema discreto unidimensional.

A fun@,{c}@~ao @var{F(y)} define uma sequ@^encia que
come@,{c}a com um valor inicial @var{y0}, igual que no caso da
fun@,{c}@~ao @code{evolution}, mas neste caso a
fun@,{c}@~ao tamb@'em depender@'a do par@^ametro @var{x}, o
qual ter@'a valores compreendidos no intervalo de @var{x0} a @var{xf},
com incrementos @var{xstep}. Cada valor usado para o par@^ametro @var{x}
apresenta-se no eixo horizontal. No eixo vertical apresentam-se @var{n2}
valores da sucess@~ao @var{y(n1+1)},..., @var{y(n1+n2+1)}, obtidos
ap@'os deix@'a-la evoluir durante @var{n1} itera@,{c}@~oes
iniciais.

@end deffn

@deffn {Fun@,{c}@~ao} rk (EDO, var, inicial, dominio)
@deffnx {Fun@,{c}@~ao} rk ([EDO1,...,EDOm], [v1,...,vm], [inic1,...,inicm], dom@'{@dotless{i}}nio)

A primeira forma usa-se para resolver numericamente uma
equa@,{c}@~ao diferencial ordin@'aria de primeira ordem (EDO),
e a segunda forma resolve numericamente um sistema de @var{m} dessas
equa@,{c}@~oes, usando o m@'etodo de Runge-Kutta de quarta
ordem. @var{var} representa a vari@'avel dependente.  EDO dever@'a ser
uma express@~ao que dependa unicamente das vari@'aveis independente e
dependente, e define a derivada da vari@'avel dependente em
fun@,{c}@~ao da vari@'avel independente.

A vari@'avel independente representa-se com @var{dom@'{@dotless{i}}nio},
que dever@'a ser uma lista com quatro elementos, como, por exemplo:
@example
[t, 0, 10, 0.1]
@end example
o primeiro elemento da lista identifica a vari@'avel independente, os
segundo e terceiro elementos s@~ao os valores inicial e final para essa
vari@'avel, e o @'ultimo elemento d@'a o valor dos incrementos que
dever@~ao ser usados dentro desse intervalo.

Se se estiverem a resolver @var{m} equa@,{c}@~oes, dever@'a
haver @var{m} vari@'aveis dependentes @var{v1}, @var{v2}, ...,
@var{vm}. Os valores iniciais para essas vari@'aveis ser@~ao
@var{inic1}, @var{inic2}, ..., @var{inicm}. Continuar@'a existindo
apenas uma vari@'avel independente, definida pela lista @var{domain},
tal como no caso anterior. @var{EDO1}, ..., @var{EDOm} s@~ao as
express@~oes que definem as derivadas de cada uma das vari@'aveis
dependentes, em fun@,{c}@~ao da vari@'avel independente. As
@'unicas vari@'aveis que podem aparecer em cada uma dessas express@~oes
s@~ao a vari@'avel independente e qualquer uma das vari@'aveis
dependentes. @'E importante que as derivadas @var{EDO1}, ..., @var{EDOm}
sejam colocadas na lista na mesma ordem em que forem agrupadas as
vari@'aveis dependentes; por exemplo, o terceiro elemento da lista
ser@'a interpretado como a derivada da terceira vari@'avel dependente.

O programa tenta integrar as equa@,{c}@~oes desde o valor
inicial da vari@'avel independente, at@'e o valor final, usando
incrementos fixos. Se em algum passo uma das vari@'aveis dependentes
atingir um valor absoluto muito elevado, a integra@,{c}@~ao
ser@'a interrompida nesse ponto. O resultado ser@'a uma lista com um
n@'umero de elementos igual ao n@'umero de itera@,{c}@~oes
realizadas. Cada elemento na lista de resultados @'e tamb@'em uma lista
com @var{m}+1 elementos: o valor da vari@'avel independente, seguido dos
valores das vari@'aveis dependentes nesse ponto.

@end deffn

@deffn {Fun@,{c}@~ao} staircase (@var{F}, @var{y0}, @var{n}, ...op@,{c}@~oes...);

Desenha um diagrama de degraus (ou diagrama de teia de aranha) para a
sucess@~ao definida pela equa@,{c}@~ao de recorr@^encia
@ifnottex
@example
        y(n+1) = F(y(n))
@end example
@end ifnottex
@tex
$$y_{n+1} = F(y_n)$$
@end tex

A interpreta@,{c}@~ao e valores permitidos dos par@^ametros de
entrada @'e igual que para a fun@,{c}@~ao @code{evolution}. Um
diagrama de degraus consiste num gr@'afico da fun@,{c}@~ao
@var{F(y)}, junto com a recta @var{G(y)} @code{=}
@var{y}. Come@,{c}a-se por desenhar um segmento vertical desde
o ponto (@var{y0}, @var{y0}) na recta, at@'e o ponto de
intersec@,{c}@~ao com a fun@,{c}@~ao @var{F}. A
seguir, desde esse ponto desenha-se um segmento horizontal at@'e o ponto
de intersec@,{c}@~ao com a recta, (@var{y1}, @var{y1}); o
processo repete-se @var{n} vezes at@'e alcan@,{c}ar o ponto
(@var{yn}, @var{yn}).

@end deffn

@b{Op@,{c}@~oes}

Cada op@,{c}@~ao @'e uma lista com dois ou mais elementos. O
primeiro elemento na lista @'e o nome da op@,{c}@~ao e os
restantes s@~ao os argumentos para essa op@,{c}@~ao.

As op@,{c}@~oes aceites pelas fun@,{c}@~oes
evolution, evolution2, staircase, orbits, ifs e chaosgame s@~ao as
seguintes:

@itemize @bullet
@item
@dfn{domain} especifica os valores m@'{@dotless{i}}nimo y m@'aximo da
vari@'avel independente para o gr@'afico da fun@,{c}@~ao @var{F}
representada por @code{staircase}.

@item
@dfn{pointsize} define o raio de cada ponto desenhado, em unidades de
pontos. O valor por omiss@~ao @'e 1.

@item
@dfn{xaxislabel} @'e o nome que ser@'a dado ao eixo horizontal.

@item
@dfn{xcenter} @'e a coordenada x do ponto que dever@'a aparecer no
centro do gr@'afico. Esta op@,{c}@~ao n@~ao @'e usada pela
fun@,{c}@~ao @code{orbits}.

@item
@dfn{xradius} @'e metade do comprimento do intervalo de valores de x que
ser@~ao representados. Esta op@,{c}@~ao n@~ao @'e usada pela
fun@,{c}@~ao @code{orbits}.

@item
@dfn{yaxislabel} @'e o nome que ser@'a dado ao eixo vertical.

@item
@dfn{ycenter} @'e a coordenada y do ponto que dever@'a aparecer no
centro do gr@'afico.

@item
@dfn{yradius} @'e metade do comprimento do intervalo de valores de y que
ser@~ao representados.

@end itemize

As op@,{c}@~oes aceites pelos programas juli
@b{Exemplos}

Representa@,{c}@~ao gr@'afica e diagrama de degraus da sequ@^encia:
2, cos(2), cos(cos(2)),...

@example
(%i1) load("dynamics")$
(%i2) evolution(cos(y), 2, 11, [yaxislabel, "y"], [xaxislabel,"n"]);
(%i3) staircase(cos(y), 1, 11, [domain, 0, 1.2]);
@end example

@ifnotinfo
@image{../figures/dynamics1,8cm}
@image{../figures/dynamics2,8cm}
@end ifnotinfo

Se o seu processador for lento, ter@'a que reduzir o n@'umero de
itera@,{c}@~oes usado nos exemplos seguintes. E o valor de
@var{pointsize} que d@'a os melhores resultados depender@'a do monitor e
da resolu@,{c}@~ao usada. Ter@'a que experimentar com
diferentes valores.

Diagrama de @'orbitas para o mapa quadr@'atico
@ifnottex
@example
        y(n+1) = x + y(n)^2
@end example
@end ifnottex
@tex
$$y_{n+1} = x + y_n^2$$
@end tex

@example
(%i4) orbits(y^2+x, 0, 50, 200, [x, -2, 0.25, 0.01], [pointsize, 0.9]);
@end example

@ifnotinfo
@image{../figures/dynamics3,8cm}
@end ifnotinfo

Para ampliar a regi@~ao @`a volta da bifurca@,{c}@~ao na parte de
baixo, perto de x @code{=} -1.25, use o comando:
@example
(%i5) orbits(x+y^2, 0, 100, 400, [x,-1,-1.53,-0.001], [pointsize,0.9],
             [ycenter,-1.2], [yradius,0.4]);
@end example

@ifnotinfo
@image{../figures/dynamics4,8cm}
@end ifnotinfo

Evolu@,{c}@~ao dum sistema em duas dimens@~oes, que conduz a
um fractal:

@example
(%i6) f: 0.6*x*(1+2*x)+0.8*y*(x-1)-y^2-0.9$
(%i7) g: 0.1*x*(1-6*x+4*y)+0.1*y*(1+9*y)-0.4$
(%i8) evolution2d([f,g],[-0.5,0],50000,[pointsize,0.7]);
@end example

@ifnotinfo
@image{../figures/dynamics5,8cm}
@end ifnotinfo

E uma amplia@,{c}@~ao de uma pequena regi@~ao no fractal:

@example
(%i9) evolution2d([f,g],[-0.5,0],300000,[pointsize,0.7], [xcenter,-0.7],
                  [ycenter,-0.3],[xradius,0.1],[yradius,0.1]);
@end example

@ifnotinfo
@image{../figures/dynamics6,8cm}
@end ifnotinfo

Um gr@'afico do tri@^angulo de Sierpinsky, obtido com o jogo do caos:

@example
(%i9) chaosgame([[0, 0], [1, 0], [0.5, sqrt(3)/2]], [0.1, 0.1], 1/2,
                 30000, [pointsize,0.7]);
@end example

@ifnotinfo
@image{../figures/dynamics7,8cm}
@end ifnotinfo

O feto de Barnsley, obtido com o Sistema de Fun@,{c}@~oes
Iteradas:

@example
(%i10) a1: matrix([0.85,0.04],[-0.04,0.85])$
(%i11) a2: matrix([0.2,-0.26],[0.23,0.22])$
(%i12) a3: matrix([-0.15,0.28],[0.26,0.24])$
(%i13) a4: matrix([0,0],[0,0.16])$
(%i14) p1: [0,1.6]$
(%i15) p2: [0,1.6]$
(%i16) p3: [0,0.44]$
(%i17) p4: [0,0]$
(%i18) w: [85,92,99,100]$
(%i19) ifs(w,[a1,a2,a3,a4],[p1,p2,p3,p4],[5,0],50000,[pointsize,0.9]);
@end example

@ifnotinfo
@image{../figures/dynamics8,8cm}
@end ifnotinfo

Para resolver numericamente a equa@,{c}@~ao diferencial

@ifnottex
@example
          dx/dt = t - x^2
@end example
@end ifnottex
@tex
$${{dx}\over{dt}} = t - x^2$$ 
@end tex

Com valor inicial x(t=0) = 1, no intervalo de t desde 0 at@'e 8, e
com incrementos de 0.1, usa-se:

@example
(%i20) resultados: rk(t-x^2,x,1,[t,0,8,0.1])$
@end example

os resultados ficar@~ao armazenados na lista resultados.

Para resolver numericamente o sistema:

@ifnottex
@example
        dx/dt = 4-x^2-4*y^2     dy/dt = y^2-x^2+1
@end example
@end ifnottex
@tex
$$\cases{{\displaystyle{dx}\over\displaystyle{dt}} = 4-x^2-4y^2 &\cr &\cr {\displaystyle{dy}\over\displaystyle{dt}} = y^2-x^2+1}$$
@end tex

para t entre 0 e 4, com valores iniciais -1.25 e 0.75 para (x, y) em t=0:

@example
(%i21) sol: rk([4-x^2-4*y^2,y^2-x^2+1],[x,y],[-1.25,0.75],[t,0,4,0.02])$
@end example
